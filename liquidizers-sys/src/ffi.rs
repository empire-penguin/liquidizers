/* automatically generated by rust-bindgen 0.59.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const LIQUID_USE_COMPLEX_H: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const LIQUID_VERSION: &'static [u8; 6usize] = b"1.6.0\0";
pub const LIQUID_VERSION_NUMBER: u32 = 1006000;
pub const LIQUID_NUM_ERRORS: u32 = 14;
pub const _COMPLEX_H: u32 = 1;
pub const LIQUID_SOFTBIT_0: u32 = 0;
pub const LIQUID_SOFTBIT_1: u32 = 255;
pub const LIQUID_SOFTBIT_ERASURE: u32 = 127;
pub const LIQUID_CRC_NUM_SCHEMES: u32 = 7;
pub const LIQUID_FEC_NUM_SCHEMES: u32 = 28;
pub const LIQUID_SPGRAM_PSD_MIN: f64 = 0.000000000001;
pub const LIQUID_FIRFILT_NUM_TYPES: u32 = 16;
pub const LIQUID_FRAME64_LEN: u32 = 1440;
pub const LIQUID_WINDOW_NUM_FUNCTIONS: u32 = 10;
pub const LIQUID_MAX_FACTORS: u32 = 40;
pub const MAX_MOD_BITS_PER_SYMBOL: u32 = 8;
pub const LIQUID_MODEM_NUM_SCHEMES: u32 = 53;
pub const FIRPFBCH_NYQUIST: u32 = 0;
pub const FIRPFBCH_ROOTNYQUIST: u32 = 1;
pub const LIQUID_ANALYZER: u32 = 0;
pub const LIQUID_SYNTHESIZER: u32 = 1;
pub const OFDMFRAME_SCTYPE_NULL: u32 = 0;
pub const OFDMFRAME_SCTYPE_PILOT: u32 = 1;
pub const OFDMFRAME_SCTYPE_DATA: u32 = 2;
pub const LIQUID_OPTIM_MINIMIZE: u32 = 0;
pub const LIQUID_OPTIM_MAXIMIZE: u32 = 1;
pub const LIQUID_MSEQUENCE_GENPOLY_M2: u32 = 3;
pub const LIQUID_MSEQUENCE_GENPOLY_M3: u32 = 6;
pub const LIQUID_MSEQUENCE_GENPOLY_M4: u32 = 12;
pub const LIQUID_MSEQUENCE_GENPOLY_M5: u32 = 20;
pub const LIQUID_MSEQUENCE_GENPOLY_M6: u32 = 48;
pub const LIQUID_MSEQUENCE_GENPOLY_M7: u32 = 96;
pub const LIQUID_MSEQUENCE_GENPOLY_M8: u32 = 184;
pub const LIQUID_MSEQUENCE_GENPOLY_M9: u32 = 272;
pub const LIQUID_MSEQUENCE_GENPOLY_M10: u32 = 576;
pub const LIQUID_MSEQUENCE_GENPOLY_M11: u32 = 1280;
pub const LIQUID_MSEQUENCE_GENPOLY_M12: u32 = 3592;
pub const LIQUID_MSEQUENCE_GENPOLY_M13: u32 = 7296;
pub const LIQUID_MSEQUENCE_GENPOLY_M14: u32 = 14338;
pub const LIQUID_MSEQUENCE_GENPOLY_M15: u32 = 24576;
pub const LIQUID_MSEQUENCE_GENPOLY_M16: u32 = 53256;
pub const LIQUID_MSEQUENCE_GENPOLY_M17: u32 = 73728;
pub const LIQUID_MSEQUENCE_GENPOLY_M18: u32 = 132096;
pub const LIQUID_MSEQUENCE_GENPOLY_M19: u32 = 466944;
pub const LIQUID_MSEQUENCE_GENPOLY_M20: u32 = 589824;
pub const LIQUID_MSEQUENCE_GENPOLY_M21: u32 = 1310720;
pub const LIQUID_MSEQUENCE_GENPOLY_M22: u32 = 3145728;
pub const LIQUID_MSEQUENCE_GENPOLY_M23: u32 = 4325376;
pub const LIQUID_MSEQUENCE_GENPOLY_M24: u32 = 14745600;
pub const LIQUID_MSEQUENCE_GENPOLY_M25: u32 = 16777220;
pub const LIQUID_MSEQUENCE_GENPOLY_M26: u32 = 33554467;
pub const LIQUID_MSEQUENCE_GENPOLY_M27: u32 = 67108883;
pub const LIQUID_MSEQUENCE_GENPOLY_M28: u32 = 134217732;
pub const LIQUID_MSEQUENCE_GENPOLY_M29: u32 = 268435458;
pub const LIQUID_MSEQUENCE_GENPOLY_M30: u32 = 536870953;
pub const LIQUID_MSEQUENCE_GENPOLY_M31: u32 = 1073741828;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__low as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__high as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
impl Default for __atomic_wide_counter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wseq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut liquid_version: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn liquid_libversion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn liquid_libversion_number() -> ::std::os::raw::c_int;
}
pub const liquid_error_code_LIQUID_OK: liquid_error_code = 0;
pub const liquid_error_code_LIQUID_EINT: liquid_error_code = 1;
pub const liquid_error_code_LIQUID_EIOBJ: liquid_error_code = 2;
pub const liquid_error_code_LIQUID_EICONFIG: liquid_error_code = 3;
pub const liquid_error_code_LIQUID_EIVAL: liquid_error_code = 4;
pub const liquid_error_code_LIQUID_EIRANGE: liquid_error_code = 5;
pub const liquid_error_code_LIQUID_EIMODE: liquid_error_code = 6;
pub const liquid_error_code_LIQUID_EUMODE: liquid_error_code = 7;
pub const liquid_error_code_LIQUID_ENOINIT: liquid_error_code = 8;
pub const liquid_error_code_LIQUID_EIMEM: liquid_error_code = 9;
pub const liquid_error_code_LIQUID_EIO: liquid_error_code = 10;
pub const liquid_error_code_LIQUID_ENOCONV: liquid_error_code = 11;
pub const liquid_error_code_LIQUID_ENOIMP: liquid_error_code = 12;
pub type liquid_error_code = ::std::os::raw::c_uint;
extern "C" {
    pub static mut liquid_error_str: [*const ::std::os::raw::c_char; 14usize];
}
extern "C" {
    pub fn liquid_error_info(_code: liquid_error_code) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>)
        -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn creall(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __creall(__z: __BindgenComplex<f64>) -> u128;
}
pub type liquid_float_complex = __BindgenComplex<f32>;
pub type liquid_double_complex = __BindgenComplex<f64>;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_UNKNOWN: agc_squelch_mode = 0;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_ENABLED: agc_squelch_mode = 1;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_RISE: agc_squelch_mode = 2;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_SIGNALHI: agc_squelch_mode = 3;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_FALL: agc_squelch_mode = 4;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_SIGNALLO: agc_squelch_mode = 5;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_TIMEOUT: agc_squelch_mode = 6;
pub const agc_squelch_mode_LIQUID_AGC_SQUELCH_DISABLED: agc_squelch_mode = 7;
pub type agc_squelch_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct agc_crcf_s {
    _unused: [u8; 0],
}
pub type agc_crcf = *mut agc_crcf_s;
extern "C" {
    pub fn agc_crcf_create() -> agc_crcf;
}
extern "C" {
    pub fn agc_crcf_copy(_q: agc_crcf) -> agc_crcf;
}
extern "C" {
    pub fn agc_crcf_destroy(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_print(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_reset(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_execute(
        _q: agc_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_execute_block(
        _q: agc_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_lock(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_unlock(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_is_locked(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_set_bandwidth(_q: agc_crcf, _bt: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_get_bandwidth(_q: agc_crcf) -> f32;
}
extern "C" {
    pub fn agc_crcf_get_signal_level(_q: agc_crcf) -> f32;
}
extern "C" {
    pub fn agc_crcf_set_signal_level(_q: agc_crcf, _x2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_get_rssi(_q: agc_crcf) -> f32;
}
extern "C" {
    pub fn agc_crcf_set_rssi(_q: agc_crcf, _rssi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_get_gain(_q: agc_crcf) -> f32;
}
extern "C" {
    pub fn agc_crcf_set_gain(_q: agc_crcf, _gain: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_get_scale(_q: agc_crcf) -> f32;
}
extern "C" {
    pub fn agc_crcf_set_scale(_q: agc_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_init(
        _q: agc_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_squelch_enable(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_squelch_disable(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_squelch_is_enabled(_q: agc_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_squelch_set_threshold(_q: agc_crcf, _thresh: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_squelch_get_threshold(_q: agc_crcf) -> f32;
}
extern "C" {
    pub fn agc_crcf_squelch_set_timeout(
        _q: agc_crcf,
        _timeout: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_crcf_squelch_get_timeout(_q: agc_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn agc_crcf_squelch_get_status(_q: agc_crcf) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct agc_rrrf_s {
    _unused: [u8; 0],
}
pub type agc_rrrf = *mut agc_rrrf_s;
extern "C" {
    pub fn agc_rrrf_create() -> agc_rrrf;
}
extern "C" {
    pub fn agc_rrrf_copy(_q: agc_rrrf) -> agc_rrrf;
}
extern "C" {
    pub fn agc_rrrf_destroy(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_print(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_reset(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_execute(_q: agc_rrrf, _x: f32, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_execute_block(
        _q: agc_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_lock(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_unlock(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_is_locked(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_set_bandwidth(_q: agc_rrrf, _bt: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_get_bandwidth(_q: agc_rrrf) -> f32;
}
extern "C" {
    pub fn agc_rrrf_get_signal_level(_q: agc_rrrf) -> f32;
}
extern "C" {
    pub fn agc_rrrf_set_signal_level(_q: agc_rrrf, _x2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_get_rssi(_q: agc_rrrf) -> f32;
}
extern "C" {
    pub fn agc_rrrf_set_rssi(_q: agc_rrrf, _rssi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_get_gain(_q: agc_rrrf) -> f32;
}
extern "C" {
    pub fn agc_rrrf_set_gain(_q: agc_rrrf, _gain: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_get_scale(_q: agc_rrrf) -> f32;
}
extern "C" {
    pub fn agc_rrrf_set_scale(_q: agc_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_init(
        _q: agc_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_squelch_enable(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_squelch_disable(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_squelch_is_enabled(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_squelch_set_threshold(_q: agc_rrrf, _thresh: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_squelch_get_threshold(_q: agc_rrrf) -> f32;
}
extern "C" {
    pub fn agc_rrrf_squelch_set_timeout(
        _q: agc_rrrf,
        _timeout: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn agc_rrrf_squelch_get_timeout(_q: agc_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn agc_rrrf_squelch_get_status(_q: agc_rrrf) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cvsd_s {
    _unused: [u8; 0],
}
pub type cvsd = *mut cvsd_s;
extern "C" {
    pub fn cvsd_create(_num_bits: ::std::os::raw::c_uint, _zeta: f32, _alpha: f32) -> cvsd;
}
extern "C" {
    pub fn cvsd_destroy(_q: cvsd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cvsd_print(_q: cvsd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cvsd_encode(_q: cvsd, _audio_sample: f32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn cvsd_decode(_q: cvsd, _bit: ::std::os::raw::c_uchar) -> f32;
}
extern "C" {
    pub fn cvsd_encode8(
        _q: cvsd,
        _audio: *mut f32,
        _data: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cvsd_decode8(
        _q: cvsd,
        _data: ::std::os::raw::c_uchar,
        _audio: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cbufferf_s {
    _unused: [u8; 0],
}
pub type cbufferf = *mut cbufferf_s;
extern "C" {
    pub fn cbufferf_create(_max_size: ::std::os::raw::c_uint) -> cbufferf;
}
extern "C" {
    pub fn cbufferf_create_max(
        _max_size: ::std::os::raw::c_uint,
        _max_read: ::std::os::raw::c_uint,
    ) -> cbufferf;
}
extern "C" {
    pub fn cbufferf_copy(_q: cbufferf) -> cbufferf;
}
extern "C" {
    pub fn cbufferf_destroy(_q: cbufferf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_print(_q: cbufferf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_reset(_q: cbufferf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_size(_q: cbufferf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbufferf_max_size(_q: cbufferf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbufferf_max_read(_q: cbufferf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbufferf_space_available(_q: cbufferf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbufferf_is_empty(_q: cbufferf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_is_full(_q: cbufferf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_push(_q: cbufferf, _v: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_write(
        _q: cbufferf,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_pop(_q: cbufferf, _v: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_read(
        _q: cbufferf,
        _num_requested: ::std::os::raw::c_uint,
        _v: *mut *mut f32,
        _num_read: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbufferf_release(_q: cbufferf, _n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cbuffercf_s {
    _unused: [u8; 0],
}
pub type cbuffercf = *mut cbuffercf_s;
extern "C" {
    pub fn cbuffercf_create(_max_size: ::std::os::raw::c_uint) -> cbuffercf;
}
extern "C" {
    pub fn cbuffercf_create_max(
        _max_size: ::std::os::raw::c_uint,
        _max_read: ::std::os::raw::c_uint,
    ) -> cbuffercf;
}
extern "C" {
    pub fn cbuffercf_copy(_q: cbuffercf) -> cbuffercf;
}
extern "C" {
    pub fn cbuffercf_destroy(_q: cbuffercf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_print(_q: cbuffercf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_reset(_q: cbuffercf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_size(_q: cbuffercf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbuffercf_max_size(_q: cbuffercf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbuffercf_max_read(_q: cbuffercf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbuffercf_space_available(_q: cbuffercf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cbuffercf_is_empty(_q: cbuffercf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_is_full(_q: cbuffercf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_push(_q: cbuffercf, _v: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_write(
        _q: cbuffercf,
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_pop(_q: cbuffercf, _v: *mut liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_read(
        _q: cbuffercf,
        _num_requested: ::std::os::raw::c_uint,
        _v: *mut *mut liquid_float_complex,
        _num_read: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbuffercf_release(_q: cbuffercf, _n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct windowf_s {
    _unused: [u8; 0],
}
pub type windowf = *mut windowf_s;
extern "C" {
    pub fn windowf_create(_n: ::std::os::raw::c_uint) -> windowf;
}
extern "C" {
    pub fn windowf_recreate(_q: windowf, _n: ::std::os::raw::c_uint) -> windowf;
}
extern "C" {
    pub fn windowf_copy(_q: windowf) -> windowf;
}
extern "C" {
    pub fn windowf_destroy(_q: windowf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowf_print(_q: windowf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowf_debug_print(_q: windowf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowf_reset(_q: windowf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowf_read(_q: windowf, _v: *mut *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowf_index(
        _q: windowf,
        _i: ::std::os::raw::c_uint,
        _v: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowf_push(_q: windowf, _v: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowf_write(
        _q: windowf,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct windowcf_s {
    _unused: [u8; 0],
}
pub type windowcf = *mut windowcf_s;
extern "C" {
    pub fn windowcf_create(_n: ::std::os::raw::c_uint) -> windowcf;
}
extern "C" {
    pub fn windowcf_recreate(_q: windowcf, _n: ::std::os::raw::c_uint) -> windowcf;
}
extern "C" {
    pub fn windowcf_copy(_q: windowcf) -> windowcf;
}
extern "C" {
    pub fn windowcf_destroy(_q: windowcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowcf_print(_q: windowcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowcf_debug_print(_q: windowcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowcf_reset(_q: windowcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowcf_read(_q: windowcf, _v: *mut *mut liquid_float_complex)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowcf_index(
        _q: windowcf,
        _i: ::std::os::raw::c_uint,
        _v: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowcf_push(_q: windowcf, _v: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windowcf_write(
        _q: windowcf,
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wdelayf_s {
    _unused: [u8; 0],
}
pub type wdelayf = *mut wdelayf_s;
extern "C" {
    pub fn wdelayf_create(_delay: ::std::os::raw::c_uint) -> wdelayf;
}
extern "C" {
    pub fn wdelayf_copy(_q: wdelayf) -> wdelayf;
}
extern "C" {
    pub fn wdelayf_recreate(_q: wdelayf, _delay: ::std::os::raw::c_uint) -> wdelayf;
}
extern "C" {
    pub fn wdelayf_destroy(_q: wdelayf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelayf_print(_q: wdelayf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelayf_reset(_q: wdelayf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelayf_read(_q: wdelayf, _v: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelayf_push(_q: wdelayf, _v: f32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wdelaycf_s {
    _unused: [u8; 0],
}
pub type wdelaycf = *mut wdelaycf_s;
extern "C" {
    pub fn wdelaycf_create(_delay: ::std::os::raw::c_uint) -> wdelaycf;
}
extern "C" {
    pub fn wdelaycf_copy(_q: wdelaycf) -> wdelaycf;
}
extern "C" {
    pub fn wdelaycf_recreate(_q: wdelaycf, _delay: ::std::os::raw::c_uint) -> wdelaycf;
}
extern "C" {
    pub fn wdelaycf_destroy(_q: wdelaycf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelaycf_print(_q: wdelaycf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelaycf_reset(_q: wdelaycf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelaycf_read(_q: wdelaycf, _v: *mut liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdelaycf_push(_q: wdelaycf, _v: liquid_float_complex) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_cccf_s {
    _unused: [u8; 0],
}
pub type channel_cccf = *mut channel_cccf_s;
extern "C" {
    pub fn channel_cccf_create() -> channel_cccf;
}
extern "C" {
    pub fn channel_cccf_copy(_q: channel_cccf) -> channel_cccf;
}
extern "C" {
    pub fn channel_cccf_destroy(_q: channel_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_cccf_print(_q: channel_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_cccf_add_awgn(
        _q: channel_cccf,
        _noise_floor: f32,
        _snr: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_cccf_add_carrier_offset(
        _q: channel_cccf,
        _frequency: f32,
        _phase: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_cccf_add_multipath(
        _q: channel_cccf,
        _h: *mut liquid_float_complex,
        _h_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_cccf_add_shadowing(
        _q: channel_cccf,
        _sigma: f32,
        _fd: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_cccf_execute(
        _q: channel_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_cccf_execute_block(
        _q: channel_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tvmpch_cccf_s {
    _unused: [u8; 0],
}
pub type tvmpch_cccf = *mut tvmpch_cccf_s;
extern "C" {
    pub fn tvmpch_cccf_create(_n: ::std::os::raw::c_uint, _std: f32, _tau: f32) -> tvmpch_cccf;
}
extern "C" {
    pub fn tvmpch_cccf_copy(_q: tvmpch_cccf) -> tvmpch_cccf;
}
extern "C" {
    pub fn tvmpch_cccf_destroy(_q: tvmpch_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvmpch_cccf_reset(_q: tvmpch_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvmpch_cccf_print(_q: tvmpch_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvmpch_cccf_push(_q: tvmpch_cccf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvmpch_cccf_execute(
        _q: tvmpch_cccf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvmpch_cccf_execute_one(
        _q: tvmpch_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvmpch_cccf_execute_block(
        _q: tvmpch_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dotprod_rrrf_s {
    _unused: [u8; 0],
}
pub type dotprod_rrrf = *mut dotprod_rrrf_s;
extern "C" {
    pub fn dotprod_rrrf_run(
        _v: *mut f32,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_rrrf_run4(
        _v: *mut f32,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_rrrf_create(_v: *mut f32, _n: ::std::os::raw::c_uint) -> dotprod_rrrf;
}
extern "C" {
    pub fn dotprod_rrrf_create_rev(_v: *mut f32, _n: ::std::os::raw::c_uint) -> dotprod_rrrf;
}
extern "C" {
    pub fn dotprod_rrrf_recreate(
        _q: dotprod_rrrf,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_rrrf;
}
extern "C" {
    pub fn dotprod_rrrf_recreate_rev(
        _q: dotprod_rrrf,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_rrrf;
}
extern "C" {
    pub fn dotprod_rrrf_copy(_q: dotprod_rrrf) -> dotprod_rrrf;
}
extern "C" {
    pub fn dotprod_rrrf_destroy(_q: dotprod_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_rrrf_print(_q: dotprod_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_rrrf_execute(
        _q: dotprod_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dotprod_cccf_s {
    _unused: [u8; 0],
}
pub type dotprod_cccf = *mut dotprod_cccf_s;
extern "C" {
    pub fn dotprod_cccf_run(
        _v: *mut liquid_float_complex,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_cccf_run4(
        _v: *mut liquid_float_complex,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_cccf_create(
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_cccf;
}
extern "C" {
    pub fn dotprod_cccf_create_rev(
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_cccf;
}
extern "C" {
    pub fn dotprod_cccf_recreate(
        _q: dotprod_cccf,
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_cccf;
}
extern "C" {
    pub fn dotprod_cccf_recreate_rev(
        _q: dotprod_cccf,
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_cccf;
}
extern "C" {
    pub fn dotprod_cccf_copy(_q: dotprod_cccf) -> dotprod_cccf;
}
extern "C" {
    pub fn dotprod_cccf_destroy(_q: dotprod_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_cccf_print(_q: dotprod_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_cccf_execute(
        _q: dotprod_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dotprod_crcf_s {
    _unused: [u8; 0],
}
pub type dotprod_crcf = *mut dotprod_crcf_s;
extern "C" {
    pub fn dotprod_crcf_run(
        _v: *mut f32,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_crcf_run4(
        _v: *mut f32,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_crcf_create(_v: *mut f32, _n: ::std::os::raw::c_uint) -> dotprod_crcf;
}
extern "C" {
    pub fn dotprod_crcf_create_rev(_v: *mut f32, _n: ::std::os::raw::c_uint) -> dotprod_crcf;
}
extern "C" {
    pub fn dotprod_crcf_recreate(
        _q: dotprod_crcf,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_crcf;
}
extern "C" {
    pub fn dotprod_crcf_recreate_rev(
        _q: dotprod_crcf,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> dotprod_crcf;
}
extern "C" {
    pub fn dotprod_crcf_copy(_q: dotprod_crcf) -> dotprod_crcf;
}
extern "C" {
    pub fn dotprod_crcf_destroy(_q: dotprod_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_crcf_print(_q: dotprod_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotprod_crcf_execute(
        _q: dotprod_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_sumsqf(_v: *mut f32, _n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_sumsqcf(_v: *mut liquid_float_complex, _n: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eqlms_rrrf_s {
    _unused: [u8; 0],
}
pub type eqlms_rrrf = *mut eqlms_rrrf_s;
extern "C" {
    pub fn eqlms_rrrf_create(_h: *mut f32, _n: ::std::os::raw::c_uint) -> eqlms_rrrf;
}
extern "C" {
    pub fn eqlms_rrrf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> eqlms_rrrf;
}
extern "C" {
    pub fn eqlms_rrrf_create_lowpass(_n: ::std::os::raw::c_uint, _fc: f32) -> eqlms_rrrf;
}
extern "C" {
    pub fn eqlms_rrrf_recreate(
        _q: eqlms_rrrf,
        _h: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> eqlms_rrrf;
}
extern "C" {
    pub fn eqlms_rrrf_copy(_q: eqlms_rrrf) -> eqlms_rrrf;
}
extern "C" {
    pub fn eqlms_rrrf_destroy(_q: eqlms_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_reset(_q: eqlms_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_print(_q: eqlms_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_get_bw(_q: eqlms_rrrf) -> f32;
}
extern "C" {
    pub fn eqlms_rrrf_set_bw(_q: eqlms_rrrf, _lambda: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_get_length(_q: eqlms_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn eqlms_rrrf_get_coefficients(_q: eqlms_rrrf) -> *const f32;
}
extern "C" {
    pub fn eqlms_rrrf_copy_coefficients(_q: eqlms_rrrf, _w: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_get_weights(_q: eqlms_rrrf, _w: *mut f32);
}
extern "C" {
    pub fn eqlms_rrrf_push(_q: eqlms_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_push_block(
        _q: eqlms_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_execute(_q: eqlms_rrrf, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_decim_execute(
        _q: eqlms_rrrf,
        _x: *mut f32,
        _y: *mut f32,
        _k: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_execute_block(
        _q: eqlms_rrrf,
        _k: ::std::os::raw::c_uint,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_step(_q: eqlms_rrrf, _d: f32, _d_hat: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_step_blind(_q: eqlms_rrrf, _d_hat: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_rrrf_train(
        _q: eqlms_rrrf,
        _w: *mut f32,
        _x: *mut f32,
        _d: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eqlms_cccf_s {
    _unused: [u8; 0],
}
pub type eqlms_cccf = *mut eqlms_cccf_s;
extern "C" {
    pub fn eqlms_cccf_create(
        _h: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> eqlms_cccf;
}
extern "C" {
    pub fn eqlms_cccf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> eqlms_cccf;
}
extern "C" {
    pub fn eqlms_cccf_create_lowpass(_n: ::std::os::raw::c_uint, _fc: f32) -> eqlms_cccf;
}
extern "C" {
    pub fn eqlms_cccf_recreate(
        _q: eqlms_cccf,
        _h: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> eqlms_cccf;
}
extern "C" {
    pub fn eqlms_cccf_copy(_q: eqlms_cccf) -> eqlms_cccf;
}
extern "C" {
    pub fn eqlms_cccf_destroy(_q: eqlms_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_reset(_q: eqlms_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_print(_q: eqlms_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_get_bw(_q: eqlms_cccf) -> f32;
}
extern "C" {
    pub fn eqlms_cccf_set_bw(_q: eqlms_cccf, _lambda: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_get_length(_q: eqlms_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn eqlms_cccf_get_coefficients(_q: eqlms_cccf) -> *const liquid_float_complex;
}
extern "C" {
    pub fn eqlms_cccf_copy_coefficients(
        _q: eqlms_cccf,
        _w: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_get_weights(_q: eqlms_cccf, _w: *mut liquid_float_complex);
}
extern "C" {
    pub fn eqlms_cccf_push(_q: eqlms_cccf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_push_block(
        _q: eqlms_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_execute(
        _q: eqlms_cccf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_decim_execute(
        _q: eqlms_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _k: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_execute_block(
        _q: eqlms_cccf,
        _k: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_step(
        _q: eqlms_cccf,
        _d: liquid_float_complex,
        _d_hat: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_step_blind(
        _q: eqlms_cccf,
        _d_hat: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqlms_cccf_train(
        _q: eqlms_cccf,
        _w: *mut liquid_float_complex,
        _x: *mut liquid_float_complex,
        _d: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eqrls_rrrf_s {
    _unused: [u8; 0],
}
pub type eqrls_rrrf = *mut eqrls_rrrf_s;
extern "C" {
    pub fn eqrls_rrrf_create(_h: *mut f32, _n: ::std::os::raw::c_uint) -> eqrls_rrrf;
}
extern "C" {
    pub fn eqrls_rrrf_recreate(
        _q: eqrls_rrrf,
        _h: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> eqrls_rrrf;
}
extern "C" {
    pub fn eqrls_rrrf_copy(_q: eqrls_rrrf) -> eqrls_rrrf;
}
extern "C" {
    pub fn eqrls_rrrf_destroy(_q: eqrls_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_reset(_q: eqrls_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_print(_q: eqrls_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_get_bw(_q: eqrls_rrrf) -> f32;
}
extern "C" {
    pub fn eqrls_rrrf_set_bw(_q: eqrls_rrrf, _mu: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_push(_q: eqrls_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_execute(_q: eqrls_rrrf, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_step(_q: eqrls_rrrf, _d: f32, _d_hat: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_get_weights(_q: eqrls_rrrf, _w: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_rrrf_train(
        _q: eqrls_rrrf,
        _w: *mut f32,
        _x: *mut f32,
        _d: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eqrls_cccf_s {
    _unused: [u8; 0],
}
pub type eqrls_cccf = *mut eqrls_cccf_s;
extern "C" {
    pub fn eqrls_cccf_create(
        _h: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> eqrls_cccf;
}
extern "C" {
    pub fn eqrls_cccf_recreate(
        _q: eqrls_cccf,
        _h: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> eqrls_cccf;
}
extern "C" {
    pub fn eqrls_cccf_copy(_q: eqrls_cccf) -> eqrls_cccf;
}
extern "C" {
    pub fn eqrls_cccf_destroy(_q: eqrls_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_reset(_q: eqrls_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_print(_q: eqrls_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_get_bw(_q: eqrls_cccf) -> f32;
}
extern "C" {
    pub fn eqrls_cccf_set_bw(_q: eqrls_cccf, _mu: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_push(_q: eqrls_cccf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_execute(
        _q: eqrls_cccf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_step(
        _q: eqrls_cccf,
        _d: liquid_float_complex,
        _d_hat: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_get_weights(
        _q: eqrls_cccf,
        _w: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqrls_cccf_train(
        _q: eqrls_cccf,
        _w: *mut liquid_float_complex,
        _x: *mut liquid_float_complex,
        _d: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const crc_scheme_LIQUID_CRC_UNKNOWN: crc_scheme = 0;
pub const crc_scheme_LIQUID_CRC_NONE: crc_scheme = 1;
pub const crc_scheme_LIQUID_CRC_CHECKSUM: crc_scheme = 2;
pub const crc_scheme_LIQUID_CRC_8: crc_scheme = 3;
pub const crc_scheme_LIQUID_CRC_16: crc_scheme = 4;
pub const crc_scheme_LIQUID_CRC_24: crc_scheme = 5;
pub const crc_scheme_LIQUID_CRC_32: crc_scheme = 6;
pub type crc_scheme = ::std::os::raw::c_uint;
extern "C" {
    pub static mut crc_scheme_str: [[*const ::std::os::raw::c_char; 2usize]; 7usize];
}
extern "C" {
    pub fn liquid_print_crc_schemes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_getopt_str2crc(_str: *const ::std::os::raw::c_char) -> crc_scheme;
}
extern "C" {
    pub fn crc_get_length(_scheme: crc_scheme) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn crc_generate_key(
        _scheme: crc_scheme,
        _msg: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn crc_append_key(
        _scheme: crc_scheme,
        _msg: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crc_validate_message(
        _scheme: crc_scheme,
        _msg: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _key: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crc_check_key(
        _scheme: crc_scheme,
        _msg: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crc_sizeof_key(_scheme: crc_scheme) -> ::std::os::raw::c_uint;
}
pub const fec_scheme_LIQUID_FEC_UNKNOWN: fec_scheme = 0;
pub const fec_scheme_LIQUID_FEC_NONE: fec_scheme = 1;
pub const fec_scheme_LIQUID_FEC_REP3: fec_scheme = 2;
pub const fec_scheme_LIQUID_FEC_REP5: fec_scheme = 3;
pub const fec_scheme_LIQUID_FEC_HAMMING74: fec_scheme = 4;
pub const fec_scheme_LIQUID_FEC_HAMMING84: fec_scheme = 5;
pub const fec_scheme_LIQUID_FEC_HAMMING128: fec_scheme = 6;
pub const fec_scheme_LIQUID_FEC_GOLAY2412: fec_scheme = 7;
pub const fec_scheme_LIQUID_FEC_SECDED2216: fec_scheme = 8;
pub const fec_scheme_LIQUID_FEC_SECDED3932: fec_scheme = 9;
pub const fec_scheme_LIQUID_FEC_SECDED7264: fec_scheme = 10;
pub const fec_scheme_LIQUID_FEC_CONV_V27: fec_scheme = 11;
pub const fec_scheme_LIQUID_FEC_CONV_V29: fec_scheme = 12;
pub const fec_scheme_LIQUID_FEC_CONV_V39: fec_scheme = 13;
pub const fec_scheme_LIQUID_FEC_CONV_V615: fec_scheme = 14;
pub const fec_scheme_LIQUID_FEC_CONV_V27P23: fec_scheme = 15;
pub const fec_scheme_LIQUID_FEC_CONV_V27P34: fec_scheme = 16;
pub const fec_scheme_LIQUID_FEC_CONV_V27P45: fec_scheme = 17;
pub const fec_scheme_LIQUID_FEC_CONV_V27P56: fec_scheme = 18;
pub const fec_scheme_LIQUID_FEC_CONV_V27P67: fec_scheme = 19;
pub const fec_scheme_LIQUID_FEC_CONV_V27P78: fec_scheme = 20;
pub const fec_scheme_LIQUID_FEC_CONV_V29P23: fec_scheme = 21;
pub const fec_scheme_LIQUID_FEC_CONV_V29P34: fec_scheme = 22;
pub const fec_scheme_LIQUID_FEC_CONV_V29P45: fec_scheme = 23;
pub const fec_scheme_LIQUID_FEC_CONV_V29P56: fec_scheme = 24;
pub const fec_scheme_LIQUID_FEC_CONV_V29P67: fec_scheme = 25;
pub const fec_scheme_LIQUID_FEC_CONV_V29P78: fec_scheme = 26;
pub const fec_scheme_LIQUID_FEC_RS_M8: fec_scheme = 27;
pub type fec_scheme = ::std::os::raw::c_uint;
extern "C" {
    pub static mut fec_scheme_str: [[*const ::std::os::raw::c_char; 2usize]; 28usize];
}
extern "C" {
    pub fn liquid_print_fec_schemes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_getopt_str2fec(_str: *const ::std::os::raw::c_char) -> fec_scheme;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fec_s {
    _unused: [u8; 0],
}
pub type fec = *mut fec_s;
extern "C" {
    pub fn fec_get_enc_msg_length(
        _scheme: fec_scheme,
        _msg_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fec_get_rate(_scheme: fec_scheme) -> f32;
}
extern "C" {
    pub fn fec_create(_scheme: fec_scheme, _opts: *mut ::std::os::raw::c_void) -> fec;
}
extern "C" {
    pub fn fec_recreate(_q: fec, _scheme: fec_scheme, _opts: *mut ::std::os::raw::c_void) -> fec;
}
extern "C" {
    pub fn fec_copy(_q: fec) -> fec;
}
extern "C" {
    pub fn fec_destroy(_q: fec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fec_print(_q: fec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fec_encode(
        _q: fec,
        _dec_msg_len: ::std::os::raw::c_uint,
        _msg_dec: *mut ::std::os::raw::c_uchar,
        _msg_enc: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fec_decode(
        _q: fec,
        _dec_msg_len: ::std::os::raw::c_uint,
        _msg_enc: *mut ::std::os::raw::c_uchar,
        _msg_dec: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fec_decode_soft(
        _q: fec,
        _dec_msg_len: ::std::os::raw::c_uint,
        _msg_enc: *mut ::std::os::raw::c_uchar,
        _msg_dec: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn packetizer_compute_enc_msg_len(
        _n: ::std::os::raw::c_uint,
        _crc: ::std::os::raw::c_int,
        _fec0: ::std::os::raw::c_int,
        _fec1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn packetizer_compute_dec_msg_len(
        _k: ::std::os::raw::c_uint,
        _crc: ::std::os::raw::c_int,
        _fec0: ::std::os::raw::c_int,
        _fec1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct packetizer_s {
    _unused: [u8; 0],
}
pub type packetizer = *mut packetizer_s;
extern "C" {
    pub fn packetizer_create(
        _dec_msg_len: ::std::os::raw::c_uint,
        _crc: ::std::os::raw::c_int,
        _fec0: ::std::os::raw::c_int,
        _fec1: ::std::os::raw::c_int,
    ) -> packetizer;
}
extern "C" {
    pub fn packetizer_recreate(
        _p: packetizer,
        _dec_msg_len: ::std::os::raw::c_uint,
        _crc: ::std::os::raw::c_int,
        _fec0: ::std::os::raw::c_int,
        _fec1: ::std::os::raw::c_int,
    ) -> packetizer;
}
extern "C" {
    pub fn packetizer_copy(_p: packetizer) -> packetizer;
}
extern "C" {
    pub fn packetizer_destroy(_p: packetizer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn packetizer_print(_p: packetizer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn packetizer_get_dec_msg_len(_p: packetizer) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn packetizer_get_enc_msg_len(_p: packetizer) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn packetizer_get_crc(_p: packetizer) -> crc_scheme;
}
extern "C" {
    pub fn packetizer_get_fec0(_p: packetizer) -> fec_scheme;
}
extern "C" {
    pub fn packetizer_get_fec1(_p: packetizer) -> fec_scheme;
}
extern "C" {
    pub fn packetizer_encode(
        _p: packetizer,
        _msg: *const ::std::os::raw::c_uchar,
        _pkt: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn packetizer_decode(
        _p: packetizer,
        _pkt: *const ::std::os::raw::c_uchar,
        _msg: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn packetizer_decode_soft(
        _p: packetizer,
        _pkt: *const ::std::os::raw::c_uchar,
        _msg: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct interleaver_s {
    _unused: [u8; 0],
}
pub type interleaver = *mut interleaver_s;
extern "C" {
    pub fn interleaver_create(_n: ::std::os::raw::c_uint) -> interleaver;
}
extern "C" {
    pub fn linterleaver_copy(_q: interleaver) -> interleaver;
}
extern "C" {
    pub fn interleaver_destroy(_q: interleaver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn interleaver_print(_q: interleaver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn interleaver_set_depth(
        _q: interleaver,
        _depth: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn interleaver_encode(
        _q: interleaver,
        _msg_dec: *mut ::std::os::raw::c_uchar,
        _msg_enc: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn interleaver_encode_soft(
        _q: interleaver,
        _msg_dec: *mut ::std::os::raw::c_uchar,
        _msg_enc: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn interleaver_decode(
        _q: interleaver,
        _msg_enc: *mut ::std::os::raw::c_uchar,
        _msg_dec: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn interleaver_decode_soft(
        _q: interleaver,
        _msg_enc: *mut ::std::os::raw::c_uchar,
        _msg_dec: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
pub const liquid_fft_type_LIQUID_FFT_UNKNOWN: liquid_fft_type = 0;
pub const liquid_fft_type_LIQUID_FFT_FORWARD: liquid_fft_type = 1;
pub const liquid_fft_type_LIQUID_FFT_BACKWARD: liquid_fft_type = -1;
pub const liquid_fft_type_LIQUID_FFT_REDFT00: liquid_fft_type = 10;
pub const liquid_fft_type_LIQUID_FFT_REDFT10: liquid_fft_type = 11;
pub const liquid_fft_type_LIQUID_FFT_REDFT01: liquid_fft_type = 12;
pub const liquid_fft_type_LIQUID_FFT_REDFT11: liquid_fft_type = 13;
pub const liquid_fft_type_LIQUID_FFT_RODFT00: liquid_fft_type = 20;
pub const liquid_fft_type_LIQUID_FFT_RODFT10: liquid_fft_type = 21;
pub const liquid_fft_type_LIQUID_FFT_RODFT01: liquid_fft_type = 22;
pub const liquid_fft_type_LIQUID_FFT_RODFT11: liquid_fft_type = 23;
pub const liquid_fft_type_LIQUID_FFT_MDCT: liquid_fft_type = 30;
pub const liquid_fft_type_LIQUID_FFT_IMDCT: liquid_fft_type = 31;
pub type liquid_fft_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftplan_s {
    _unused: [u8; 0],
}
pub type fftplan = *mut fftplan_s;
extern "C" {
    pub fn fft_malloc(_n: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fft_free(_x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fft_create_plan(
        _n: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _dir: ::std::os::raw::c_int,
        _flags: ::std::os::raw::c_int,
    ) -> fftplan;
}
extern "C" {
    pub fn fft_create_plan_r2r_1d(
        _n: ::std::os::raw::c_uint,
        _x: *mut f32,
        _y: *mut f32,
        _type: ::std::os::raw::c_int,
        _flags: ::std::os::raw::c_int,
    ) -> fftplan;
}
extern "C" {
    pub fn fft_destroy_plan(_p: fftplan) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fft_print_plan(_p: fftplan) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fft_execute(_p: fftplan) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fft_run(
        _n: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _dir: ::std::os::raw::c_int,
        _flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fft_r2r_1d_run(
        _n: ::std::os::raw::c_uint,
        _x: *mut f32,
        _y: *mut f32,
        _type: ::std::os::raw::c_int,
        _flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fft_shift(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_fftwf_cleanup_wrapper() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spgramcf_s {
    _unused: [u8; 0],
}
pub type spgramcf = *mut spgramcf_s;
extern "C" {
    pub fn spgramcf_create(
        _nfft: ::std::os::raw::c_uint,
        _wtype: ::std::os::raw::c_int,
        _window_len: ::std::os::raw::c_uint,
        _delay: ::std::os::raw::c_uint,
    ) -> spgramcf;
}
extern "C" {
    pub fn spgramcf_create_default(_nfft: ::std::os::raw::c_uint) -> spgramcf;
}
extern "C" {
    pub fn spgramcf_copy(_q: spgramcf) -> spgramcf;
}
extern "C" {
    pub fn spgramcf_destroy(_q: spgramcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_clear(_q: spgramcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_reset(_q: spgramcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_print(_q: spgramcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_set_alpha(_q: spgramcf, _alpha: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_get_alpha(_q: spgramcf) -> f32;
}
extern "C" {
    pub fn spgramcf_set_freq(_q: spgramcf, _freq: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_set_rate(_q: spgramcf, _rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_get_nfft(_q: spgramcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spgramcf_get_window_len(_q: spgramcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spgramcf_get_delay(_q: spgramcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spgramcf_get_wtype(_q: spgramcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_get_num_samples(_q: spgramcf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramcf_get_num_samples_total(_q: spgramcf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramcf_get_num_transforms(_q: spgramcf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramcf_get_num_transforms_total(_q: spgramcf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramcf_push(_q: spgramcf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_write(
        _q: spgramcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_get_psd_mag(_q: spgramcf, _psd: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_get_psd(_q: spgramcf, _psd: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_export_gnuplot(
        _q: spgramcf,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramcf_estimate_psd(
        _nfft: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _psd: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spgramf_s {
    _unused: [u8; 0],
}
pub type spgramf = *mut spgramf_s;
extern "C" {
    pub fn spgramf_create(
        _nfft: ::std::os::raw::c_uint,
        _wtype: ::std::os::raw::c_int,
        _window_len: ::std::os::raw::c_uint,
        _delay: ::std::os::raw::c_uint,
    ) -> spgramf;
}
extern "C" {
    pub fn spgramf_create_default(_nfft: ::std::os::raw::c_uint) -> spgramf;
}
extern "C" {
    pub fn spgramf_copy(_q: spgramf) -> spgramf;
}
extern "C" {
    pub fn spgramf_destroy(_q: spgramf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_clear(_q: spgramf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_reset(_q: spgramf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_print(_q: spgramf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_set_alpha(_q: spgramf, _alpha: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_get_alpha(_q: spgramf) -> f32;
}
extern "C" {
    pub fn spgramf_set_freq(_q: spgramf, _freq: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_set_rate(_q: spgramf, _rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_get_nfft(_q: spgramf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spgramf_get_window_len(_q: spgramf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spgramf_get_delay(_q: spgramf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spgramf_get_wtype(_q: spgramf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_get_num_samples(_q: spgramf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramf_get_num_samples_total(_q: spgramf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramf_get_num_transforms(_q: spgramf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramf_get_num_transforms_total(_q: spgramf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn spgramf_push(_q: spgramf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_write(
        _q: spgramf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_get_psd_mag(_q: spgramf, _psd: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_get_psd(_q: spgramf, _psd: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_export_gnuplot(
        _q: spgramf,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spgramf_estimate_psd(
        _nfft: ::std::os::raw::c_uint,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _psd: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asgramcf_s {
    _unused: [u8; 0],
}
pub type asgramcf = *mut asgramcf_s;
extern "C" {
    pub fn asgramcf_create(_nfft: ::std::os::raw::c_uint) -> asgramcf;
}
extern "C" {
    pub fn asgramcf_copy(_q: asgramcf) -> asgramcf;
}
extern "C" {
    pub fn asgramcf_destroy(_q: asgramcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramcf_reset(_q: asgramcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramcf_set_scale(_q: asgramcf, _ref: f32, _div: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramcf_set_display(
        _q: asgramcf,
        _ascii: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramcf_push(_q: asgramcf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramcf_write(
        _q: asgramcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramcf_execute(
        _q: asgramcf,
        _ascii: *mut ::std::os::raw::c_char,
        _peakval: *mut f32,
        _peakfreq: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramcf_print(_q: asgramcf) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asgramf_s {
    _unused: [u8; 0],
}
pub type asgramf = *mut asgramf_s;
extern "C" {
    pub fn asgramf_create(_nfft: ::std::os::raw::c_uint) -> asgramf;
}
extern "C" {
    pub fn asgramf_copy(_q: asgramf) -> asgramf;
}
extern "C" {
    pub fn asgramf_destroy(_q: asgramf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramf_reset(_q: asgramf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramf_set_scale(_q: asgramf, _ref: f32, _div: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramf_set_display(
        _q: asgramf,
        _ascii: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramf_push(_q: asgramf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramf_write(
        _q: asgramf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramf_execute(
        _q: asgramf,
        _ascii: *mut ::std::os::raw::c_char,
        _peakval: *mut f32,
        _peakfreq: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asgramf_print(_q: asgramf) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spwaterfallcf_s {
    _unused: [u8; 0],
}
pub type spwaterfallcf = *mut spwaterfallcf_s;
extern "C" {
    pub fn spwaterfallcf_create(
        _nfft: ::std::os::raw::c_uint,
        _wtype: ::std::os::raw::c_int,
        _window_len: ::std::os::raw::c_uint,
        _delay: ::std::os::raw::c_uint,
        _time: ::std::os::raw::c_uint,
    ) -> spwaterfallcf;
}
extern "C" {
    pub fn spwaterfallcf_create_default(
        _nfft: ::std::os::raw::c_uint,
        _time: ::std::os::raw::c_uint,
    ) -> spwaterfallcf;
}
extern "C" {
    pub fn spwaterfallcf_copy(_q: spwaterfallcf) -> spwaterfallcf;
}
extern "C" {
    pub fn spwaterfallcf_destroy(_q: spwaterfallcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_clear(_q: spwaterfallcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_reset(_q: spwaterfallcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_print(_q: spwaterfallcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_get_num_samples_total(_q: spwaterfallcf) -> u64;
}
extern "C" {
    pub fn spwaterfallcf_get_num_freq(_q: spwaterfallcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallcf_get_num_time(_q: spwaterfallcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallcf_get_window_len(_q: spwaterfallcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallcf_get_delay(_q: spwaterfallcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallcf_get_wtype(_q: spwaterfallcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_get_psd(_q: spwaterfallcf) -> *const f32;
}
extern "C" {
    pub fn spwaterfallcf_set_freq(_q: spwaterfallcf, _freq: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_set_rate(_q: spwaterfallcf, _rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_set_dims(
        _q: spwaterfallcf,
        _width: ::std::os::raw::c_uint,
        _height: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_set_commands(
        _q: spwaterfallcf,
        _commands: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_push(_q: spwaterfallcf, _x: liquid_float_complex)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_write(
        _q: spwaterfallcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallcf_export(
        _q: spwaterfallcf,
        _base: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spwaterfallf_s {
    _unused: [u8; 0],
}
pub type spwaterfallf = *mut spwaterfallf_s;
extern "C" {
    pub fn spwaterfallf_create(
        _nfft: ::std::os::raw::c_uint,
        _wtype: ::std::os::raw::c_int,
        _window_len: ::std::os::raw::c_uint,
        _delay: ::std::os::raw::c_uint,
        _time: ::std::os::raw::c_uint,
    ) -> spwaterfallf;
}
extern "C" {
    pub fn spwaterfallf_create_default(
        _nfft: ::std::os::raw::c_uint,
        _time: ::std::os::raw::c_uint,
    ) -> spwaterfallf;
}
extern "C" {
    pub fn spwaterfallf_copy(_q: spwaterfallf) -> spwaterfallf;
}
extern "C" {
    pub fn spwaterfallf_destroy(_q: spwaterfallf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_clear(_q: spwaterfallf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_reset(_q: spwaterfallf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_print(_q: spwaterfallf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_get_num_samples_total(_q: spwaterfallf) -> u64;
}
extern "C" {
    pub fn spwaterfallf_get_num_freq(_q: spwaterfallf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallf_get_num_time(_q: spwaterfallf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallf_get_window_len(_q: spwaterfallf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallf_get_delay(_q: spwaterfallf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn spwaterfallf_get_wtype(_q: spwaterfallf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_get_psd(_q: spwaterfallf) -> *const f32;
}
extern "C" {
    pub fn spwaterfallf_set_freq(_q: spwaterfallf, _freq: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_set_rate(_q: spwaterfallf, _rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_set_dims(
        _q: spwaterfallf,
        _width: ::std::os::raw::c_uint,
        _height: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_set_commands(
        _q: spwaterfallf,
        _commands: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_push(_q: spwaterfallf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_write(
        _q: spwaterfallf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spwaterfallf_export(
        _q: spwaterfallf,
        _base: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const liquid_firfilt_type_LIQUID_FIRFILT_UNKNOWN: liquid_firfilt_type = 0;
pub const liquid_firfilt_type_LIQUID_FIRFILT_KAISER: liquid_firfilt_type = 1;
pub const liquid_firfilt_type_LIQUID_FIRFILT_PM: liquid_firfilt_type = 2;
pub const liquid_firfilt_type_LIQUID_FIRFILT_RCOS: liquid_firfilt_type = 3;
pub const liquid_firfilt_type_LIQUID_FIRFILT_FEXP: liquid_firfilt_type = 4;
pub const liquid_firfilt_type_LIQUID_FIRFILT_FSECH: liquid_firfilt_type = 5;
pub const liquid_firfilt_type_LIQUID_FIRFILT_FARCSECH: liquid_firfilt_type = 6;
pub const liquid_firfilt_type_LIQUID_FIRFILT_ARKAISER: liquid_firfilt_type = 7;
pub const liquid_firfilt_type_LIQUID_FIRFILT_RKAISER: liquid_firfilt_type = 8;
pub const liquid_firfilt_type_LIQUID_FIRFILT_RRC: liquid_firfilt_type = 9;
pub const liquid_firfilt_type_LIQUID_FIRFILT_hM3: liquid_firfilt_type = 10;
pub const liquid_firfilt_type_LIQUID_FIRFILT_GMSKTX: liquid_firfilt_type = 11;
pub const liquid_firfilt_type_LIQUID_FIRFILT_GMSKRX: liquid_firfilt_type = 12;
pub const liquid_firfilt_type_LIQUID_FIRFILT_RFEXP: liquid_firfilt_type = 13;
pub const liquid_firfilt_type_LIQUID_FIRFILT_RFSECH: liquid_firfilt_type = 14;
pub const liquid_firfilt_type_LIQUID_FIRFILT_RFARCSECH: liquid_firfilt_type = 15;
pub type liquid_firfilt_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn liquid_firdes_prototype(
        _type: liquid_firfilt_type,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut liquid_firfilt_type_str: [[*const ::std::os::raw::c_char; 2usize]; 16usize];
}
extern "C" {
    pub fn liquid_getopt_str2firfilt(_str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn estimate_req_filter_len(_df: f32, _as: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn estimate_req_filter_As(_df: f32, _n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn estimate_req_filter_df(_as: f32, _n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn kaiser_beta_As(_as: f32) -> f32;
}
pub const liquid_firdespm_btype_LIQUID_FIRDESPM_BANDPASS: liquid_firdespm_btype = 0;
pub const liquid_firdespm_btype_LIQUID_FIRDESPM_DIFFERENTIATOR: liquid_firdespm_btype = 1;
pub const liquid_firdespm_btype_LIQUID_FIRDESPM_HILBERT: liquid_firdespm_btype = 2;
pub type liquid_firdespm_btype = ::std::os::raw::c_uint;
pub const liquid_firdespm_wtype_LIQUID_FIRDESPM_FLATWEIGHT: liquid_firdespm_wtype = 0;
pub const liquid_firdespm_wtype_LIQUID_FIRDESPM_EXPWEIGHT: liquid_firdespm_wtype = 1;
pub const liquid_firdespm_wtype_LIQUID_FIRDESPM_LINWEIGHT: liquid_firdespm_wtype = 2;
pub type liquid_firdespm_wtype = ::std::os::raw::c_uint;
extern "C" {
    pub fn firdespm_run(
        _h_len: ::std::os::raw::c_uint,
        _num_bands: ::std::os::raw::c_uint,
        _bands: *mut f32,
        _des: *mut f32,
        _weights: *mut f32,
        _wtype: *mut liquid_firdespm_wtype,
        _btype: liquid_firdespm_btype,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdespm_lowpass(
        _n: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _mu: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
pub type firdespm_callback = ::std::option::Option<
    unsafe extern "C" fn(
        _frequency: f64,
        _userdata: *mut ::std::os::raw::c_void,
        _desired: *mut f64,
        _weight: *mut f64,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firdespm_s {
    _unused: [u8; 0],
}
pub type firdespm = *mut firdespm_s;
extern "C" {
    pub fn firdespm_create(
        _h_len: ::std::os::raw::c_uint,
        _num_bands: ::std::os::raw::c_uint,
        _bands: *mut f32,
        _des: *mut f32,
        _weights: *mut f32,
        _wtype: *mut liquid_firdespm_wtype,
        _btype: liquid_firdespm_btype,
    ) -> firdespm;
}
extern "C" {
    pub fn firdespm_create_callback(
        _h_len: ::std::os::raw::c_uint,
        _num_bands: ::std::os::raw::c_uint,
        _bands: *mut f32,
        _btype: liquid_firdespm_btype,
        _callback: firdespm_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> firdespm;
}
extern "C" {
    pub fn firdespm_copy(_q: firdespm) -> firdespm;
}
extern "C" {
    pub fn firdespm_destroy(_q: firdespm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdespm_print(_q: firdespm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdespm_execute(_q: firdespm, _h: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdespm_halfband_ft(
        _m: ::std::os::raw::c_uint,
        _ft: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdespm_halfband_as(
        _m: ::std::os::raw::c_uint,
        _as: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_windowf(
        _wtype: ::std::os::raw::c_int,
        _n: ::std::os::raw::c_uint,
        _fc: f32,
        _arg: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_kaiser(
        _n: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _mu: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_notch(
        _m: ::std::os::raw::c_uint,
        _f0: f32,
        _as: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_doppler(
        _n: ::std::os::raw::c_uint,
        _fd: f32,
        _K: f32,
        _theta: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_rcos(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_rrcos(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_rkaiser(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_arkaiser(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_hM3(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_gmsktx(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_gmskrx(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_fexp(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_rfexp(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_fsech(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_rfsech(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_farcsech(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_firdes_rfarcsech(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fir_group_delay(_h: *mut f32, _n: ::std::os::raw::c_uint, _fc: f32) -> f32;
}
extern "C" {
    pub fn iir_group_delay(
        _b: *mut f32,
        _nb: ::std::os::raw::c_uint,
        _a: *mut f32,
        _na: ::std::os::raw::c_uint,
        _fc: f32,
    ) -> f32;
}
extern "C" {
    pub fn liquid_filter_autocorr(
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
        _lag: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn liquid_filter_crosscorr(
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
        _g: *mut f32,
        _g_len: ::std::os::raw::c_uint,
        _lag: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn liquid_filter_isi(
        _h: *mut f32,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _rms: *mut f32,
        _max: *mut f32,
    );
}
extern "C" {
    pub fn liquid_filter_energy(
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
        _fc: f32,
        _nfft: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn liquid_freqrespf(
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_freqrespcf(
        _h: *mut liquid_float_complex,
        _h_len: ::std::os::raw::c_uint,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
pub const liquid_iirdes_filtertype_LIQUID_IIRDES_BUTTER: liquid_iirdes_filtertype = 0;
pub const liquid_iirdes_filtertype_LIQUID_IIRDES_CHEBY1: liquid_iirdes_filtertype = 1;
pub const liquid_iirdes_filtertype_LIQUID_IIRDES_CHEBY2: liquid_iirdes_filtertype = 2;
pub const liquid_iirdes_filtertype_LIQUID_IIRDES_ELLIP: liquid_iirdes_filtertype = 3;
pub const liquid_iirdes_filtertype_LIQUID_IIRDES_BESSEL: liquid_iirdes_filtertype = 4;
pub type liquid_iirdes_filtertype = ::std::os::raw::c_uint;
pub const liquid_iirdes_bandtype_LIQUID_IIRDES_LOWPASS: liquid_iirdes_bandtype = 0;
pub const liquid_iirdes_bandtype_LIQUID_IIRDES_HIGHPASS: liquid_iirdes_bandtype = 1;
pub const liquid_iirdes_bandtype_LIQUID_IIRDES_BANDPASS: liquid_iirdes_bandtype = 2;
pub const liquid_iirdes_bandtype_LIQUID_IIRDES_BANDSTOP: liquid_iirdes_bandtype = 3;
pub type liquid_iirdes_bandtype = ::std::os::raw::c_uint;
pub const liquid_iirdes_format_LIQUID_IIRDES_SOS: liquid_iirdes_format = 0;
pub const liquid_iirdes_format_LIQUID_IIRDES_TF: liquid_iirdes_format = 1;
pub type liquid_iirdes_format = ::std::os::raw::c_uint;
extern "C" {
    pub fn liquid_iirdes(
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _n: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
        _b: *mut f32,
        _a: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn butter_azpkf(
        _n: ::std::os::raw::c_uint,
        _za: *mut liquid_float_complex,
        _pa: *mut liquid_float_complex,
        _ka: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cheby1_azpkf(
        _n: ::std::os::raw::c_uint,
        _ep: f32,
        _z: *mut liquid_float_complex,
        _p: *mut liquid_float_complex,
        _k: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cheby2_azpkf(
        _n: ::std::os::raw::c_uint,
        _es: f32,
        _z: *mut liquid_float_complex,
        _p: *mut liquid_float_complex,
        _k: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ellip_azpkf(
        _n: ::std::os::raw::c_uint,
        _ep: f32,
        _es: f32,
        _z: *mut liquid_float_complex,
        _p: *mut liquid_float_complex,
        _k: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bessel_azpkf(
        _n: ::std::os::raw::c_uint,
        _z: *mut liquid_float_complex,
        _p: *mut liquid_float_complex,
        _k: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdes_freqprewarp(_btype: liquid_iirdes_bandtype, _fc: f32, _f0: f32) -> f32;
}
extern "C" {
    pub fn bilinear_zpkf(
        _za: *mut liquid_float_complex,
        _nza: ::std::os::raw::c_uint,
        _pa: *mut liquid_float_complex,
        _npa: ::std::os::raw::c_uint,
        _ka: liquid_float_complex,
        _m: f32,
        _zd: *mut liquid_float_complex,
        _pd: *mut liquid_float_complex,
        _kd: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bilinear_nd(
        _b: *mut liquid_float_complex,
        _b_order: ::std::os::raw::c_uint,
        _a: *mut liquid_float_complex,
        _a_order: ::std::os::raw::c_uint,
        _m: f32,
        _bd: *mut liquid_float_complex,
        _ad: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdes_dzpk_lp2hp(
        _zd: *mut liquid_float_complex,
        _pd: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _zdt: *mut liquid_float_complex,
        _pdt: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdes_dzpk_lp2bp(
        _zd: *mut liquid_float_complex,
        _pd: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _f0: f32,
        _zdt: *mut liquid_float_complex,
        _pdt: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdes_dzpk2tff(
        _zd: *mut liquid_float_complex,
        _pd: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _kd: liquid_float_complex,
        _b: *mut f32,
        _a: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdes_dzpk2sosf(
        _zd: *mut liquid_float_complex,
        _pd: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _kd: liquid_float_complex,
        _b: *mut f32,
        _a: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdes_pll_active_lag(_w: f32, _zeta: f32, _K: f32, _b: *mut f32, _a: *mut f32);
}
extern "C" {
    pub fn iirdes_pll_active_PI(_w: f32, _zeta: f32, _K: f32, _b: *mut f32, _a: *mut f32);
}
extern "C" {
    pub fn iirdes_isstable(
        _b: *mut f32,
        _a: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_lpc(
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _p: ::std::os::raw::c_uint,
        _a: *mut f32,
        _g: *mut f32,
    );
}
extern "C" {
    pub fn liquid_levinson(_r: *mut f32, _p: ::std::os::raw::c_uint, _a: *mut f32, _e: *mut f32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct autocorr_cccf_s {
    _unused: [u8; 0],
}
pub type autocorr_cccf = *mut autocorr_cccf_s;
extern "C" {
    pub fn autocorr_cccf_create(
        _window_size: ::std::os::raw::c_uint,
        _delay: ::std::os::raw::c_uint,
    ) -> autocorr_cccf;
}
extern "C" {
    pub fn autocorr_cccf_destroy(_q: autocorr_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_cccf_reset(_q: autocorr_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_cccf_print(_q: autocorr_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_cccf_push(_q: autocorr_cccf, _x: liquid_float_complex)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_cccf_write(
        _q: autocorr_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_cccf_execute(
        _q: autocorr_cccf,
        _rxx: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_cccf_execute_block(
        _q: autocorr_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _rxx: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_cccf_get_energy(_q: autocorr_cccf) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct autocorr_rrrf_s {
    _unused: [u8; 0],
}
pub type autocorr_rrrf = *mut autocorr_rrrf_s;
extern "C" {
    pub fn autocorr_rrrf_create(
        _window_size: ::std::os::raw::c_uint,
        _delay: ::std::os::raw::c_uint,
    ) -> autocorr_rrrf;
}
extern "C" {
    pub fn autocorr_rrrf_destroy(_q: autocorr_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_rrrf_reset(_q: autocorr_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_rrrf_print(_q: autocorr_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_rrrf_push(_q: autocorr_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_rrrf_write(
        _q: autocorr_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_rrrf_execute(_q: autocorr_rrrf, _rxx: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_rrrf_execute_block(
        _q: autocorr_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _rxx: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr_rrrf_get_energy(_q: autocorr_rrrf) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firfilt_rrrf_s {
    _unused: [u8; 0],
}
pub type firfilt_rrrf = *mut firfilt_rrrf_s;
extern "C" {
    pub fn firfilt_rrrf_create(_h: *mut f32, _n: ::std::os::raw::c_uint) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_create_kaiser(
        _n: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _mu: f32,
    ) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _mu: f32,
    ) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_create_firdespm(
        _h_len: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_create_rect(_n: ::std::os::raw::c_uint) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_create_dc_blocker(_m: ::std::os::raw::c_uint, _as: f32) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_create_notch(
        _m: ::std::os::raw::c_uint,
        _as: f32,
        _f0: f32,
    ) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_recreate(
        _q: firfilt_rrrf,
        _h: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_copy(_q: firfilt_rrrf) -> firfilt_rrrf;
}
extern "C" {
    pub fn firfilt_rrrf_destroy(_q: firfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_reset(_q: firfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_print(_q: firfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_set_scale(_q: firfilt_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_get_scale(_q: firfilt_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_push(_q: firfilt_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_write(
        _q: firfilt_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_execute(_q: firfilt_rrrf, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_execute_one(
        _q: firfilt_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_execute_block(
        _q: firfilt_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_get_length(_q: firfilt_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firfilt_rrrf_get_coefficients(_q: firfilt_rrrf) -> *const f32;
}
extern "C" {
    pub fn firfilt_rrrf_copy_coefficients(_q: firfilt_rrrf, _h: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_freqresponse(
        _q: firfilt_rrrf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_rrrf_groupdelay(_q: firfilt_rrrf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firfilt_crcf_s {
    _unused: [u8; 0],
}
pub type firfilt_crcf = *mut firfilt_crcf_s;
extern "C" {
    pub fn firfilt_crcf_create(_h: *mut f32, _n: ::std::os::raw::c_uint) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_create_kaiser(
        _n: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _mu: f32,
    ) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _mu: f32,
    ) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_create_firdespm(
        _h_len: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_create_rect(_n: ::std::os::raw::c_uint) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_create_dc_blocker(_m: ::std::os::raw::c_uint, _as: f32) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_create_notch(
        _m: ::std::os::raw::c_uint,
        _as: f32,
        _f0: f32,
    ) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_recreate(
        _q: firfilt_crcf,
        _h: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_copy(_q: firfilt_crcf) -> firfilt_crcf;
}
extern "C" {
    pub fn firfilt_crcf_destroy(_q: firfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_reset(_q: firfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_print(_q: firfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_set_scale(_q: firfilt_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_get_scale(_q: firfilt_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_push(_q: firfilt_crcf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_write(
        _q: firfilt_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_execute(
        _q: firfilt_crcf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_execute_one(
        _q: firfilt_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_execute_block(
        _q: firfilt_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_get_length(_q: firfilt_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firfilt_crcf_get_coefficients(_q: firfilt_crcf) -> *const f32;
}
extern "C" {
    pub fn firfilt_crcf_copy_coefficients(_q: firfilt_crcf, _h: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_freqresponse(
        _q: firfilt_crcf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_crcf_groupdelay(_q: firfilt_crcf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firfilt_cccf_s {
    _unused: [u8; 0],
}
pub type firfilt_cccf = *mut firfilt_cccf_s;
extern "C" {
    pub fn firfilt_cccf_create(
        _h: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_create_kaiser(
        _n: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _mu: f32,
    ) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _mu: f32,
    ) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_create_firdespm(
        _h_len: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_create_rect(_n: ::std::os::raw::c_uint) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_create_dc_blocker(_m: ::std::os::raw::c_uint, _as: f32) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_create_notch(
        _m: ::std::os::raw::c_uint,
        _as: f32,
        _f0: f32,
    ) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_recreate(
        _q: firfilt_cccf,
        _h: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_copy(_q: firfilt_cccf) -> firfilt_cccf;
}
extern "C" {
    pub fn firfilt_cccf_destroy(_q: firfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_reset(_q: firfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_print(_q: firfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_set_scale(
        _q: firfilt_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_get_scale(
        _q: firfilt_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_push(_q: firfilt_cccf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_write(
        _q: firfilt_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_execute(
        _q: firfilt_cccf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_execute_one(
        _q: firfilt_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_execute_block(
        _q: firfilt_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_get_length(_q: firfilt_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firfilt_cccf_get_coefficients(_q: firfilt_cccf) -> *const liquid_float_complex;
}
extern "C" {
    pub fn firfilt_cccf_copy_coefficients(
        _q: firfilt_cccf,
        _h: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_freqresponse(
        _q: firfilt_cccf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfilt_cccf_groupdelay(_q: firfilt_cccf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fdelay_rrrf_s {
    _unused: [u8; 0],
}
pub type fdelay_rrrf = *mut fdelay_rrrf_s;
extern "C" {
    pub fn fdelay_rrrf_create(
        _nmax: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _npfb: ::std::os::raw::c_uint,
    ) -> fdelay_rrrf;
}
extern "C" {
    pub fn fdelay_rrrf_create_default(_nmax: ::std::os::raw::c_uint) -> fdelay_rrrf;
}
extern "C" {
    pub fn fdelay_rrrf_destroy(_q: fdelay_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_reset(_q: fdelay_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_print(_q: fdelay_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_get_delay(_q: fdelay_rrrf) -> f32;
}
extern "C" {
    pub fn fdelay_rrrf_set_delay(_q: fdelay_rrrf, _delay: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_adjust_delay(_q: fdelay_rrrf, _delta: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_get_nmax(_q: fdelay_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fdelay_rrrf_get_m(_q: fdelay_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fdelay_rrrf_get_npfb(_q: fdelay_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fdelay_rrrf_push(_q: fdelay_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_write(
        _q: fdelay_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_execute(_q: fdelay_rrrf, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_rrrf_execute_block(
        _q: fdelay_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fdelay_crcf_s {
    _unused: [u8; 0],
}
pub type fdelay_crcf = *mut fdelay_crcf_s;
extern "C" {
    pub fn fdelay_crcf_create(
        _nmax: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _npfb: ::std::os::raw::c_uint,
    ) -> fdelay_crcf;
}
extern "C" {
    pub fn fdelay_crcf_create_default(_nmax: ::std::os::raw::c_uint) -> fdelay_crcf;
}
extern "C" {
    pub fn fdelay_crcf_destroy(_q: fdelay_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_reset(_q: fdelay_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_print(_q: fdelay_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_get_delay(_q: fdelay_crcf) -> f32;
}
extern "C" {
    pub fn fdelay_crcf_set_delay(_q: fdelay_crcf, _delay: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_adjust_delay(_q: fdelay_crcf, _delta: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_get_nmax(_q: fdelay_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fdelay_crcf_get_m(_q: fdelay_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fdelay_crcf_get_npfb(_q: fdelay_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fdelay_crcf_push(_q: fdelay_crcf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_write(
        _q: fdelay_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_execute(
        _q: fdelay_crcf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdelay_crcf_execute_block(
        _q: fdelay_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firhilbf_s {
    _unused: [u8; 0],
}
pub type firhilbf = *mut firhilbf_s;
extern "C" {
    pub fn firhilbf_create(_m: ::std::os::raw::c_uint, _as: f32) -> firhilbf;
}
extern "C" {
    pub fn firhilbf_copy(_q: firhilbf) -> firhilbf;
}
extern "C" {
    pub fn firhilbf_destroy(_q: firhilbf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_print(_q: firhilbf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_reset(_q: firhilbf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_r2c_execute(
        _q: firhilbf,
        _x: f32,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_c2r_execute(
        _q: firhilbf,
        _x: liquid_float_complex,
        _y0: *mut f32,
        _y1: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_decim_execute(
        _q: firhilbf,
        _x: *mut f32,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_decim_execute_block(
        _q: firhilbf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_interp_execute(
        _q: firhilbf,
        _x: liquid_float_complex,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firhilbf_interp_execute_block(
        _q: firhilbf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirhilbf_s {
    _unused: [u8; 0],
}
pub type iirhilbf = *mut iirhilbf_s;
extern "C" {
    pub fn iirhilbf_create(
        _ftype: liquid_iirdes_filtertype,
        _n: ::std::os::raw::c_uint,
        _ap: f32,
        _as: f32,
    ) -> iirhilbf;
}
extern "C" {
    pub fn iirhilbf_copy(_q: iirhilbf) -> iirhilbf;
}
extern "C" {
    pub fn iirhilbf_create_default(_n: ::std::os::raw::c_uint) -> iirhilbf;
}
extern "C" {
    pub fn iirhilbf_destroy(_q: iirhilbf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_print(_q: iirhilbf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_reset(_q: iirhilbf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_r2c_execute(
        _q: iirhilbf,
        _x: f32,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_r2c_execute_block(
        _q: iirhilbf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_c2r_execute(
        _q: iirhilbf,
        _x: liquid_float_complex,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_c2r_execute_block(
        _q: iirhilbf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_decim_execute(
        _q: iirhilbf,
        _x: *mut f32,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_decim_execute_block(
        _q: iirhilbf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_interp_execute(
        _q: iirhilbf,
        _x: liquid_float_complex,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirhilbf_interp_execute_block(
        _q: iirhilbf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftfilt_rrrf_s {
    _unused: [u8; 0],
}
pub type fftfilt_rrrf = *mut fftfilt_rrrf_s;
extern "C" {
    pub fn fftfilt_rrrf_create(
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> fftfilt_rrrf;
}
extern "C" {
    pub fn fftfilt_rrrf_copy(_q: fftfilt_rrrf) -> fftfilt_rrrf;
}
extern "C" {
    pub fn fftfilt_rrrf_destroy(_q: fftfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_rrrf_reset(_q: fftfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_rrrf_print(_q: fftfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_rrrf_set_scale(_q: fftfilt_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_rrrf_get_scale(_q: fftfilt_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_rrrf_execute(
        _q: fftfilt_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_rrrf_get_length(_q: fftfilt_rrrf) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftfilt_crcf_s {
    _unused: [u8; 0],
}
pub type fftfilt_crcf = *mut fftfilt_crcf_s;
extern "C" {
    pub fn fftfilt_crcf_create(
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> fftfilt_crcf;
}
extern "C" {
    pub fn fftfilt_crcf_copy(_q: fftfilt_crcf) -> fftfilt_crcf;
}
extern "C" {
    pub fn fftfilt_crcf_destroy(_q: fftfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_crcf_reset(_q: fftfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_crcf_print(_q: fftfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_crcf_set_scale(_q: fftfilt_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_crcf_get_scale(_q: fftfilt_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_crcf_execute(
        _q: fftfilt_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_crcf_get_length(_q: fftfilt_crcf) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftfilt_cccf_s {
    _unused: [u8; 0],
}
pub type fftfilt_cccf = *mut fftfilt_cccf_s;
extern "C" {
    pub fn fftfilt_cccf_create(
        _h: *mut liquid_float_complex,
        _h_len: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> fftfilt_cccf;
}
extern "C" {
    pub fn fftfilt_cccf_copy(_q: fftfilt_cccf) -> fftfilt_cccf;
}
extern "C" {
    pub fn fftfilt_cccf_destroy(_q: fftfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_cccf_reset(_q: fftfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_cccf_print(_q: fftfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_cccf_set_scale(
        _q: fftfilt_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_cccf_get_scale(
        _q: fftfilt_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_cccf_execute(
        _q: fftfilt_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftfilt_cccf_get_length(_q: fftfilt_cccf) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirfilt_rrrf_s {
    _unused: [u8; 0],
}
pub type iirfilt_rrrf = *mut iirfilt_rrrf_s;
extern "C" {
    pub fn iirfilt_rrrf_create(
        _b: *mut f32,
        _nb: ::std::os::raw::c_uint,
        _a: *mut f32,
        _na: ::std::os::raw::c_uint,
    ) -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_create_sos(
        _b: *mut f32,
        _a: *mut f32,
        _nsos: ::std::os::raw::c_uint,
    ) -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_create_prototype(
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_create_lowpass(_order: ::std::os::raw::c_uint, _fc: f32) -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_create_integrator() -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_create_differentiator() -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_create_dc_blocker(_alpha: f32) -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_create_pll(_w: f32, _zeta: f32, _K: f32) -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_copy(_q: iirfilt_rrrf) -> iirfilt_rrrf;
}
extern "C" {
    pub fn iirfilt_rrrf_destroy(_q: iirfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_print(_q: iirfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_reset(_q: iirfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_set_scale(_q: iirfilt_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_get_scale(_q: iirfilt_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_execute(_q: iirfilt_rrrf, _x: f32, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_execute_block(
        _q: iirfilt_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_get_length(_q: iirfilt_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn iirfilt_rrrf_freqresponse(
        _q: iirfilt_rrrf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_rrrf_get_psd(_q: iirfilt_rrrf, _fc: f32) -> f32;
}
extern "C" {
    pub fn iirfilt_rrrf_groupdelay(_q: iirfilt_rrrf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirfilt_crcf_s {
    _unused: [u8; 0],
}
pub type iirfilt_crcf = *mut iirfilt_crcf_s;
extern "C" {
    pub fn iirfilt_crcf_create(
        _b: *mut f32,
        _nb: ::std::os::raw::c_uint,
        _a: *mut f32,
        _na: ::std::os::raw::c_uint,
    ) -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_create_sos(
        _b: *mut f32,
        _a: *mut f32,
        _nsos: ::std::os::raw::c_uint,
    ) -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_create_prototype(
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_create_lowpass(_order: ::std::os::raw::c_uint, _fc: f32) -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_create_integrator() -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_create_differentiator() -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_create_dc_blocker(_alpha: f32) -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_create_pll(_w: f32, _zeta: f32, _K: f32) -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_copy(_q: iirfilt_crcf) -> iirfilt_crcf;
}
extern "C" {
    pub fn iirfilt_crcf_destroy(_q: iirfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_print(_q: iirfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_reset(_q: iirfilt_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_set_scale(_q: iirfilt_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_get_scale(_q: iirfilt_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_execute(
        _q: iirfilt_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_execute_block(
        _q: iirfilt_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_get_length(_q: iirfilt_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn iirfilt_crcf_freqresponse(
        _q: iirfilt_crcf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_crcf_get_psd(_q: iirfilt_crcf, _fc: f32) -> f32;
}
extern "C" {
    pub fn iirfilt_crcf_groupdelay(_q: iirfilt_crcf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirfilt_cccf_s {
    _unused: [u8; 0],
}
pub type iirfilt_cccf = *mut iirfilt_cccf_s;
extern "C" {
    pub fn iirfilt_cccf_create(
        _b: *mut liquid_float_complex,
        _nb: ::std::os::raw::c_uint,
        _a: *mut liquid_float_complex,
        _na: ::std::os::raw::c_uint,
    ) -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_create_sos(
        _b: *mut liquid_float_complex,
        _a: *mut liquid_float_complex,
        _nsos: ::std::os::raw::c_uint,
    ) -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_create_prototype(
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_create_lowpass(_order: ::std::os::raw::c_uint, _fc: f32) -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_create_integrator() -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_create_differentiator() -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_create_dc_blocker(_alpha: f32) -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_create_pll(_w: f32, _zeta: f32, _K: f32) -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_copy(_q: iirfilt_cccf) -> iirfilt_cccf;
}
extern "C" {
    pub fn iirfilt_cccf_destroy(_q: iirfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_print(_q: iirfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_reset(_q: iirfilt_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_set_scale(
        _q: iirfilt_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_get_scale(
        _q: iirfilt_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_execute(
        _q: iirfilt_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_execute_block(
        _q: iirfilt_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_get_length(_q: iirfilt_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn iirfilt_cccf_freqresponse(
        _q: iirfilt_cccf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfilt_cccf_get_psd(_q: iirfilt_cccf, _fc: f32) -> f32;
}
extern "C" {
    pub fn iirfilt_cccf_groupdelay(_q: iirfilt_cccf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirfiltsos_rrrf_s {
    _unused: [u8; 0],
}
pub type iirfiltsos_rrrf = *mut iirfiltsos_rrrf_s;
extern "C" {
    pub fn iirfiltsos_rrrf_create(_b: *mut f32, _a: *mut f32) -> iirfiltsos_rrrf;
}
extern "C" {
    pub fn iirfiltsos_rrrf_copy(_q: iirfiltsos_rrrf) -> iirfiltsos_rrrf;
}
extern "C" {
    pub fn iirfiltsos_rrrf_set_coefficients(
        _q: iirfiltsos_rrrf,
        _b: *mut f32,
        _a: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_rrrf_destroy(_q: iirfiltsos_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_rrrf_print(_q: iirfiltsos_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_rrrf_reset(_q: iirfiltsos_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_rrrf_execute(
        _q: iirfiltsos_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_rrrf_execute_df1(
        _q: iirfiltsos_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_rrrf_execute_df2(
        _q: iirfiltsos_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_rrrf_groupdelay(_q: iirfiltsos_rrrf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirfiltsos_crcf_s {
    _unused: [u8; 0],
}
pub type iirfiltsos_crcf = *mut iirfiltsos_crcf_s;
extern "C" {
    pub fn iirfiltsos_crcf_create(_b: *mut f32, _a: *mut f32) -> iirfiltsos_crcf;
}
extern "C" {
    pub fn iirfiltsos_crcf_copy(_q: iirfiltsos_crcf) -> iirfiltsos_crcf;
}
extern "C" {
    pub fn iirfiltsos_crcf_set_coefficients(
        _q: iirfiltsos_crcf,
        _b: *mut f32,
        _a: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_crcf_destroy(_q: iirfiltsos_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_crcf_print(_q: iirfiltsos_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_crcf_reset(_q: iirfiltsos_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_crcf_execute(
        _q: iirfiltsos_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_crcf_execute_df1(
        _q: iirfiltsos_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_crcf_execute_df2(
        _q: iirfiltsos_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_crcf_groupdelay(_q: iirfiltsos_crcf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirfiltsos_cccf_s {
    _unused: [u8; 0],
}
pub type iirfiltsos_cccf = *mut iirfiltsos_cccf_s;
extern "C" {
    pub fn iirfiltsos_cccf_create(
        _b: *mut liquid_float_complex,
        _a: *mut liquid_float_complex,
    ) -> iirfiltsos_cccf;
}
extern "C" {
    pub fn iirfiltsos_cccf_copy(_q: iirfiltsos_cccf) -> iirfiltsos_cccf;
}
extern "C" {
    pub fn iirfiltsos_cccf_set_coefficients(
        _q: iirfiltsos_cccf,
        _b: *mut liquid_float_complex,
        _a: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_cccf_destroy(_q: iirfiltsos_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_cccf_print(_q: iirfiltsos_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_cccf_reset(_q: iirfiltsos_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_cccf_execute(
        _q: iirfiltsos_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_cccf_execute_df1(
        _q: iirfiltsos_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_cccf_execute_df2(
        _q: iirfiltsos_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirfiltsos_cccf_groupdelay(_q: iirfiltsos_cccf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firpfb_rrrf_s {
    _unused: [u8; 0],
}
pub type firpfb_rrrf = *mut firpfb_rrrf_s;
extern "C" {
    pub fn firpfb_rrrf_create(
        _num_filters: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firpfb_rrrf;
}
extern "C" {
    pub fn firpfb_rrrf_create_default(
        _num_filters: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
    ) -> firpfb_rrrf;
}
extern "C" {
    pub fn firpfb_rrrf_create_kaiser(
        _num_filters: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firpfb_rrrf;
}
extern "C" {
    pub fn firpfb_rrrf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _num_filters: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> firpfb_rrrf;
}
extern "C" {
    pub fn firpfb_rrrf_create_drnyquist(
        _type: ::std::os::raw::c_int,
        _num_filters: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> firpfb_rrrf;
}
extern "C" {
    pub fn firpfb_rrrf_recreate(
        _q: firpfb_rrrf,
        _num_filters: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firpfb_rrrf;
}
extern "C" {
    pub fn firpfb_rrrf_copy(_q: firpfb_rrrf) -> firpfb_rrrf;
}
extern "C" {
    pub fn firpfb_rrrf_destroy(_q: firpfb_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_print(_q: firpfb_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_set_scale(_q: firpfb_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_get_scale(_q: firpfb_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_reset(_q: firpfb_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_push(_q: firpfb_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_write(
        _q: firpfb_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_execute(
        _q: firpfb_rrrf,
        _i: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_rrrf_execute_block(
        _q: firpfb_rrrf,
        _i: ::std::os::raw::c_uint,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firpfb_crcf_s {
    _unused: [u8; 0],
}
pub type firpfb_crcf = *mut firpfb_crcf_s;
extern "C" {
    pub fn firpfb_crcf_create(
        _num_filters: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firpfb_crcf;
}
extern "C" {
    pub fn firpfb_crcf_create_default(
        _num_filters: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
    ) -> firpfb_crcf;
}
extern "C" {
    pub fn firpfb_crcf_create_kaiser(
        _num_filters: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firpfb_crcf;
}
extern "C" {
    pub fn firpfb_crcf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _num_filters: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> firpfb_crcf;
}
extern "C" {
    pub fn firpfb_crcf_create_drnyquist(
        _type: ::std::os::raw::c_int,
        _num_filters: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> firpfb_crcf;
}
extern "C" {
    pub fn firpfb_crcf_recreate(
        _q: firpfb_crcf,
        _num_filters: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firpfb_crcf;
}
extern "C" {
    pub fn firpfb_crcf_copy(_q: firpfb_crcf) -> firpfb_crcf;
}
extern "C" {
    pub fn firpfb_crcf_destroy(_q: firpfb_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_print(_q: firpfb_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_set_scale(_q: firpfb_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_get_scale(_q: firpfb_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_reset(_q: firpfb_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_push(_q: firpfb_crcf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_write(
        _q: firpfb_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_execute(
        _q: firpfb_crcf,
        _i: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_crcf_execute_block(
        _q: firpfb_crcf,
        _i: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firpfb_cccf_s {
    _unused: [u8; 0],
}
pub type firpfb_cccf = *mut firpfb_cccf_s;
extern "C" {
    pub fn firpfb_cccf_create(
        _num_filters: ::std::os::raw::c_uint,
        _h: *mut liquid_float_complex,
        _h_len: ::std::os::raw::c_uint,
    ) -> firpfb_cccf;
}
extern "C" {
    pub fn firpfb_cccf_create_default(
        _num_filters: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
    ) -> firpfb_cccf;
}
extern "C" {
    pub fn firpfb_cccf_create_kaiser(
        _num_filters: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firpfb_cccf;
}
extern "C" {
    pub fn firpfb_cccf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _num_filters: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> firpfb_cccf;
}
extern "C" {
    pub fn firpfb_cccf_create_drnyquist(
        _type: ::std::os::raw::c_int,
        _num_filters: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> firpfb_cccf;
}
extern "C" {
    pub fn firpfb_cccf_recreate(
        _q: firpfb_cccf,
        _num_filters: ::std::os::raw::c_uint,
        _h: *mut liquid_float_complex,
        _h_len: ::std::os::raw::c_uint,
    ) -> firpfb_cccf;
}
extern "C" {
    pub fn firpfb_cccf_copy(_q: firpfb_cccf) -> firpfb_cccf;
}
extern "C" {
    pub fn firpfb_cccf_destroy(_q: firpfb_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_print(_q: firpfb_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_set_scale(
        _q: firpfb_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_get_scale(
        _q: firpfb_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_reset(_q: firpfb_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_push(_q: firpfb_cccf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_write(
        _q: firpfb_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_execute(
        _q: firpfb_cccf,
        _i: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfb_cccf_execute_block(
        _q: firpfb_cccf,
        _i: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firinterp_rrrf_s {
    _unused: [u8; 0],
}
pub type firinterp_rrrf = *mut firinterp_rrrf_s;
extern "C" {
    pub fn firinterp_rrrf_create(
        _interp: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firinterp_rrrf;
}
extern "C" {
    pub fn firinterp_rrrf_create_kaiser(
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> firinterp_rrrf;
}
extern "C" {
    pub fn firinterp_rrrf_create_prototype(
        _type: ::std::os::raw::c_int,
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> firinterp_rrrf;
}
extern "C" {
    pub fn firinterp_rrrf_create_linear(_interp: ::std::os::raw::c_uint) -> firinterp_rrrf;
}
extern "C" {
    pub fn firinterp_rrrf_create_window(
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
    ) -> firinterp_rrrf;
}
extern "C" {
    pub fn firinterp_rrrf_copy(_q: firinterp_rrrf) -> firinterp_rrrf;
}
extern "C" {
    pub fn firinterp_rrrf_destroy(_q: firinterp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_rrrf_print(_q: firinterp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_rrrf_reset(_q: firinterp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_rrrf_get_interp_rate(_q: firinterp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firinterp_rrrf_get_sub_len(_q: firinterp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firinterp_rrrf_set_scale(_q: firinterp_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_rrrf_get_scale(_q: firinterp_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_rrrf_execute(
        _q: firinterp_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_rrrf_execute_block(
        _q: firinterp_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_rrrf_flush(_q: firinterp_rrrf, _y: *mut f32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firinterp_crcf_s {
    _unused: [u8; 0],
}
pub type firinterp_crcf = *mut firinterp_crcf_s;
extern "C" {
    pub fn firinterp_crcf_create(
        _interp: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firinterp_crcf;
}
extern "C" {
    pub fn firinterp_crcf_create_kaiser(
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> firinterp_crcf;
}
extern "C" {
    pub fn firinterp_crcf_create_prototype(
        _type: ::std::os::raw::c_int,
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> firinterp_crcf;
}
extern "C" {
    pub fn firinterp_crcf_create_linear(_interp: ::std::os::raw::c_uint) -> firinterp_crcf;
}
extern "C" {
    pub fn firinterp_crcf_create_window(
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
    ) -> firinterp_crcf;
}
extern "C" {
    pub fn firinterp_crcf_copy(_q: firinterp_crcf) -> firinterp_crcf;
}
extern "C" {
    pub fn firinterp_crcf_destroy(_q: firinterp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_crcf_print(_q: firinterp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_crcf_reset(_q: firinterp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_crcf_get_interp_rate(_q: firinterp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firinterp_crcf_get_sub_len(_q: firinterp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firinterp_crcf_set_scale(_q: firinterp_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_crcf_get_scale(_q: firinterp_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_crcf_execute(
        _q: firinterp_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_crcf_execute_block(
        _q: firinterp_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_crcf_flush(
        _q: firinterp_crcf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firinterp_cccf_s {
    _unused: [u8; 0],
}
pub type firinterp_cccf = *mut firinterp_cccf_s;
extern "C" {
    pub fn firinterp_cccf_create(
        _interp: ::std::os::raw::c_uint,
        _h: *mut liquid_float_complex,
        _h_len: ::std::os::raw::c_uint,
    ) -> firinterp_cccf;
}
extern "C" {
    pub fn firinterp_cccf_create_kaiser(
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> firinterp_cccf;
}
extern "C" {
    pub fn firinterp_cccf_create_prototype(
        _type: ::std::os::raw::c_int,
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> firinterp_cccf;
}
extern "C" {
    pub fn firinterp_cccf_create_linear(_interp: ::std::os::raw::c_uint) -> firinterp_cccf;
}
extern "C" {
    pub fn firinterp_cccf_create_window(
        _interp: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
    ) -> firinterp_cccf;
}
extern "C" {
    pub fn firinterp_cccf_copy(_q: firinterp_cccf) -> firinterp_cccf;
}
extern "C" {
    pub fn firinterp_cccf_destroy(_q: firinterp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_cccf_print(_q: firinterp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_cccf_reset(_q: firinterp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_cccf_get_interp_rate(_q: firinterp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firinterp_cccf_get_sub_len(_q: firinterp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firinterp_cccf_set_scale(
        _q: firinterp_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_cccf_get_scale(
        _q: firinterp_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_cccf_execute(
        _q: firinterp_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_cccf_execute_block(
        _q: firinterp_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firinterp_cccf_flush(
        _q: firinterp_cccf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirinterp_rrrf_s {
    _unused: [u8; 0],
}
pub type iirinterp_rrrf = *mut iirinterp_rrrf_s;
extern "C" {
    pub fn iirinterp_rrrf_create(
        _M: ::std::os::raw::c_uint,
        _b: *mut f32,
        _nb: ::std::os::raw::c_uint,
        _a: *mut f32,
        _na: ::std::os::raw::c_uint,
    ) -> iirinterp_rrrf;
}
extern "C" {
    pub fn iirinterp_rrrf_create_default(
        _M: ::std::os::raw::c_uint,
        _order: ::std::os::raw::c_uint,
    ) -> iirinterp_rrrf;
}
extern "C" {
    pub fn iirinterp_rrrf_create_prototype(
        _M: ::std::os::raw::c_uint,
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirinterp_rrrf;
}
extern "C" {
    pub fn iirinterp_rrrf_copy(_q: iirinterp_rrrf) -> iirinterp_rrrf;
}
extern "C" {
    pub fn iirinterp_rrrf_destroy(_q: iirinterp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_rrrf_print(_q: iirinterp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_rrrf_reset(_q: iirinterp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_rrrf_execute(
        _q: iirinterp_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_rrrf_execute_block(
        _q: iirinterp_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_rrrf_groupdelay(_q: iirinterp_rrrf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirinterp_crcf_s {
    _unused: [u8; 0],
}
pub type iirinterp_crcf = *mut iirinterp_crcf_s;
extern "C" {
    pub fn iirinterp_crcf_create(
        _M: ::std::os::raw::c_uint,
        _b: *mut f32,
        _nb: ::std::os::raw::c_uint,
        _a: *mut f32,
        _na: ::std::os::raw::c_uint,
    ) -> iirinterp_crcf;
}
extern "C" {
    pub fn iirinterp_crcf_create_default(
        _M: ::std::os::raw::c_uint,
        _order: ::std::os::raw::c_uint,
    ) -> iirinterp_crcf;
}
extern "C" {
    pub fn iirinterp_crcf_create_prototype(
        _M: ::std::os::raw::c_uint,
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirinterp_crcf;
}
extern "C" {
    pub fn iirinterp_crcf_copy(_q: iirinterp_crcf) -> iirinterp_crcf;
}
extern "C" {
    pub fn iirinterp_crcf_destroy(_q: iirinterp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_crcf_print(_q: iirinterp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_crcf_reset(_q: iirinterp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_crcf_execute(
        _q: iirinterp_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_crcf_execute_block(
        _q: iirinterp_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_crcf_groupdelay(_q: iirinterp_crcf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirinterp_cccf_s {
    _unused: [u8; 0],
}
pub type iirinterp_cccf = *mut iirinterp_cccf_s;
extern "C" {
    pub fn iirinterp_cccf_create(
        _M: ::std::os::raw::c_uint,
        _b: *mut liquid_float_complex,
        _nb: ::std::os::raw::c_uint,
        _a: *mut liquid_float_complex,
        _na: ::std::os::raw::c_uint,
    ) -> iirinterp_cccf;
}
extern "C" {
    pub fn iirinterp_cccf_create_default(
        _M: ::std::os::raw::c_uint,
        _order: ::std::os::raw::c_uint,
    ) -> iirinterp_cccf;
}
extern "C" {
    pub fn iirinterp_cccf_create_prototype(
        _M: ::std::os::raw::c_uint,
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirinterp_cccf;
}
extern "C" {
    pub fn iirinterp_cccf_copy(_q: iirinterp_cccf) -> iirinterp_cccf;
}
extern "C" {
    pub fn iirinterp_cccf_destroy(_q: iirinterp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_cccf_print(_q: iirinterp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_cccf_reset(_q: iirinterp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_cccf_execute(
        _q: iirinterp_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_cccf_execute_block(
        _q: iirinterp_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirinterp_cccf_groupdelay(_q: iirinterp_cccf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firdecim_rrrf_s {
    _unused: [u8; 0],
}
pub type firdecim_rrrf = *mut firdecim_rrrf_s;
extern "C" {
    pub fn firdecim_rrrf_create(
        _M: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firdecim_rrrf;
}
extern "C" {
    pub fn firdecim_rrrf_create_kaiser(
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> firdecim_rrrf;
}
extern "C" {
    pub fn firdecim_rrrf_create_prototype(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> firdecim_rrrf;
}
extern "C" {
    pub fn firdecim_rrrf_copy(_q: firdecim_rrrf) -> firdecim_rrrf;
}
extern "C" {
    pub fn firdecim_rrrf_destroy(_q: firdecim_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_rrrf_print(_q: firdecim_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_rrrf_reset(_q: firdecim_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_rrrf_get_decim_rate(_q: firdecim_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firdecim_rrrf_set_scale(_q: firdecim_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_rrrf_get_scale(_q: firdecim_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_rrrf_freqresp(
        _q: firdecim_rrrf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_rrrf_execute(
        _q: firdecim_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_rrrf_execute_block(
        _q: firdecim_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firdecim_crcf_s {
    _unused: [u8; 0],
}
pub type firdecim_crcf = *mut firdecim_crcf_s;
extern "C" {
    pub fn firdecim_crcf_create(
        _M: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> firdecim_crcf;
}
extern "C" {
    pub fn firdecim_crcf_create_kaiser(
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> firdecim_crcf;
}
extern "C" {
    pub fn firdecim_crcf_create_prototype(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> firdecim_crcf;
}
extern "C" {
    pub fn firdecim_crcf_copy(_q: firdecim_crcf) -> firdecim_crcf;
}
extern "C" {
    pub fn firdecim_crcf_destroy(_q: firdecim_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_crcf_print(_q: firdecim_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_crcf_reset(_q: firdecim_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_crcf_get_decim_rate(_q: firdecim_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firdecim_crcf_set_scale(_q: firdecim_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_crcf_get_scale(_q: firdecim_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_crcf_freqresp(
        _q: firdecim_crcf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_crcf_execute(
        _q: firdecim_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_crcf_execute_block(
        _q: firdecim_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firdecim_cccf_s {
    _unused: [u8; 0],
}
pub type firdecim_cccf = *mut firdecim_cccf_s;
extern "C" {
    pub fn firdecim_cccf_create(
        _M: ::std::os::raw::c_uint,
        _h: *mut liquid_float_complex,
        _h_len: ::std::os::raw::c_uint,
    ) -> firdecim_cccf;
}
extern "C" {
    pub fn firdecim_cccf_create_kaiser(
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> firdecim_cccf;
}
extern "C" {
    pub fn firdecim_cccf_create_prototype(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> firdecim_cccf;
}
extern "C" {
    pub fn firdecim_cccf_copy(_q: firdecim_cccf) -> firdecim_cccf;
}
extern "C" {
    pub fn firdecim_cccf_destroy(_q: firdecim_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_cccf_print(_q: firdecim_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_cccf_reset(_q: firdecim_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_cccf_get_decim_rate(_q: firdecim_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firdecim_cccf_set_scale(
        _q: firdecim_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_cccf_get_scale(
        _q: firdecim_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_cccf_freqresp(
        _q: firdecim_cccf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_cccf_execute(
        _q: firdecim_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firdecim_cccf_execute_block(
        _q: firdecim_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirdecim_rrrf_s {
    _unused: [u8; 0],
}
pub type iirdecim_rrrf = *mut iirdecim_rrrf_s;
extern "C" {
    pub fn iirdecim_rrrf_create(
        _M: ::std::os::raw::c_uint,
        _b: *mut f32,
        _nb: ::std::os::raw::c_uint,
        _a: *mut f32,
        _na: ::std::os::raw::c_uint,
    ) -> iirdecim_rrrf;
}
extern "C" {
    pub fn iirdecim_rrrf_create_default(
        _M: ::std::os::raw::c_uint,
        _order: ::std::os::raw::c_uint,
    ) -> iirdecim_rrrf;
}
extern "C" {
    pub fn iirdecim_rrrf_create_prototype(
        _M: ::std::os::raw::c_uint,
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirdecim_rrrf;
}
extern "C" {
    pub fn iirdecim_rrrf_copy(_q: iirdecim_rrrf) -> iirdecim_rrrf;
}
extern "C" {
    pub fn iirdecim_rrrf_destroy(_q: iirdecim_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_rrrf_print(_q: iirdecim_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_rrrf_reset(_q: iirdecim_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_rrrf_execute(
        _q: iirdecim_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_rrrf_execute_block(
        _q: iirdecim_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_rrrf_groupdelay(_q: iirdecim_rrrf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirdecim_crcf_s {
    _unused: [u8; 0],
}
pub type iirdecim_crcf = *mut iirdecim_crcf_s;
extern "C" {
    pub fn iirdecim_crcf_create(
        _M: ::std::os::raw::c_uint,
        _b: *mut f32,
        _nb: ::std::os::raw::c_uint,
        _a: *mut f32,
        _na: ::std::os::raw::c_uint,
    ) -> iirdecim_crcf;
}
extern "C" {
    pub fn iirdecim_crcf_create_default(
        _M: ::std::os::raw::c_uint,
        _order: ::std::os::raw::c_uint,
    ) -> iirdecim_crcf;
}
extern "C" {
    pub fn iirdecim_crcf_create_prototype(
        _M: ::std::os::raw::c_uint,
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirdecim_crcf;
}
extern "C" {
    pub fn iirdecim_crcf_copy(_q: iirdecim_crcf) -> iirdecim_crcf;
}
extern "C" {
    pub fn iirdecim_crcf_destroy(_q: iirdecim_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_crcf_print(_q: iirdecim_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_crcf_reset(_q: iirdecim_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_crcf_execute(
        _q: iirdecim_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_crcf_execute_block(
        _q: iirdecim_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_crcf_groupdelay(_q: iirdecim_crcf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iirdecim_cccf_s {
    _unused: [u8; 0],
}
pub type iirdecim_cccf = *mut iirdecim_cccf_s;
extern "C" {
    pub fn iirdecim_cccf_create(
        _M: ::std::os::raw::c_uint,
        _b: *mut liquid_float_complex,
        _nb: ::std::os::raw::c_uint,
        _a: *mut liquid_float_complex,
        _na: ::std::os::raw::c_uint,
    ) -> iirdecim_cccf;
}
extern "C" {
    pub fn iirdecim_cccf_create_default(
        _M: ::std::os::raw::c_uint,
        _order: ::std::os::raw::c_uint,
    ) -> iirdecim_cccf;
}
extern "C" {
    pub fn iirdecim_cccf_create_prototype(
        _M: ::std::os::raw::c_uint,
        _ftype: liquid_iirdes_filtertype,
        _btype: liquid_iirdes_bandtype,
        _format: liquid_iirdes_format,
        _order: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _ap: f32,
        _as: f32,
    ) -> iirdecim_cccf;
}
extern "C" {
    pub fn iirdecim_cccf_copy(_q: iirdecim_cccf) -> iirdecim_cccf;
}
extern "C" {
    pub fn iirdecim_cccf_destroy(_q: iirdecim_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_cccf_print(_q: iirdecim_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_cccf_reset(_q: iirdecim_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_cccf_execute(
        _q: iirdecim_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_cccf_execute_block(
        _q: iirdecim_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iirdecim_cccf_groupdelay(_q: iirdecim_cccf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resamp2_rrrf_s {
    _unused: [u8; 0],
}
pub type resamp2_rrrf = *mut resamp2_rrrf_s;
extern "C" {
    pub fn resamp2_rrrf_create(_m: ::std::os::raw::c_uint, _f0: f32, _as: f32) -> resamp2_rrrf;
}
extern "C" {
    pub fn resamp2_rrrf_recreate(
        _q: resamp2_rrrf,
        _m: ::std::os::raw::c_uint,
        _f0: f32,
        _as: f32,
    ) -> resamp2_rrrf;
}
extern "C" {
    pub fn resamp2_rrrf_copy(_q: resamp2_rrrf) -> resamp2_rrrf;
}
extern "C" {
    pub fn resamp2_rrrf_destroy(_q: resamp2_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_print(_q: resamp2_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_reset(_q: resamp2_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_get_delay(_q: resamp2_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp2_rrrf_set_scale(_q: resamp2_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_get_scale(_q: resamp2_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_filter_execute(
        _q: resamp2_rrrf,
        _x: f32,
        _y0: *mut f32,
        _y1: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_analyzer_execute(
        _q: resamp2_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_synthesizer_execute(
        _q: resamp2_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_decim_execute(
        _q: resamp2_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_rrrf_interp_execute(
        _q: resamp2_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resamp2_crcf_s {
    _unused: [u8; 0],
}
pub type resamp2_crcf = *mut resamp2_crcf_s;
extern "C" {
    pub fn resamp2_crcf_create(_m: ::std::os::raw::c_uint, _f0: f32, _as: f32) -> resamp2_crcf;
}
extern "C" {
    pub fn resamp2_crcf_recreate(
        _q: resamp2_crcf,
        _m: ::std::os::raw::c_uint,
        _f0: f32,
        _as: f32,
    ) -> resamp2_crcf;
}
extern "C" {
    pub fn resamp2_crcf_copy(_q: resamp2_crcf) -> resamp2_crcf;
}
extern "C" {
    pub fn resamp2_crcf_destroy(_q: resamp2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_print(_q: resamp2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_reset(_q: resamp2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_get_delay(_q: resamp2_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp2_crcf_set_scale(_q: resamp2_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_get_scale(_q: resamp2_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_filter_execute(
        _q: resamp2_crcf,
        _x: liquid_float_complex,
        _y0: *mut liquid_float_complex,
        _y1: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_analyzer_execute(
        _q: resamp2_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_synthesizer_execute(
        _q: resamp2_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_decim_execute(
        _q: resamp2_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_crcf_interp_execute(
        _q: resamp2_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resamp2_cccf_s {
    _unused: [u8; 0],
}
pub type resamp2_cccf = *mut resamp2_cccf_s;
extern "C" {
    pub fn resamp2_cccf_create(_m: ::std::os::raw::c_uint, _f0: f32, _as: f32) -> resamp2_cccf;
}
extern "C" {
    pub fn resamp2_cccf_recreate(
        _q: resamp2_cccf,
        _m: ::std::os::raw::c_uint,
        _f0: f32,
        _as: f32,
    ) -> resamp2_cccf;
}
extern "C" {
    pub fn resamp2_cccf_copy(_q: resamp2_cccf) -> resamp2_cccf;
}
extern "C" {
    pub fn resamp2_cccf_destroy(_q: resamp2_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_print(_q: resamp2_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_reset(_q: resamp2_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_get_delay(_q: resamp2_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp2_cccf_set_scale(
        _q: resamp2_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_get_scale(
        _q: resamp2_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_filter_execute(
        _q: resamp2_cccf,
        _x: liquid_float_complex,
        _y0: *mut liquid_float_complex,
        _y1: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_analyzer_execute(
        _q: resamp2_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_synthesizer_execute(
        _q: resamp2_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_decim_execute(
        _q: resamp2_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp2_cccf_interp_execute(
        _q: resamp2_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rresamp_rrrf_s {
    _unused: [u8; 0],
}
pub type rresamp_rrrf = *mut rresamp_rrrf_s;
extern "C" {
    pub fn rresamp_rrrf_create(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _h: *mut f32,
    ) -> rresamp_rrrf;
}
extern "C" {
    pub fn rresamp_rrrf_create_kaiser(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _bw: f32,
        _as: f32,
    ) -> rresamp_rrrf;
}
extern "C" {
    pub fn rresamp_rrrf_create_prototype(
        _type: ::std::os::raw::c_int,
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> rresamp_rrrf;
}
extern "C" {
    pub fn rresamp_rrrf_create_default(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
    ) -> rresamp_rrrf;
}
extern "C" {
    pub fn rresamp_rrrf_copy(_q: rresamp_rrrf) -> rresamp_rrrf;
}
extern "C" {
    pub fn rresamp_rrrf_destroy(_q: rresamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_rrrf_print(_q: rresamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_rrrf_reset(_q: rresamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_rrrf_set_scale(_q: rresamp_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_rrrf_get_scale(_q: rresamp_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_rrrf_get_delay(_q: rresamp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_rrrf_get_P(_q: rresamp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_rrrf_get_interp(_q: rresamp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_rrrf_get_Q(_q: rresamp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_rrrf_get_decim(_q: rresamp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_rrrf_get_block_len(_q: rresamp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_rrrf_get_rate(_q: rresamp_rrrf) -> f32;
}
extern "C" {
    pub fn rresamp_rrrf_write(_q: rresamp_rrrf, _buf: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_rrrf_execute(
        _q: rresamp_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_rrrf_execute_block(
        _q: rresamp_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rresamp_crcf_s {
    _unused: [u8; 0],
}
pub type rresamp_crcf = *mut rresamp_crcf_s;
extern "C" {
    pub fn rresamp_crcf_create(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _h: *mut f32,
    ) -> rresamp_crcf;
}
extern "C" {
    pub fn rresamp_crcf_create_kaiser(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _bw: f32,
        _as: f32,
    ) -> rresamp_crcf;
}
extern "C" {
    pub fn rresamp_crcf_create_prototype(
        _type: ::std::os::raw::c_int,
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> rresamp_crcf;
}
extern "C" {
    pub fn rresamp_crcf_create_default(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
    ) -> rresamp_crcf;
}
extern "C" {
    pub fn rresamp_crcf_copy(_q: rresamp_crcf) -> rresamp_crcf;
}
extern "C" {
    pub fn rresamp_crcf_destroy(_q: rresamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_crcf_print(_q: rresamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_crcf_reset(_q: rresamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_crcf_set_scale(_q: rresamp_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_crcf_get_scale(_q: rresamp_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_crcf_get_delay(_q: rresamp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_crcf_get_P(_q: rresamp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_crcf_get_interp(_q: rresamp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_crcf_get_Q(_q: rresamp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_crcf_get_decim(_q: rresamp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_crcf_get_block_len(_q: rresamp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_crcf_get_rate(_q: rresamp_crcf) -> f32;
}
extern "C" {
    pub fn rresamp_crcf_write(
        _q: rresamp_crcf,
        _buf: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_crcf_execute(
        _q: rresamp_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_crcf_execute_block(
        _q: rresamp_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rresamp_cccf_s {
    _unused: [u8; 0],
}
pub type rresamp_cccf = *mut rresamp_cccf_s;
extern "C" {
    pub fn rresamp_cccf_create(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _h: *mut liquid_float_complex,
    ) -> rresamp_cccf;
}
extern "C" {
    pub fn rresamp_cccf_create_kaiser(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _bw: f32,
        _as: f32,
    ) -> rresamp_cccf;
}
extern "C" {
    pub fn rresamp_cccf_create_prototype(
        _type: ::std::os::raw::c_int,
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> rresamp_cccf;
}
extern "C" {
    pub fn rresamp_cccf_create_default(
        _interp: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
    ) -> rresamp_cccf;
}
extern "C" {
    pub fn rresamp_cccf_copy(_q: rresamp_cccf) -> rresamp_cccf;
}
extern "C" {
    pub fn rresamp_cccf_destroy(_q: rresamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_cccf_print(_q: rresamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_cccf_reset(_q: rresamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_cccf_set_scale(
        _q: rresamp_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_cccf_get_scale(
        _q: rresamp_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_cccf_get_delay(_q: rresamp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_cccf_get_P(_q: rresamp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_cccf_get_interp(_q: rresamp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_cccf_get_Q(_q: rresamp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_cccf_get_decim(_q: rresamp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_cccf_get_block_len(_q: rresamp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rresamp_cccf_get_rate(_q: rresamp_cccf) -> f32;
}
extern "C" {
    pub fn rresamp_cccf_write(
        _q: rresamp_cccf,
        _buf: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_cccf_execute(
        _q: rresamp_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresamp_cccf_execute_block(
        _q: rresamp_cccf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resamp_rrrf_s {
    _unused: [u8; 0],
}
pub type resamp_rrrf = *mut resamp_rrrf_s;
extern "C" {
    pub fn resamp_rrrf_create(
        _rate: f32,
        _m: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _npfb: ::std::os::raw::c_uint,
    ) -> resamp_rrrf;
}
extern "C" {
    pub fn resamp_rrrf_create_default(_rate: f32) -> resamp_rrrf;
}
extern "C" {
    pub fn resamp_rrrf_copy(_q: resamp_rrrf) -> resamp_rrrf;
}
extern "C" {
    pub fn resamp_rrrf_destroy(_q: resamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_print(_q: resamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_reset(_q: resamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_get_delay(_q: resamp_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp_rrrf_set_scale(_q: resamp_rrrf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_get_scale(_q: resamp_rrrf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_set_rate(_q: resamp_rrrf, _rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_get_rate(_q: resamp_rrrf) -> f32;
}
extern "C" {
    pub fn resamp_rrrf_adjust_rate(_q: resamp_rrrf, _gamma: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_set_timing_phase(_q: resamp_rrrf, _tau: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_adjust_timing_phase(_q: resamp_rrrf, _delta: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_get_num_output(
        _q: resamp_rrrf,
        _num_input: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp_rrrf_execute(
        _q: resamp_rrrf,
        _x: f32,
        _y: *mut f32,
        _num_written: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_rrrf_execute_block(
        _q: resamp_rrrf,
        _x: *mut f32,
        _nx: ::std::os::raw::c_uint,
        _y: *mut f32,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resamp_crcf_s {
    _unused: [u8; 0],
}
pub type resamp_crcf = *mut resamp_crcf_s;
extern "C" {
    pub fn resamp_crcf_create(
        _rate: f32,
        _m: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _npfb: ::std::os::raw::c_uint,
    ) -> resamp_crcf;
}
extern "C" {
    pub fn resamp_crcf_create_default(_rate: f32) -> resamp_crcf;
}
extern "C" {
    pub fn resamp_crcf_copy(_q: resamp_crcf) -> resamp_crcf;
}
extern "C" {
    pub fn resamp_crcf_destroy(_q: resamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_print(_q: resamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_reset(_q: resamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_get_delay(_q: resamp_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp_crcf_set_scale(_q: resamp_crcf, _scale: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_get_scale(_q: resamp_crcf, _scale: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_set_rate(_q: resamp_crcf, _rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_get_rate(_q: resamp_crcf) -> f32;
}
extern "C" {
    pub fn resamp_crcf_adjust_rate(_q: resamp_crcf, _gamma: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_set_timing_phase(_q: resamp_crcf, _tau: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_adjust_timing_phase(_q: resamp_crcf, _delta: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_get_num_output(
        _q: resamp_crcf,
        _num_input: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp_crcf_execute(
        _q: resamp_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
        _num_written: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_crcf_execute_block(
        _q: resamp_crcf,
        _x: *mut liquid_float_complex,
        _nx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resamp_cccf_s {
    _unused: [u8; 0],
}
pub type resamp_cccf = *mut resamp_cccf_s;
extern "C" {
    pub fn resamp_cccf_create(
        _rate: f32,
        _m: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
        _npfb: ::std::os::raw::c_uint,
    ) -> resamp_cccf;
}
extern "C" {
    pub fn resamp_cccf_create_default(_rate: f32) -> resamp_cccf;
}
extern "C" {
    pub fn resamp_cccf_copy(_q: resamp_cccf) -> resamp_cccf;
}
extern "C" {
    pub fn resamp_cccf_destroy(_q: resamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_print(_q: resamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_reset(_q: resamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_get_delay(_q: resamp_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp_cccf_set_scale(
        _q: resamp_cccf,
        _scale: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_get_scale(
        _q: resamp_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_set_rate(_q: resamp_cccf, _rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_get_rate(_q: resamp_cccf) -> f32;
}
extern "C" {
    pub fn resamp_cccf_adjust_rate(_q: resamp_cccf, _gamma: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_set_timing_phase(_q: resamp_cccf, _tau: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_adjust_timing_phase(_q: resamp_cccf, _delta: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_get_num_output(
        _q: resamp_cccf,
        _num_input: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn resamp_cccf_execute(
        _q: resamp_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
        _num_written: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resamp_cccf_execute_block(
        _q: resamp_cccf,
        _x: *mut liquid_float_complex,
        _nx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const liquid_resamp_type_LIQUID_RESAMP_INTERP: liquid_resamp_type = 0;
pub const liquid_resamp_type_LIQUID_RESAMP_DECIM: liquid_resamp_type = 1;
pub type liquid_resamp_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msresamp2_rrrf_s {
    _unused: [u8; 0],
}
pub type msresamp2_rrrf = *mut msresamp2_rrrf_s;
extern "C" {
    pub fn msresamp2_rrrf_create(
        _type: ::std::os::raw::c_int,
        _num_stages: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _as: f32,
    ) -> msresamp2_rrrf;
}
extern "C" {
    pub fn msresamp2_rrrf_copy(_q: msresamp2_rrrf) -> msresamp2_rrrf;
}
extern "C" {
    pub fn msresamp2_rrrf_destroy(_q: msresamp2_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_rrrf_print(_q: msresamp2_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_rrrf_reset(_q: msresamp2_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_rrrf_get_rate(_q: msresamp2_rrrf) -> f32;
}
extern "C" {
    pub fn msresamp2_rrrf_get_num_stages(_q: msresamp2_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msresamp2_rrrf_get_type(_q: msresamp2_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_rrrf_get_delay(_q: msresamp2_rrrf) -> f32;
}
extern "C" {
    pub fn msresamp2_rrrf_execute(
        _q: msresamp2_rrrf,
        _x: *mut f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msresamp2_crcf_s {
    _unused: [u8; 0],
}
pub type msresamp2_crcf = *mut msresamp2_crcf_s;
extern "C" {
    pub fn msresamp2_crcf_create(
        _type: ::std::os::raw::c_int,
        _num_stages: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _as: f32,
    ) -> msresamp2_crcf;
}
extern "C" {
    pub fn msresamp2_crcf_copy(_q: msresamp2_crcf) -> msresamp2_crcf;
}
extern "C" {
    pub fn msresamp2_crcf_destroy(_q: msresamp2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_crcf_print(_q: msresamp2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_crcf_reset(_q: msresamp2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_crcf_get_rate(_q: msresamp2_crcf) -> f32;
}
extern "C" {
    pub fn msresamp2_crcf_get_num_stages(_q: msresamp2_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msresamp2_crcf_get_type(_q: msresamp2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_crcf_get_delay(_q: msresamp2_crcf) -> f32;
}
extern "C" {
    pub fn msresamp2_crcf_execute(
        _q: msresamp2_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msresamp2_cccf_s {
    _unused: [u8; 0],
}
pub type msresamp2_cccf = *mut msresamp2_cccf_s;
extern "C" {
    pub fn msresamp2_cccf_create(
        _type: ::std::os::raw::c_int,
        _num_stages: ::std::os::raw::c_uint,
        _fc: f32,
        _f0: f32,
        _as: f32,
    ) -> msresamp2_cccf;
}
extern "C" {
    pub fn msresamp2_cccf_copy(_q: msresamp2_cccf) -> msresamp2_cccf;
}
extern "C" {
    pub fn msresamp2_cccf_destroy(_q: msresamp2_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_cccf_print(_q: msresamp2_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_cccf_reset(_q: msresamp2_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_cccf_get_rate(_q: msresamp2_cccf) -> f32;
}
extern "C" {
    pub fn msresamp2_cccf_get_num_stages(_q: msresamp2_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msresamp2_cccf_get_type(_q: msresamp2_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp2_cccf_get_delay(_q: msresamp2_cccf) -> f32;
}
extern "C" {
    pub fn msresamp2_cccf_execute(
        _q: msresamp2_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msresamp_rrrf_s {
    _unused: [u8; 0],
}
pub type msresamp_rrrf = *mut msresamp_rrrf_s;
extern "C" {
    pub fn msresamp_rrrf_create(_r: f32, _as: f32) -> msresamp_rrrf;
}
extern "C" {
    pub fn msresamp_rrrf_copy(_q: msresamp_rrrf) -> msresamp_rrrf;
}
extern "C" {
    pub fn msresamp_rrrf_destroy(_q: msresamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_rrrf_print(_q: msresamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_rrrf_reset(_q: msresamp_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_rrrf_get_delay(_q: msresamp_rrrf) -> f32;
}
extern "C" {
    pub fn msresamp_rrrf_get_rate(_q: msresamp_rrrf) -> f32;
}
extern "C" {
    pub fn msresamp_rrrf_get_num_output(
        _q: msresamp_rrrf,
        _num_input: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msresamp_rrrf_execute(
        _q: msresamp_rrrf,
        _x: *mut f32,
        _nx: ::std::os::raw::c_uint,
        _y: *mut f32,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msresamp_crcf_s {
    _unused: [u8; 0],
}
pub type msresamp_crcf = *mut msresamp_crcf_s;
extern "C" {
    pub fn msresamp_crcf_create(_r: f32, _as: f32) -> msresamp_crcf;
}
extern "C" {
    pub fn msresamp_crcf_copy(_q: msresamp_crcf) -> msresamp_crcf;
}
extern "C" {
    pub fn msresamp_crcf_destroy(_q: msresamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_crcf_print(_q: msresamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_crcf_reset(_q: msresamp_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_crcf_get_delay(_q: msresamp_crcf) -> f32;
}
extern "C" {
    pub fn msresamp_crcf_get_rate(_q: msresamp_crcf) -> f32;
}
extern "C" {
    pub fn msresamp_crcf_get_num_output(
        _q: msresamp_crcf,
        _num_input: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msresamp_crcf_execute(
        _q: msresamp_crcf,
        _x: *mut liquid_float_complex,
        _nx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msresamp_cccf_s {
    _unused: [u8; 0],
}
pub type msresamp_cccf = *mut msresamp_cccf_s;
extern "C" {
    pub fn msresamp_cccf_create(_r: f32, _as: f32) -> msresamp_cccf;
}
extern "C" {
    pub fn msresamp_cccf_copy(_q: msresamp_cccf) -> msresamp_cccf;
}
extern "C" {
    pub fn msresamp_cccf_destroy(_q: msresamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_cccf_print(_q: msresamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_cccf_reset(_q: msresamp_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msresamp_cccf_get_delay(_q: msresamp_cccf) -> f32;
}
extern "C" {
    pub fn msresamp_cccf_get_rate(_q: msresamp_cccf) -> f32;
}
extern "C" {
    pub fn msresamp_cccf_get_num_output(
        _q: msresamp_cccf,
        _num_input: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msresamp_cccf_execute(
        _q: msresamp_cccf,
        _x: *mut liquid_float_complex,
        _nx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_cccf_s {
    _unused: [u8; 0],
}
pub type dds_cccf = *mut dds_cccf_s;
extern "C" {
    pub fn dds_cccf_create(
        _num_stages: ::std::os::raw::c_uint,
        _fc: f32,
        _bw: f32,
        _as: f32,
    ) -> dds_cccf;
}
extern "C" {
    pub fn dds_cccf_copy(_q: dds_cccf) -> dds_cccf;
}
extern "C" {
    pub fn dds_cccf_destroy(_q: dds_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dds_cccf_print(_q: dds_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dds_cccf_reset(_q: dds_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dds_cccf_set_scale(_q: dds_cccf, _scale: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dds_cccf_get_scale(
        _q: dds_cccf,
        _scale: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dds_cccf_get_num_stages(_q: dds_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dds_cccf_get_delay_interp(_q: dds_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dds_cccf_get_delay_decim(_q: dds_cccf) -> f32;
}
extern "C" {
    pub fn dds_cccf_decim_execute(
        _q: dds_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dds_cccf_interp_execute(
        _q: dds_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symsync_rrrf_s {
    _unused: [u8; 0],
}
pub type symsync_rrrf = *mut symsync_rrrf_s;
extern "C" {
    pub fn symsync_rrrf_create(
        _k: ::std::os::raw::c_uint,
        _M: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> symsync_rrrf;
}
extern "C" {
    pub fn symsync_rrrf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _M: ::std::os::raw::c_uint,
    ) -> symsync_rrrf;
}
extern "C" {
    pub fn symsync_rrrf_create_kaiser(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _M: ::std::os::raw::c_uint,
    ) -> symsync_rrrf;
}
extern "C" {
    pub fn symsync_rrrf_copy(_q: symsync_rrrf) -> symsync_rrrf;
}
extern "C" {
    pub fn symsync_rrrf_destroy(_q: symsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_print(_q: symsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_reset(_q: symsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_lock(_q: symsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_unlock(_q: symsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_is_locked(_q: symsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_set_output_rate(
        _q: symsync_rrrf,
        _k_out: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_set_lf_bw(_q: symsync_rrrf, _bt: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_rrrf_get_tau(_q: symsync_rrrf) -> f32;
}
extern "C" {
    pub fn symsync_rrrf_execute(
        _q: symsync_rrrf,
        _x: *mut f32,
        _nx: ::std::os::raw::c_uint,
        _y: *mut f32,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symsync_crcf_s {
    _unused: [u8; 0],
}
pub type symsync_crcf = *mut symsync_crcf_s;
extern "C" {
    pub fn symsync_crcf_create(
        _k: ::std::os::raw::c_uint,
        _M: ::std::os::raw::c_uint,
        _h: *mut f32,
        _h_len: ::std::os::raw::c_uint,
    ) -> symsync_crcf;
}
extern "C" {
    pub fn symsync_crcf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _M: ::std::os::raw::c_uint,
    ) -> symsync_crcf;
}
extern "C" {
    pub fn symsync_crcf_create_kaiser(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _M: ::std::os::raw::c_uint,
    ) -> symsync_crcf;
}
extern "C" {
    pub fn symsync_crcf_copy(_q: symsync_crcf) -> symsync_crcf;
}
extern "C" {
    pub fn symsync_crcf_destroy(_q: symsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_print(_q: symsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_reset(_q: symsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_lock(_q: symsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_unlock(_q: symsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_is_locked(_q: symsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_set_output_rate(
        _q: symsync_crcf,
        _k_out: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_set_lf_bw(_q: symsync_crcf, _bt: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symsync_crcf_get_tau(_q: symsync_crcf) -> f32;
}
extern "C" {
    pub fn symsync_crcf_execute(
        _q: symsync_crcf,
        _x: *mut liquid_float_complex,
        _nx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firfarrow_rrrf_s {
    _unused: [u8; 0],
}
pub type firfarrow_rrrf = *mut firfarrow_rrrf_s;
extern "C" {
    pub fn firfarrow_rrrf_create(
        _h_len: ::std::os::raw::c_uint,
        _p: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firfarrow_rrrf;
}
extern "C" {
    pub fn firfarrow_rrrf_destroy(_q: firfarrow_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_print(_q: firfarrow_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_reset(_q: firfarrow_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_push(_q: firfarrow_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_set_delay(_q: firfarrow_rrrf, _mu: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_execute(_q: firfarrow_rrrf, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_execute_block(
        _q: firfarrow_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_get_length(_q: firfarrow_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firfarrow_rrrf_get_coefficients(
        _q: firfarrow_rrrf,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_freqresponse(
        _q: firfarrow_rrrf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_rrrf_groupdelay(_q: firfarrow_rrrf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firfarrow_crcf_s {
    _unused: [u8; 0],
}
pub type firfarrow_crcf = *mut firfarrow_crcf_s;
extern "C" {
    pub fn firfarrow_crcf_create(
        _h_len: ::std::os::raw::c_uint,
        _p: ::std::os::raw::c_uint,
        _fc: f32,
        _as: f32,
    ) -> firfarrow_crcf;
}
extern "C" {
    pub fn firfarrow_crcf_destroy(_q: firfarrow_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_print(_q: firfarrow_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_reset(_q: firfarrow_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_push(
        _q: firfarrow_crcf,
        _x: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_set_delay(_q: firfarrow_crcf, _mu: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_execute(
        _q: firfarrow_crcf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_execute_block(
        _q: firfarrow_crcf,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_get_length(_q: firfarrow_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firfarrow_crcf_get_coefficients(
        _q: firfarrow_crcf,
        _h: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_freqresponse(
        _q: firfarrow_crcf,
        _fc: f32,
        _H: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firfarrow_crcf_groupdelay(_q: firfarrow_crcf, _fc: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ordfilt_rrrf_s {
    _unused: [u8; 0],
}
pub type ordfilt_rrrf = *mut ordfilt_rrrf_s;
extern "C" {
    pub fn ordfilt_rrrf_create(
        _n: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
    ) -> ordfilt_rrrf;
}
extern "C" {
    pub fn ordfilt_rrrf_create_medfilt(_m: ::std::os::raw::c_uint) -> ordfilt_rrrf;
}
extern "C" {
    pub fn ordfilt_rrrf_copy(_q: ordfilt_rrrf) -> ordfilt_rrrf;
}
extern "C" {
    pub fn ordfilt_rrrf_destroy(_q: ordfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordfilt_rrrf_reset(_q: ordfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordfilt_rrrf_print(_q: ordfilt_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordfilt_rrrf_push(_q: ordfilt_rrrf, _x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordfilt_rrrf_write(
        _q: ordfilt_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordfilt_rrrf_execute(_q: ordfilt_rrrf, _y: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordfilt_rrrf_execute_one(
        _q: ordfilt_rrrf,
        _x: f32,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordfilt_rrrf_execute_block(
        _q: ordfilt_rrrf,
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct framesyncstats_s {
    pub evm: f32,
    pub rssi: f32,
    pub cfo: f32,
    pub framesyms: *mut liquid_float_complex,
    pub num_framesyms: ::std::os::raw::c_uint,
    pub mod_scheme: ::std::os::raw::c_uint,
    pub mod_bps: ::std::os::raw::c_uint,
    pub check: ::std::os::raw::c_uint,
    pub fec0: ::std::os::raw::c_uint,
    pub fec1: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_framesyncstats_s() {
    assert_eq!(
        ::std::mem::size_of::<framesyncstats_s>(),
        48usize,
        concat!("Size of: ", stringify!(framesyncstats_s))
    );
    assert_eq!(
        ::std::mem::align_of::<framesyncstats_s>(),
        8usize,
        concat!("Alignment of ", stringify!(framesyncstats_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).evm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(evm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).rssi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).cfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(cfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).framesyms as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(framesyms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).num_framesyms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(num_framesyms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).mod_scheme as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(mod_scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).mod_bps as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(mod_bps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).check as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).fec0 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(fec0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<framesyncstats_s>())).fec1 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(framesyncstats_s),
            "::",
            stringify!(fec1)
        )
    );
}
impl Default for framesyncstats_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut framesyncstats_default: framesyncstats_s;
}
extern "C" {
    pub fn framesyncstats_init_default(_stats: *mut framesyncstats_s) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesyncstats_print(_stats: *mut framesyncstats_s) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct framedatastats_s {
    pub num_frames_detected: ::std::os::raw::c_uint,
    pub num_headers_valid: ::std::os::raw::c_uint,
    pub num_payloads_valid: ::std::os::raw::c_uint,
    pub num_bytes_received: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_framedatastats_s() {
    assert_eq!(
        ::std::mem::size_of::<framedatastats_s>(),
        24usize,
        concat!("Size of: ", stringify!(framedatastats_s))
    );
    assert_eq!(
        ::std::mem::align_of::<framedatastats_s>(),
        8usize,
        concat!("Alignment of ", stringify!(framedatastats_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<framedatastats_s>())).num_frames_detected as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(framedatastats_s),
            "::",
            stringify!(num_frames_detected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<framedatastats_s>())).num_headers_valid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(framedatastats_s),
            "::",
            stringify!(num_headers_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<framedatastats_s>())).num_payloads_valid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(framedatastats_s),
            "::",
            stringify!(num_payloads_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<framedatastats_s>())).num_bytes_received as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(framedatastats_s),
            "::",
            stringify!(num_bytes_received)
        )
    );
}
extern "C" {
    pub fn framedatastats_reset(_stats: *mut framedatastats_s) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framedatastats_print(_stats: *mut framedatastats_s) -> ::std::os::raw::c_int;
}
pub type framesync_callback = ::std::option::Option<
    unsafe extern "C" fn(
        _header: *mut ::std::os::raw::c_uchar,
        _header_valid: ::std::os::raw::c_int,
        _payload: *mut ::std::os::raw::c_uchar,
        _payload_len: ::std::os::raw::c_uint,
        _payload_valid: ::std::os::raw::c_int,
        _stats: framesyncstats_s,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type framesync_csma_callback =
    ::std::option::Option<unsafe extern "C" fn(_userdata: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qpacketmodem_s {
    _unused: [u8; 0],
}
pub type qpacketmodem = *mut qpacketmodem_s;
extern "C" {
    pub fn qpacketmodem_create() -> qpacketmodem;
}
extern "C" {
    pub fn qpacketmodem_copy(_q: qpacketmodem) -> qpacketmodem;
}
extern "C" {
    pub fn qpacketmodem_destroy(_q: qpacketmodem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_print(_q: qpacketmodem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_reset(_q: qpacketmodem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_configure(
        _q: qpacketmodem,
        _payload_len: ::std::os::raw::c_uint,
        _check: crc_scheme,
        _fec0: fec_scheme,
        _fec1: fec_scheme,
        _ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_get_frame_len(_q: qpacketmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpacketmodem_get_payload_len(_q: qpacketmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpacketmodem_get_crc(_q: qpacketmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpacketmodem_get_fec0(_q: qpacketmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpacketmodem_get_fec1(_q: qpacketmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpacketmodem_get_modscheme(_q: qpacketmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpacketmodem_get_demodulator_phase_error(_q: qpacketmodem) -> f32;
}
extern "C" {
    pub fn qpacketmodem_get_demodulator_evm(_q: qpacketmodem) -> f32;
}
extern "C" {
    pub fn qpacketmodem_encode_syms(
        _q: qpacketmodem,
        _payload: *const ::std::os::raw::c_uchar,
        _syms: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_decode_syms(
        _q: qpacketmodem,
        _syms: *mut ::std::os::raw::c_uchar,
        _payload: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_decode_bits(
        _q: qpacketmodem,
        _bits: *mut ::std::os::raw::c_uchar,
        _payload: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_encode(
        _q: qpacketmodem,
        _payload: *const ::std::os::raw::c_uchar,
        _frame: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_decode(
        _q: qpacketmodem,
        _frame: *mut liquid_float_complex,
        _payload: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_decode_soft(
        _q: qpacketmodem,
        _frame: *mut liquid_float_complex,
        _payload: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_decode_soft_sym(
        _q: qpacketmodem,
        _symbol: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpacketmodem_decode_soft_payload(
        _q: qpacketmodem,
        _payload: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilot_num_pilots(
        _payload_len: ::std::os::raw::c_uint,
        _pilot_spacing: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpilot_frame_len(
        _payload_len: ::std::os::raw::c_uint,
        _pilot_spacing: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qpilotgen_s {
    _unused: [u8; 0],
}
pub type qpilotgen = *mut qpilotgen_s;
extern "C" {
    pub fn qpilotgen_create(
        _payload_len: ::std::os::raw::c_uint,
        _pilot_spacing: ::std::os::raw::c_uint,
    ) -> qpilotgen;
}
extern "C" {
    pub fn qpilotgen_recreate(
        _q: qpilotgen,
        _payload_len: ::std::os::raw::c_uint,
        _pilot_spacing: ::std::os::raw::c_uint,
    ) -> qpilotgen;
}
extern "C" {
    pub fn qpilotgen_copy(_q: qpilotgen) -> qpilotgen;
}
extern "C" {
    pub fn qpilotgen_destroy(_q: qpilotgen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilotgen_reset(_q: qpilotgen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilotgen_print(_q: qpilotgen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilotgen_get_frame_len(_q: qpilotgen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpilotgen_execute(
        _q: qpilotgen,
        _payload: *mut liquid_float_complex,
        _frame: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qpilotsync_s {
    _unused: [u8; 0],
}
pub type qpilotsync = *mut qpilotsync_s;
extern "C" {
    pub fn qpilotsync_create(
        _payload_len: ::std::os::raw::c_uint,
        _pilot_spacing: ::std::os::raw::c_uint,
    ) -> qpilotsync;
}
extern "C" {
    pub fn qpilotsync_recreate(
        _q: qpilotsync,
        _payload_len: ::std::os::raw::c_uint,
        _pilot_spacing: ::std::os::raw::c_uint,
    ) -> qpilotsync;
}
extern "C" {
    pub fn qpilotsync_copy(_q: qpilotsync) -> qpilotsync;
}
extern "C" {
    pub fn qpilotsync_destroy(_q: qpilotsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilotsync_reset(_q: qpilotsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilotsync_print(_q: qpilotsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilotsync_get_frame_len(_q: qpilotsync) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpilotsync_execute(
        _q: qpilotsync,
        _frame: *mut liquid_float_complex,
        _payload: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpilotsync_get_dphi(_q: qpilotsync) -> f32;
}
extern "C" {
    pub fn qpilotsync_get_phi(_q: qpilotsync) -> f32;
}
extern "C" {
    pub fn qpilotsync_get_gain(_q: qpilotsync) -> f32;
}
extern "C" {
    pub fn qpilotsync_get_evm(_q: qpilotsync) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct framegen64_s {
    _unused: [u8; 0],
}
pub type framegen64 = *mut framegen64_s;
extern "C" {
    pub fn framegen64_create() -> framegen64;
}
extern "C" {
    pub fn framegen64_copy(_q: framegen64) -> framegen64;
}
extern "C" {
    pub fn framegen64_destroy(_q: framegen64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framegen64_print(_q: framegen64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framegen64_execute(
        _q: framegen64,
        _header: *mut ::std::os::raw::c_uchar,
        _payload: *mut ::std::os::raw::c_uchar,
        _frame: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct framesync64_s {
    _unused: [u8; 0],
}
pub type framesync64 = *mut framesync64_s;
extern "C" {
    pub fn framesync64_create(
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> framesync64;
}
extern "C" {
    pub fn framesync64_copy(_q: framesync64) -> framesync64;
}
extern "C" {
    pub fn framesync64_destroy(_q: framesync64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_print(_q: framesync64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_reset(_q: framesync64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_set_callback(
        _q: framesync64,
        _callback: framesync_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_set_userdata(
        _q: framesync64,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_execute(
        _q: framesync64,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_debug_enable(_q: framesync64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_debug_disable(_q: framesync64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_debug_print(
        _q: framesync64,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_set_prefix(
        _q: framesync64,
        _prefix: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_get_prefix(_q: framesync64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn framesync64_get_num_files_exported(_q: framesync64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn framesync64_get_filename(_q: framesync64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn framesync64_get_threshold(_q: framesync64) -> f32;
}
extern "C" {
    pub fn framesync64_set_threshold(_q: framesync64, _threshold: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_reset_framedatastats(_q: framesync64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn framesync64_get_framedatastats(_q: framesync64) -> framedatastats_s;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flexframegenprops_s {
    pub check: ::std::os::raw::c_uint,
    pub fec0: ::std::os::raw::c_uint,
    pub fec1: ::std::os::raw::c_uint,
    pub mod_scheme: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_flexframegenprops_s() {
    assert_eq!(
        ::std::mem::size_of::<flexframegenprops_s>(),
        16usize,
        concat!("Size of: ", stringify!(flexframegenprops_s))
    );
    assert_eq!(
        ::std::mem::align_of::<flexframegenprops_s>(),
        4usize,
        concat!("Alignment of ", stringify!(flexframegenprops_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flexframegenprops_s>())).check as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flexframegenprops_s),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flexframegenprops_s>())).fec0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(flexframegenprops_s),
            "::",
            stringify!(fec0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flexframegenprops_s>())).fec1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flexframegenprops_s),
            "::",
            stringify!(fec1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flexframegenprops_s>())).mod_scheme as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(flexframegenprops_s),
            "::",
            stringify!(mod_scheme)
        )
    );
}
extern "C" {
    pub fn flexframegenprops_init_default(
        _fgprops: *mut flexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flexframegen_s {
    _unused: [u8; 0],
}
pub type flexframegen = *mut flexframegen_s;
extern "C" {
    pub fn flexframegen_create(_props: *mut flexframegenprops_s) -> flexframegen;
}
extern "C" {
    pub fn flexframegen_destroy(_q: flexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_print(_q: flexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_reset(_q: flexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_is_assembled(_q: flexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_getprops(
        _q: flexframegen,
        _props: *mut flexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_setprops(
        _q: flexframegen,
        _props: *mut flexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_set_header_len(
        _q: flexframegen,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_set_header_props(
        _q: flexframegen,
        _props: *mut flexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_getframelen(_q: flexframegen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn flexframegen_assemble(
        _q: flexframegen,
        _header: *const ::std::os::raw::c_uchar,
        _payload: *const ::std::os::raw::c_uchar,
        _payload_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframegen_write_samples(
        _q: flexframegen,
        _buffer: *mut liquid_float_complex,
        _buffer_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flexframesync_s {
    _unused: [u8; 0],
}
pub type flexframesync = *mut flexframesync_s;
extern "C" {
    pub fn flexframesync_create(
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> flexframesync;
}
extern "C" {
    pub fn flexframesync_destroy(_q: flexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_print(_q: flexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_reset(_q: flexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_is_frame_open(_q: flexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_set_header_len(
        _q: flexframesync,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_decode_header_soft(
        _q: flexframesync,
        _soft: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_decode_payload_soft(
        _q: flexframesync,
        _soft: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_set_header_props(
        _q: flexframesync,
        _props: *mut flexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_execute(
        _q: flexframesync,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_reset_framedatastats(_q: flexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_get_framedatastats(_q: flexframesync) -> framedatastats_s;
}
extern "C" {
    pub fn flexframesync_debug_enable(_q: flexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_debug_disable(_q: flexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flexframesync_debug_print(
        _q: flexframesync,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpacketgen_s {
    _unused: [u8; 0],
}
pub type bpacketgen = *mut bpacketgen_s;
extern "C" {
    pub fn bpacketgen_create(
        _m: ::std::os::raw::c_uint,
        _dec_msg_len: ::std::os::raw::c_uint,
        _crc: ::std::os::raw::c_int,
        _fec0: ::std::os::raw::c_int,
        _fec1: ::std::os::raw::c_int,
    ) -> bpacketgen;
}
extern "C" {
    pub fn bpacketgen_recreate(
        _q: bpacketgen,
        _m: ::std::os::raw::c_uint,
        _dec_msg_len: ::std::os::raw::c_uint,
        _crc: ::std::os::raw::c_int,
        _fec0: ::std::os::raw::c_int,
        _fec1: ::std::os::raw::c_int,
    ) -> bpacketgen;
}
extern "C" {
    pub fn bpacketgen_destroy(_q: bpacketgen);
}
extern "C" {
    pub fn bpacketgen_print(_q: bpacketgen);
}
extern "C" {
    pub fn bpacketgen_get_packet_len(_q: bpacketgen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn bpacketgen_encode(
        _q: bpacketgen,
        _msg_dec: *mut ::std::os::raw::c_uchar,
        _packet: *mut ::std::os::raw::c_uchar,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpacketsync_s {
    _unused: [u8; 0],
}
pub type bpacketsync = *mut bpacketsync_s;
pub type bpacketsync_callback = ::std::option::Option<
    unsafe extern "C" fn(
        _payload: *mut ::std::os::raw::c_uchar,
        _payload_valid: ::std::os::raw::c_int,
        _payload_len: ::std::os::raw::c_uint,
        _stats: framesyncstats_s,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bpacketsync_create(
        _m: ::std::os::raw::c_uint,
        _callback: bpacketsync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> bpacketsync;
}
extern "C" {
    pub fn bpacketsync_destroy(_q: bpacketsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpacketsync_print(_q: bpacketsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpacketsync_reset(_q: bpacketsync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpacketsync_execute(
        _q: bpacketsync,
        _bytes: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpacketsync_execute_byte(
        _q: bpacketsync,
        _byte: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpacketsync_execute_sym(
        _q: bpacketsync,
        _sym: ::std::os::raw::c_uchar,
        _bps: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpacketsync_execute_bit(
        _q: bpacketsync,
        _bit: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fskframegen_s {
    _unused: [u8; 0],
}
pub type fskframegen = *mut fskframegen_s;
extern "C" {
    pub fn fskframegen_create() -> fskframegen;
}
extern "C" {
    pub fn fskframegen_destroy(_fg: fskframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframegen_print(_fg: fskframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframegen_reset(_fg: fskframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframegen_assemble(
        _fg: fskframegen,
        _header: *mut ::std::os::raw::c_uchar,
        _payload: *mut ::std::os::raw::c_uchar,
        _payload_len: ::std::os::raw::c_uint,
        _check: crc_scheme,
        _fec0: fec_scheme,
        _fec1: fec_scheme,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframegen_getframelen(_q: fskframegen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fskframegen_write_samples(
        _fg: fskframegen,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fskframesync_s {
    _unused: [u8; 0],
}
pub type fskframesync = *mut fskframesync_s;
extern "C" {
    pub fn fskframesync_create(
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> fskframesync;
}
extern "C" {
    pub fn fskframesync_destroy(_q: fskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframesync_print(_q: fskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframesync_reset(_q: fskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframesync_execute(
        _q: fskframesync,
        _x: liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframesync_execute_block(
        _q: fskframesync,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframesync_debug_enable(_q: fskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframesync_debug_disable(_q: fskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskframesync_debug_export(
        _q: fskframesync,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmskframegen_s {
    _unused: [u8; 0],
}
pub type gmskframegen = *mut gmskframegen_s;
extern "C" {
    pub fn gmskframegen_create_set(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _BT: f32,
    ) -> gmskframegen;
}
extern "C" {
    pub fn gmskframegen_create() -> gmskframegen;
}
extern "C" {
    pub fn gmskframegen_destroy(_q: gmskframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_is_assembled(_q: gmskframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_print(_q: gmskframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_set_header_len(
        _q: gmskframegen,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_reset(_q: gmskframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_assemble(
        _q: gmskframegen,
        _header: *const ::std::os::raw::c_uchar,
        _payload: *const ::std::os::raw::c_uchar,
        _payload_len: ::std::os::raw::c_uint,
        _check: crc_scheme,
        _fec0: fec_scheme,
        _fec1: fec_scheme,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_assemble_default(
        _q: gmskframegen,
        _payload_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_getframelen(_q: gmskframegen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gmskframegen_write(
        _q: gmskframegen,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframegen_write_samples(
        _q: gmskframegen,
        _buf: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmskframesync_s {
    _unused: [u8; 0],
}
pub type gmskframesync = *mut gmskframesync_s;
extern "C" {
    pub fn gmskframesync_create_set(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _BT: f32,
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> gmskframesync;
}
extern "C" {
    pub fn gmskframesync_create(
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> gmskframesync;
}
extern "C" {
    pub fn gmskframesync_destroy(_q: gmskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_print(_q: gmskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_set_header_len(
        _q: gmskframesync,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_reset(_q: gmskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_is_frame_open(_q: gmskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_execute(
        _q: gmskframesync,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_reset_framedatastats(_q: gmskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_get_framedatastats(_q: gmskframesync) -> framedatastats_s;
}
extern "C" {
    pub fn gmskframesync_debug_enable(_q: gmskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_debug_disable(_q: gmskframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskframesync_debug_print(
        _q: gmskframesync,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dsssframegenprops_s {
    pub check: ::std::os::raw::c_uint,
    pub fec0: ::std::os::raw::c_uint,
    pub fec1: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_dsssframegenprops_s() {
    assert_eq!(
        ::std::mem::size_of::<dsssframegenprops_s>(),
        12usize,
        concat!("Size of: ", stringify!(dsssframegenprops_s))
    );
    assert_eq!(
        ::std::mem::align_of::<dsssframegenprops_s>(),
        4usize,
        concat!("Alignment of ", stringify!(dsssframegenprops_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsssframegenprops_s>())).check as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dsssframegenprops_s),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsssframegenprops_s>())).fec0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dsssframegenprops_s),
            "::",
            stringify!(fec0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dsssframegenprops_s>())).fec1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dsssframegenprops_s),
            "::",
            stringify!(fec1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsssframegen_s {
    _unused: [u8; 0],
}
pub type dsssframegen = *mut dsssframegen_s;
extern "C" {
    pub fn dsssframegen_create(_props: *mut dsssframegenprops_s) -> dsssframegen;
}
extern "C" {
    pub fn dsssframegen_destroy(_q: dsssframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_reset(_q: dsssframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_is_assembled(_q: dsssframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_getprops(
        _q: dsssframegen,
        _props: *mut dsssframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_setprops(
        _q: dsssframegen,
        _props: *mut dsssframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_set_header_len(
        _q: dsssframegen,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_set_header_props(
        _q: dsssframegen,
        _props: *mut dsssframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_getframelen(_q: dsssframegen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dsssframegen_assemble(
        _q: dsssframegen,
        _header: *const ::std::os::raw::c_uchar,
        _payload: *const ::std::os::raw::c_uchar,
        _payload_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframegen_write_samples(
        _q: dsssframegen,
        _buffer: *mut liquid_float_complex,
        _buffer_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsssframesync_s {
    _unused: [u8; 0],
}
pub type dsssframesync = *mut dsssframesync_s;
extern "C" {
    pub fn dsssframesync_create(
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> dsssframesync;
}
extern "C" {
    pub fn dsssframesync_destroy(_q: dsssframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_print(_q: dsssframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_reset(_q: dsssframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_is_frame_open(_q: dsssframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_set_header_len(
        _q: dsssframesync,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_decode_header_soft(
        _q: dsssframesync,
        _soft: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_decode_payload_soft(
        _q: dsssframesync,
        _soft: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_set_header_props(
        _q: dsssframesync,
        _props: *mut dsssframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_execute(
        _q: dsssframesync,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_reset_framedatastats(_q: dsssframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_debug_enable(_q: dsssframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_debug_disable(_q: dsssframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_debug_print(
        _q: dsssframesync,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframesync_get_framedatastats(_q: dsssframesync) -> framedatastats_s;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsssframe64gen_s {
    _unused: [u8; 0],
}
pub type dsssframe64gen = *mut dsssframe64gen_s;
extern "C" {
    pub fn dsssframe64gen_create() -> dsssframe64gen;
}
extern "C" {
    pub fn dsssframe64gen_copy(q_orig: dsssframe64gen) -> dsssframe64gen;
}
extern "C" {
    pub fn dsssframe64gen_destroy(_q: dsssframe64gen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64gen_print(_q: dsssframe64gen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64gen_get_frame_len(_q: dsssframe64gen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dsssframe64gen_execute(
        _q: dsssframe64gen,
        _header: *const ::std::os::raw::c_uchar,
        _payload: *const ::std::os::raw::c_uchar,
        _buf: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsssframe64sync_s {
    _unused: [u8; 0],
}
pub type dsssframe64sync = *mut dsssframe64sync_s;
extern "C" {
    pub fn dsssframe64sync_create(
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> dsssframe64sync;
}
extern "C" {
    pub fn dsssframe64sync_copy(q_orig: dsssframe64sync) -> dsssframe64sync;
}
extern "C" {
    pub fn dsssframe64sync_destroy(_q: dsssframe64sync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_print(_q: dsssframe64sync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_reset(_q: dsssframe64sync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_is_frame_open(_q: dsssframe64sync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_set_callback(
        _q: dsssframe64sync,
        _callback: framesync_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_set_context(
        _q: dsssframe64sync,
        _context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_execute(
        _q: dsssframe64sync,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_get_threshold(_q: dsssframe64sync) -> f32;
}
extern "C" {
    pub fn dsssframe64sync_set_threshold(
        _q: dsssframe64sync,
        _threshold: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_get_range(_q: dsssframe64sync) -> f32;
}
extern "C" {
    pub fn dsssframe64sync_set_range(_q: dsssframe64sync, _dphi_max: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_reset_framedatastats(_q: dsssframe64sync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsssframe64sync_get_framedatastats(_q: dsssframe64sync) -> framedatastats_s;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ofdmflexframegenprops_s {
    pub check: ::std::os::raw::c_uint,
    pub fec0: ::std::os::raw::c_uint,
    pub fec1: ::std::os::raw::c_uint,
    pub mod_scheme: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ofdmflexframegenprops_s() {
    assert_eq!(
        ::std::mem::size_of::<ofdmflexframegenprops_s>(),
        16usize,
        concat!("Size of: ", stringify!(ofdmflexframegenprops_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ofdmflexframegenprops_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ofdmflexframegenprops_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ofdmflexframegenprops_s>())).check as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ofdmflexframegenprops_s),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ofdmflexframegenprops_s>())).fec0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ofdmflexframegenprops_s),
            "::",
            stringify!(fec0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ofdmflexframegenprops_s>())).fec1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ofdmflexframegenprops_s),
            "::",
            stringify!(fec1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ofdmflexframegenprops_s>())).mod_scheme as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ofdmflexframegenprops_s),
            "::",
            stringify!(mod_scheme)
        )
    );
}
extern "C" {
    pub fn ofdmflexframegenprops_init_default(
        _props: *mut ofdmflexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ofdmflexframegen_s {
    _unused: [u8; 0],
}
pub type ofdmflexframegen = *mut ofdmflexframegen_s;
extern "C" {
    pub fn ofdmflexframegen_create(
        _M: ::std::os::raw::c_uint,
        _cp_len: ::std::os::raw::c_uint,
        _taper_len: ::std::os::raw::c_uint,
        _p: *mut ::std::os::raw::c_uchar,
        _fgprops: *mut ofdmflexframegenprops_s,
    ) -> ofdmflexframegen;
}
extern "C" {
    pub fn ofdmflexframegen_destroy(_q: ofdmflexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_print(_q: ofdmflexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_reset(_q: ofdmflexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_is_assembled(_q: ofdmflexframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_getprops(
        _q: ofdmflexframegen,
        _props: *mut ofdmflexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_setprops(
        _q: ofdmflexframegen,
        _props: *mut ofdmflexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_set_header_len(
        _q: ofdmflexframegen,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_set_header_props(
        _q: ofdmflexframegen,
        _props: *mut ofdmflexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_getframelen(_q: ofdmflexframegen) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ofdmflexframegen_assemble(
        _q: ofdmflexframegen,
        _header: *const ::std::os::raw::c_uchar,
        _payload: *const ::std::os::raw::c_uchar,
        _payload_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframegen_write(
        _q: ofdmflexframegen,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ofdmflexframesync_s {
    _unused: [u8; 0],
}
pub type ofdmflexframesync = *mut ofdmflexframesync_s;
extern "C" {
    pub fn ofdmflexframesync_create(
        _M: ::std::os::raw::c_uint,
        _cp_len: ::std::os::raw::c_uint,
        _taper_len: ::std::os::raw::c_uint,
        _p: *mut ::std::os::raw::c_uchar,
        _callback: framesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> ofdmflexframesync;
}
extern "C" {
    pub fn ofdmflexframesync_destroy(_q: ofdmflexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_print(_q: ofdmflexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_set_header_len(
        _q: ofdmflexframesync,
        _len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_decode_header_soft(
        _q: ofdmflexframesync,
        _soft: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_decode_payload_soft(
        _q: ofdmflexframesync,
        _soft: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_set_header_props(
        _q: ofdmflexframesync,
        _props: *mut ofdmflexframegenprops_s,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_reset(_q: ofdmflexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_set_callback(
        _q: ofdmflexframesync,
        _callback: framesync_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_set_userdata(
        _q: ofdmflexframesync,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_is_frame_open(_q: ofdmflexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_execute(
        _q: ofdmflexframesync,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_get_rssi(_q: ofdmflexframesync) -> f32;
}
extern "C" {
    pub fn ofdmflexframesync_get_cfo(_q: ofdmflexframesync) -> f32;
}
extern "C" {
    pub fn ofdmflexframesync_reset_framedatastats(_q: ofdmflexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_get_framedatastats(_q: ofdmflexframesync) -> framedatastats_s;
}
extern "C" {
    pub fn ofdmflexframesync_set_cfo(_q: ofdmflexframesync, _cfo: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_debug_enable(_q: ofdmflexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_debug_disable(_q: ofdmflexframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmflexframesync_debug_print(
        _q: ofdmflexframesync,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bsync_rrrf_s {
    _unused: [u8; 0],
}
pub type bsync_rrrf = *mut bsync_rrrf_s;
extern "C" {
    pub fn bsync_rrrf_create(_n: ::std::os::raw::c_uint, _v: *mut f32) -> bsync_rrrf;
}
extern "C" {
    pub fn bsync_rrrf_create_msequence(
        _g: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
    ) -> bsync_rrrf;
}
extern "C" {
    pub fn bsync_rrrf_destroy(_q: bsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsync_rrrf_print(_q: bsync_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsync_rrrf_correlate(_q: bsync_rrrf, _x: f32, _y: *mut f32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bsync_crcf_s {
    _unused: [u8; 0],
}
pub type bsync_crcf = *mut bsync_crcf_s;
extern "C" {
    pub fn bsync_crcf_create(_n: ::std::os::raw::c_uint, _v: *mut f32) -> bsync_crcf;
}
extern "C" {
    pub fn bsync_crcf_create_msequence(
        _g: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
    ) -> bsync_crcf;
}
extern "C" {
    pub fn bsync_crcf_destroy(_q: bsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsync_crcf_print(_q: bsync_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsync_crcf_correlate(
        _q: bsync_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bsync_cccf_s {
    _unused: [u8; 0],
}
pub type bsync_cccf = *mut bsync_cccf_s;
extern "C" {
    pub fn bsync_cccf_create(
        _n: ::std::os::raw::c_uint,
        _v: *mut liquid_float_complex,
    ) -> bsync_cccf;
}
extern "C" {
    pub fn bsync_cccf_create_msequence(
        _g: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
    ) -> bsync_cccf;
}
extern "C" {
    pub fn bsync_cccf_destroy(_q: bsync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsync_cccf_print(_q: bsync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsync_cccf_correlate(
        _q: bsync_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct presync_cccf_s {
    _unused: [u8; 0],
}
pub type presync_cccf = *mut presync_cccf_s;
extern "C" {
    pub fn presync_cccf_create(
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _dphi_max: f32,
        _m: ::std::os::raw::c_uint,
    ) -> presync_cccf;
}
extern "C" {
    pub fn presync_cccf_destroy(_q: presync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn presync_cccf_print(_q: presync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn presync_cccf_reset(_q: presync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn presync_cccf_push(_q: presync_cccf, _x: liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn presync_cccf_execute(
        _q: presync_cccf,
        _rxy: *mut liquid_float_complex,
        _dphi_hat: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpresync_cccf_s {
    _unused: [u8; 0],
}
pub type bpresync_cccf = *mut bpresync_cccf_s;
extern "C" {
    pub fn bpresync_cccf_create(
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _dphi_max: f32,
        _m: ::std::os::raw::c_uint,
    ) -> bpresync_cccf;
}
extern "C" {
    pub fn bpresync_cccf_destroy(_q: bpresync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpresync_cccf_print(_q: bpresync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpresync_cccf_reset(_q: bpresync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpresync_cccf_push(_q: bpresync_cccf, _x: liquid_float_complex)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpresync_cccf_execute(
        _q: bpresync_cccf,
        _rxy: *mut liquid_float_complex,
        _dphi_hat: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qdetector_cccf_s {
    _unused: [u8; 0],
}
pub type qdetector_cccf = *mut qdetector_cccf_s;
extern "C" {
    pub fn qdetector_cccf_create(
        _s: *mut liquid_float_complex,
        _s_len: ::std::os::raw::c_uint,
    ) -> qdetector_cccf;
}
extern "C" {
    pub fn qdetector_cccf_create_linear(
        _sequence: *mut liquid_float_complex,
        _sequence_len: ::std::os::raw::c_uint,
        _ftype: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> qdetector_cccf;
}
extern "C" {
    pub fn qdetector_cccf_create_gmsk(
        _sequence: *mut ::std::os::raw::c_uchar,
        _sequence_len: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> qdetector_cccf;
}
extern "C" {
    pub fn qdetector_cccf_create_cpfsk(
        _sequence: *mut ::std::os::raw::c_uchar,
        _sequence_len: ::std::os::raw::c_uint,
        _bps: ::std::os::raw::c_uint,
        _h: f32,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _type: ::std::os::raw::c_int,
    ) -> qdetector_cccf;
}
extern "C" {
    pub fn qdetector_cccf_copy(_q: qdetector_cccf) -> qdetector_cccf;
}
extern "C" {
    pub fn qdetector_cccf_destroy(_q: qdetector_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdetector_cccf_reset(_q: qdetector_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdetector_cccf_print(_q: qdetector_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdetector_cccf_execute(
        _q: qdetector_cccf,
        _x: liquid_float_complex,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qdetector_cccf_get_threshold(_q: qdetector_cccf) -> f32;
}
extern "C" {
    pub fn qdetector_cccf_set_threshold(
        _q: qdetector_cccf,
        _threshold: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdetector_cccf_get_range(_q: qdetector_cccf) -> f32;
}
extern "C" {
    pub fn qdetector_cccf_set_range(_q: qdetector_cccf, _dphi_max: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdetector_cccf_get_seq_len(_q: qdetector_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qdetector_cccf_get_sequence(_q: qdetector_cccf) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn qdetector_cccf_get_buf_len(_q: qdetector_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qdetector_cccf_get_rxy(_q: qdetector_cccf) -> f32;
}
extern "C" {
    pub fn qdetector_cccf_get_tau(_q: qdetector_cccf) -> f32;
}
extern "C" {
    pub fn qdetector_cccf_get_gamma(_q: qdetector_cccf) -> f32;
}
extern "C" {
    pub fn qdetector_cccf_get_dphi(_q: qdetector_cccf) -> f32;
}
extern "C" {
    pub fn qdetector_cccf_get_phi(_q: qdetector_cccf) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qdsync_cccf_s {
    _unused: [u8; 0],
}
pub type qdsync_cccf = *mut qdsync_cccf_s;
pub type qdsync_cccf_callback = ::std::option::Option<
    unsafe extern "C" fn(
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
        _context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qdsync_cccf_create_linear(
        _s: *mut liquid_float_complex,
        _s_len: ::std::os::raw::c_uint,
        _ftype: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _callback: qdsync_cccf_callback,
        _context: *mut ::std::os::raw::c_void,
    ) -> qdsync_cccf;
}
extern "C" {
    pub fn qdsync_cccf_copy(_q: qdsync_cccf) -> qdsync_cccf;
}
extern "C" {
    pub fn qdsync_cccf_destroy(_q: qdsync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_reset(_q: qdsync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_print(_q: qdsync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_is_detected(_q: qdsync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_get_threshold(_q: qdsync_cccf) -> f32;
}
extern "C" {
    pub fn qdsync_cccf_set_threshold(_q: qdsync_cccf, _threshold: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_get_range(_q: qdsync_cccf) -> f32;
}
extern "C" {
    pub fn qdsync_cccf_set_range(_q: qdsync_cccf, _dphi_max: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_set_callback(
        _q: qdsync_cccf,
        _callback: qdsync_cccf_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_set_context(
        _q: qdsync_cccf,
        _context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_set_buf_len(
        _q: qdsync_cccf,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_execute(
        _q: qdsync_cccf,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_is_open(_q: qdsync_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qdsync_cccf_get_rxy(_q: qdsync_cccf) -> f32;
}
extern "C" {
    pub fn qdsync_cccf_get_tau(_q: qdsync_cccf) -> f32;
}
extern "C" {
    pub fn qdsync_cccf_get_gamma(_q: qdsync_cccf) -> f32;
}
extern "C" {
    pub fn qdsync_cccf_get_dphi(_q: qdsync_cccf) -> f32;
}
extern "C" {
    pub fn qdsync_cccf_get_phi(_q: qdsync_cccf) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct detector_cccf_s {
    _unused: [u8; 0],
}
pub type detector_cccf = *mut detector_cccf_s;
extern "C" {
    pub fn detector_cccf_create(
        _s: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _threshold: f32,
        _dphi_max: f32,
    ) -> detector_cccf;
}
extern "C" {
    pub fn detector_cccf_destroy(_q: detector_cccf);
}
extern "C" {
    pub fn detector_cccf_print(_q: detector_cccf);
}
extern "C" {
    pub fn detector_cccf_reset(_q: detector_cccf);
}
extern "C" {
    pub fn detector_cccf_correlate(
        _q: detector_cccf,
        _x: liquid_float_complex,
        _tau_hat: *mut f32,
        _dphi_hat: *mut f32,
        _gamma_hat: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symstreamcf_s {
    _unused: [u8; 0],
}
pub type symstreamcf = *mut symstreamcf_s;
extern "C" {
    pub fn symstreamcf_create() -> symstreamcf;
}
extern "C" {
    pub fn symstreamcf_create_linear(
        _ftype: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _ms: ::std::os::raw::c_int,
    ) -> symstreamcf;
}
extern "C" {
    pub fn symstreamcf_copy(_q: symstreamcf) -> symstreamcf;
}
extern "C" {
    pub fn symstreamcf_destroy(_q: symstreamcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamcf_print(_q: symstreamcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamcf_reset(_q: symstreamcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamcf_set_scheme(
        _q: symstreamcf,
        _ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamcf_get_ftype(_q: symstreamcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamcf_get_k(_q: symstreamcf) -> f32;
}
extern "C" {
    pub fn symstreamcf_get_m(_q: symstreamcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn symstreamcf_get_beta(_q: symstreamcf) -> f32;
}
extern "C" {
    pub fn symstreamcf_get_scheme(_q: symstreamcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamcf_set_gain(_q: symstreamcf, _gain: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamcf_get_gain(_q: symstreamcf) -> f32;
}
extern "C" {
    pub fn symstreamcf_get_delay(_q: symstreamcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn symstreamcf_write_samples(
        _q: symstreamcf,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symstreamrcf_s {
    _unused: [u8; 0],
}
pub type symstreamrcf = *mut symstreamrcf_s;
extern "C" {
    pub fn symstreamrcf_create() -> symstreamrcf;
}
extern "C" {
    pub fn symstreamrcf_create_linear(
        _ftype: ::std::os::raw::c_int,
        _bw: f32,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _ms: ::std::os::raw::c_int,
    ) -> symstreamrcf;
}
extern "C" {
    pub fn symstreamrcf_copy(_q: symstreamrcf) -> symstreamrcf;
}
extern "C" {
    pub fn symstreamrcf_destroy(_q: symstreamrcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamrcf_print(_q: symstreamrcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamrcf_reset(_q: symstreamrcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamrcf_get_ftype(_q: symstreamrcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamrcf_get_bw(_q: symstreamrcf) -> f32;
}
extern "C" {
    pub fn symstreamrcf_get_m(_q: symstreamrcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn symstreamrcf_get_beta(_q: symstreamrcf) -> f32;
}
extern "C" {
    pub fn symstreamrcf_set_scheme(
        _q: symstreamrcf,
        _ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamrcf_get_scheme(_q: symstreamrcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamrcf_set_gain(_q: symstreamrcf, _gain: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symstreamrcf_get_gain(_q: symstreamrcf) -> f32;
}
extern "C" {
    pub fn symstreamrcf_get_delay(_q: symstreamrcf) -> f32;
}
extern "C" {
    pub fn symstreamrcf_write_samples(
        _q: symstreamrcf,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msourcecf_s {
    _unused: [u8; 0],
}
pub type msourcecf = *mut msourcecf_s;
extern "C" {
    pub fn msourcecf_create(
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> msourcecf;
}
extern "C" {
    pub fn msourcecf_copy(_q: msourcecf) -> msourcecf;
}
extern "C" {
    pub fn msourcecf_create_default() -> msourcecf;
}
extern "C" {
    pub fn msourcecf_destroy(_q: msourcecf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_print(_q: msourcecf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_reset(_q: msourcecf) -> ::std::os::raw::c_int;
}
pub type msourcecf_callback = ::std::option::Option<
    unsafe extern "C" fn(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn msourcecf_add_user(
        _q: msourcecf,
        _fc: f32,
        _bw: f32,
        _gain: f32,
        _userdata: *mut ::std::os::raw::c_void,
        _callback: msourcecf_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_add_tone(
        _q: msourcecf,
        _fc: f32,
        _bw: f32,
        _gain: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_add_chirp(
        _q: msourcecf,
        _fc: f32,
        _bw: f32,
        _gain: f32,
        _duration: f32,
        _negate: ::std::os::raw::c_int,
        _repeat: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_add_noise(
        _q: msourcecf,
        _fc: f32,
        _bw: f32,
        _gain: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_add_modem(
        _q: msourcecf,
        _fc: f32,
        _bw: f32,
        _gain: f32,
        _ms: ::std::os::raw::c_int,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_add_fsk(
        _q: msourcecf,
        _fc: f32,
        _bw: f32,
        _gain: f32,
        _m: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_add_gmsk(
        _q: msourcecf,
        _fc: f32,
        _bw: f32,
        _gain: f32,
        _m: ::std::os::raw::c_uint,
        _bt: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_remove(_q: msourcecf, _id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_enable(_q: msourcecf, _id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_disable(_q: msourcecf, _id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_get_num_samples(_q: msourcecf) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn msourcecf_get_num_samples_source(
        _q: msourcecf,
        _id: ::std::os::raw::c_int,
        _num_samples: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_set_gain(
        _q: msourcecf,
        _id: ::std::os::raw::c_int,
        _gain: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_get_gain(
        _q: msourcecf,
        _id: ::std::os::raw::c_int,
        _gain: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_set_frequency(
        _q: msourcecf,
        _id: ::std::os::raw::c_int,
        _dphi: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_get_frequency(
        _q: msourcecf,
        _id: ::std::os::raw::c_int,
        _dphi: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msourcecf_write_samples(
        _q: msourcecf,
        _buf: *mut liquid_float_complex,
        _buf_len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symtrack_rrrf_s {
    _unused: [u8; 0],
}
pub type symtrack_rrrf = *mut symtrack_rrrf_s;
extern "C" {
    pub fn symtrack_rrrf_create(
        _ftype: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _ms: ::std::os::raw::c_int,
    ) -> symtrack_rrrf;
}
extern "C" {
    pub fn symtrack_rrrf_create_default() -> symtrack_rrrf;
}
extern "C" {
    pub fn symtrack_rrrf_destroy(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_print(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_reset(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_get_ftype(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_get_k(_q: symtrack_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn symtrack_rrrf_get_m(_q: symtrack_rrrf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn symtrack_rrrf_get_beta(_q: symtrack_rrrf) -> f32;
}
extern "C" {
    pub fn symtrack_rrrf_get_modscheme(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_set_modscheme(
        _q: symtrack_rrrf,
        _ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_get_bandwidth(_q: symtrack_rrrf) -> f32;
}
extern "C" {
    pub fn symtrack_rrrf_set_bandwidth(_q: symtrack_rrrf, _bw: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_adjust_frequency(_q: symtrack_rrrf, _dphi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_adjust_phase(_q: symtrack_rrrf, _phi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_set_eq_cm(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_set_eq_dd(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_set_eq_off(_q: symtrack_rrrf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_execute(
        _q: symtrack_rrrf,
        _x: f32,
        _y: *mut f32,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_rrrf_execute_block(
        _q: symtrack_rrrf,
        _x: *mut f32,
        _nx: ::std::os::raw::c_uint,
        _y: *mut f32,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symtrack_cccf_s {
    _unused: [u8; 0],
}
pub type symtrack_cccf = *mut symtrack_cccf_s;
extern "C" {
    pub fn symtrack_cccf_create(
        _ftype: ::std::os::raw::c_int,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _ms: ::std::os::raw::c_int,
    ) -> symtrack_cccf;
}
extern "C" {
    pub fn symtrack_cccf_create_default() -> symtrack_cccf;
}
extern "C" {
    pub fn symtrack_cccf_destroy(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_print(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_reset(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_get_ftype(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_get_k(_q: symtrack_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn symtrack_cccf_get_m(_q: symtrack_cccf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn symtrack_cccf_get_beta(_q: symtrack_cccf) -> f32;
}
extern "C" {
    pub fn symtrack_cccf_get_modscheme(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_set_modscheme(
        _q: symtrack_cccf,
        _ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_get_bandwidth(_q: symtrack_cccf) -> f32;
}
extern "C" {
    pub fn symtrack_cccf_set_bandwidth(_q: symtrack_cccf, _bw: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_adjust_frequency(_q: symtrack_cccf, _dphi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_adjust_phase(_q: symtrack_cccf, _phi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_set_eq_cm(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_set_eq_dd(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_set_eq_off(_q: symtrack_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_execute(
        _q: symtrack_cccf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symtrack_cccf_execute_block(
        _q: symtrack_cccf,
        _x: *mut liquid_float_complex,
        _nx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ny: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_lngammaf(_z: f32) -> f32;
}
extern "C" {
    pub fn liquid_gammaf(_z: f32) -> f32;
}
extern "C" {
    pub fn liquid_lnlowergammaf(_z: f32, _alpha: f32) -> f32;
}
extern "C" {
    pub fn liquid_lnuppergammaf(_z: f32, _alpha: f32) -> f32;
}
extern "C" {
    pub fn liquid_lowergammaf(_z: f32, _alpha: f32) -> f32;
}
extern "C" {
    pub fn liquid_uppergammaf(_z: f32, _alpha: f32) -> f32;
}
extern "C" {
    pub fn liquid_factorialf(_n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_lnbesselif(_nu: f32, _z: f32) -> f32;
}
extern "C" {
    pub fn liquid_besselif(_nu: f32, _z: f32) -> f32;
}
extern "C" {
    pub fn liquid_besseli0f(_z: f32) -> f32;
}
extern "C" {
    pub fn liquid_besseljf(_nu: f32, _z: f32) -> f32;
}
extern "C" {
    pub fn liquid_besselj0f(_z: f32) -> f32;
}
extern "C" {
    pub fn liquid_Qf(_z: f32) -> f32;
}
extern "C" {
    pub fn liquid_MarcumQf(_M: ::std::os::raw::c_int, _alpha: f32, _beta: f32) -> f32;
}
extern "C" {
    pub fn liquid_MarcumQ1f(_alpha: f32, _beta: f32) -> f32;
}
extern "C" {
    pub fn sincf(_x: f32) -> f32;
}
extern "C" {
    pub fn liquid_nextpow2(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_nchoosek(_n: ::std::os::raw::c_uint, _k: ::std::os::raw::c_uint) -> f32;
}
pub const liquid_window_type_LIQUID_WINDOW_UNKNOWN: liquid_window_type = 0;
pub const liquid_window_type_LIQUID_WINDOW_HAMMING: liquid_window_type = 1;
pub const liquid_window_type_LIQUID_WINDOW_HANN: liquid_window_type = 2;
pub const liquid_window_type_LIQUID_WINDOW_BLACKMANHARRIS: liquid_window_type = 3;
pub const liquid_window_type_LIQUID_WINDOW_BLACKMANHARRIS7: liquid_window_type = 4;
pub const liquid_window_type_LIQUID_WINDOW_KAISER: liquid_window_type = 5;
pub const liquid_window_type_LIQUID_WINDOW_FLATTOP: liquid_window_type = 6;
pub const liquid_window_type_LIQUID_WINDOW_TRIANGULAR: liquid_window_type = 7;
pub const liquid_window_type_LIQUID_WINDOW_RCOSTAPER: liquid_window_type = 8;
pub const liquid_window_type_LIQUID_WINDOW_KBD: liquid_window_type = 9;
pub type liquid_window_type = ::std::os::raw::c_uint;
extern "C" {
    pub static mut liquid_window_str: [[*const ::std::os::raw::c_char; 2usize]; 10usize];
}
extern "C" {
    pub fn liquid_print_windows() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_getopt_str2window(_str: *const ::std::os::raw::c_char) -> liquid_window_type;
}
extern "C" {
    pub fn liquid_windowf(
        _type: liquid_window_type,
        _i: ::std::os::raw::c_uint,
        _wlen: ::std::os::raw::c_uint,
        _arg: f32,
    ) -> f32;
}
extern "C" {
    pub fn liquid_kaiser(
        _i: ::std::os::raw::c_uint,
        _wlen: ::std::os::raw::c_uint,
        _beta: f32,
    ) -> f32;
}
extern "C" {
    pub fn liquid_hamming(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_hann(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_blackmanharris(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_blackmanharris7(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint)
        -> f32;
}
extern "C" {
    pub fn liquid_flattop(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_triangular(
        _i: ::std::os::raw::c_uint,
        _wlen: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn liquid_rcostaper_window(
        _i: ::std::os::raw::c_uint,
        _wlen: ::std::os::raw::c_uint,
        _t: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn liquid_kbd(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint, _beta: f32)
        -> f32;
}
extern "C" {
    pub fn liquid_kbd_window(
        _wlen: ::std::os::raw::c_uint,
        _beta: f32,
        _w: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kaiser(
        _i: ::std::os::raw::c_uint,
        _wlen: ::std::os::raw::c_uint,
        _beta: f32,
        _dt: f32,
    ) -> f32;
}
extern "C" {
    pub fn hamming(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn hann(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn blackmanharris(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn blackmanharris7(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn flattop(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn triangular(
        _i: ::std::os::raw::c_uint,
        _wlen: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn liquid_rcostaper_windowf(
        _i: ::std::os::raw::c_uint,
        _wlen: ::std::os::raw::c_uint,
        _t: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn kbd(_i: ::std::os::raw::c_uint, _wlen: ::std::os::raw::c_uint, _beta: f32) -> f32;
}
extern "C" {
    pub fn kbd_window(
        _wlen: ::std::os::raw::c_uint,
        _beta: f32,
        _w: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_val(_p: *mut f64, _k: ::std::os::raw::c_uint, _x: f64) -> f64;
}
extern "C" {
    pub fn poly_fit(
        _x: *mut f64,
        _y: *mut f64,
        _n: ::std::os::raw::c_uint,
        _p: *mut f64,
        _k: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_fit_lagrange(
        _x: *mut f64,
        _y: *mut f64,
        _n: ::std::os::raw::c_uint,
        _p: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_interp_lagrange(
        _x: *mut f64,
        _y: *mut f64,
        _n: ::std::os::raw::c_uint,
        _x0: f64,
    ) -> f64;
}
extern "C" {
    pub fn poly_fit_lagrange_barycentric(
        _x: *mut f64,
        _n: ::std::os::raw::c_uint,
        _w: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_val_lagrange_barycentric(
        _x: *mut f64,
        _y: *mut f64,
        _w: *mut f64,
        _x0: f64,
        _n: ::std::os::raw::c_uint,
    ) -> f64;
}
extern "C" {
    pub fn poly_expandbinomial(_n: ::std::os::raw::c_uint, _p: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_expandbinomial_pm(
        _m: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _p: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_expandroots(
        _r: *mut f64,
        _n: ::std::os::raw::c_uint,
        _p: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_expandroots2(
        _a: *mut f64,
        _b: *mut f64,
        _n: ::std::os::raw::c_uint,
        _p: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_findroots(
        _poly: *mut f64,
        _n: ::std::os::raw::c_uint,
        _roots: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_findroots_durandkerner(
        _p: *mut f64,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_findroots_bairstow(
        _p: *mut f64,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly_mul(
        _a: *mut f64,
        _order_a: ::std::os::raw::c_uint,
        _b: *mut f64,
        _order_b: ::std::os::raw::c_uint,
        _c: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_val(_p: *mut f32, _k: ::std::os::raw::c_uint, _x: f32) -> f32;
}
extern "C" {
    pub fn polyf_fit(
        _x: *mut f32,
        _y: *mut f32,
        _n: ::std::os::raw::c_uint,
        _p: *mut f32,
        _k: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_fit_lagrange(
        _x: *mut f32,
        _y: *mut f32,
        _n: ::std::os::raw::c_uint,
        _p: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_interp_lagrange(
        _x: *mut f32,
        _y: *mut f32,
        _n: ::std::os::raw::c_uint,
        _x0: f32,
    ) -> f32;
}
extern "C" {
    pub fn polyf_fit_lagrange_barycentric(
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _w: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_val_lagrange_barycentric(
        _x: *mut f32,
        _y: *mut f32,
        _w: *mut f32,
        _x0: f32,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn polyf_expandbinomial(_n: ::std::os::raw::c_uint, _p: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_expandbinomial_pm(
        _m: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _p: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_expandroots(
        _r: *mut f32,
        _n: ::std::os::raw::c_uint,
        _p: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_expandroots2(
        _a: *mut f32,
        _b: *mut f32,
        _n: ::std::os::raw::c_uint,
        _p: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_findroots(
        _poly: *mut f32,
        _n: ::std::os::raw::c_uint,
        _roots: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_findroots_durandkerner(
        _p: *mut f32,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_findroots_bairstow(
        _p: *mut f32,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyf_mul(
        _a: *mut f32,
        _order_a: ::std::os::raw::c_uint,
        _b: *mut f32,
        _order_b: ::std::os::raw::c_uint,
        _c: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_val(
        _p: *mut liquid_double_complex,
        _k: ::std::os::raw::c_uint,
        _x: liquid_double_complex,
    ) -> liquid_double_complex;
}
extern "C" {
    pub fn polyc_fit(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_double_complex,
        _k: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_fit_lagrange(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_interp_lagrange(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _x0: liquid_double_complex,
    ) -> liquid_double_complex;
}
extern "C" {
    pub fn polyc_fit_lagrange_barycentric(
        _x: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _w: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_val_lagrange_barycentric(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _w: *mut liquid_double_complex,
        _x0: liquid_double_complex,
        _n: ::std::os::raw::c_uint,
    ) -> liquid_double_complex;
}
extern "C" {
    pub fn polyc_expandbinomial(
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_expandbinomial_pm(
        _m: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _p: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_expandroots(
        _r: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_expandroots2(
        _a: *mut liquid_double_complex,
        _b: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_findroots(
        _poly: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _roots: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_findroots_durandkerner(
        _p: *mut liquid_double_complex,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_findroots_bairstow(
        _p: *mut liquid_double_complex,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyc_mul(
        _a: *mut liquid_double_complex,
        _order_a: ::std::os::raw::c_uint,
        _b: *mut liquid_double_complex,
        _order_b: ::std::os::raw::c_uint,
        _c: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_val(
        _p: *mut liquid_float_complex,
        _k: ::std::os::raw::c_uint,
        _x: liquid_float_complex,
    ) -> liquid_float_complex;
}
extern "C" {
    pub fn polycf_fit(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_float_complex,
        _k: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_fit_lagrange(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_interp_lagrange(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _x0: liquid_float_complex,
    ) -> liquid_float_complex;
}
extern "C" {
    pub fn polycf_fit_lagrange_barycentric(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _w: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_val_lagrange_barycentric(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _w: *mut liquid_float_complex,
        _x0: liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> liquid_float_complex;
}
extern "C" {
    pub fn polycf_expandbinomial(
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_expandbinomial_pm(
        _m: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _p: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_expandroots(
        _r: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_expandroots2(
        _a: *mut liquid_float_complex,
        _b: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _p: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_findroots(
        _poly: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _roots: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_findroots_durandkerner(
        _p: *mut liquid_float_complex,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_findroots_bairstow(
        _p: *mut liquid_float_complex,
        _k: ::std::os::raw::c_uint,
        _roots: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polycf_mul(
        _a: *mut liquid_float_complex,
        _order_a: ::std::os::raw::c_uint,
        _b: *mut liquid_float_complex,
        _order_b: ::std::os::raw::c_uint,
        _c: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_is_prime(_n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_factor(
        _n: ::std::os::raw::c_uint,
        _factors: *mut ::std::os::raw::c_uint,
        _num_factors: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_unique_factor(
        _n: ::std::os::raw::c_uint,
        _factors: *mut ::std::os::raw::c_uint,
        _num_factors: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_gcd(
        _p: ::std::os::raw::c_uint,
        _q: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_modpow(
        _base: ::std::os::raw::c_uint,
        _exp: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_primitive_root(_n: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_primitive_root_prime(_n: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_totient(_n: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn matrixf_print(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_add(
        _x: *mut f32,
        _y: *mut f32,
        _z: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_sub(
        _x: *mut f32,
        _y: *mut f32,
        _z: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_pmul(
        _x: *mut f32,
        _y: *mut f32,
        _z: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_pdiv(
        _x: *mut f32,
        _y: *mut f32,
        _z: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_mul(
        _x: *mut f32,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut f32,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut f32,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_div(
        _x: *mut f32,
        _y: *mut f32,
        _z: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_det(_x: *mut f32, _r: ::std::os::raw::c_uint, _c: ::std::os::raw::c_uint)
        -> f32;
}
extern "C" {
    pub fn matrixf_trans(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_hermitian(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_mul_transpose(
        _x: *mut f32,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxT: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_transpose_mul(
        _x: *mut f32,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xTx: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_mul_hermitian(
        _x: *mut f32,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxH: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_hermitian_mul(
        _x: *mut f32,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xHx: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_aug(
        _x: *mut f32,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut f32,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut f32,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_inv(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_eye(_x: *mut f32, _n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_ones(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_zeros(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_gjelim(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_pivot(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _i: ::std::os::raw::c_uint,
        _j: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_swaprows(
        _x: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _r1: ::std::os::raw::c_uint,
        _r2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_linsolve(
        _A: *mut f32,
        _n: ::std::os::raw::c_uint,
        _b: *mut f32,
        _x: *mut f32,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_cgsolve(
        _A: *mut f32,
        _n: ::std::os::raw::c_uint,
        _b: *mut f32,
        _x: *mut f32,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_ludecomp_crout(
        _x: *mut f32,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut f32,
        _u: *mut f32,
        _p: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_ludecomp_doolittle(
        _x: *mut f32,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut f32,
        _u: *mut f32,
        _p: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_gramschmidt(
        _A: *mut f32,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _v: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_qrdecomp_gramschmidt(
        _a: *mut f32,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _q: *mut f32,
        _r: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixf_chol(
        _a: *mut f32,
        _n: ::std::os::raw::c_uint,
        _l: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_print(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_add(
        _x: *mut f64,
        _y: *mut f64,
        _z: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_sub(
        _x: *mut f64,
        _y: *mut f64,
        _z: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_pmul(
        _x: *mut f64,
        _y: *mut f64,
        _z: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_pdiv(
        _x: *mut f64,
        _y: *mut f64,
        _z: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_mul(
        _x: *mut f64,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut f64,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut f64,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_div(
        _x: *mut f64,
        _y: *mut f64,
        _z: *mut f64,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_det(_x: *mut f64, _r: ::std::os::raw::c_uint, _c: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn matrix_trans(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_hermitian(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_mul_transpose(
        _x: *mut f64,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxT: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_transpose_mul(
        _x: *mut f64,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xTx: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_mul_hermitian(
        _x: *mut f64,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxH: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_hermitian_mul(
        _x: *mut f64,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xHx: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_aug(
        _x: *mut f64,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut f64,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut f64,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_inv(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_eye(_x: *mut f64, _n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_ones(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_zeros(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_gjelim(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_pivot(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _i: ::std::os::raw::c_uint,
        _j: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_swaprows(
        _x: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _r1: ::std::os::raw::c_uint,
        _r2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_linsolve(
        _A: *mut f64,
        _n: ::std::os::raw::c_uint,
        _b: *mut f64,
        _x: *mut f64,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_cgsolve(
        _A: *mut f64,
        _n: ::std::os::raw::c_uint,
        _b: *mut f64,
        _x: *mut f64,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_ludecomp_crout(
        _x: *mut f64,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut f64,
        _u: *mut f64,
        _p: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_ludecomp_doolittle(
        _x: *mut f64,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut f64,
        _u: *mut f64,
        _p: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_gramschmidt(
        _A: *mut f64,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _v: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_qrdecomp_gramschmidt(
        _a: *mut f64,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _q: *mut f64,
        _r: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrix_chol(
        _a: *mut f64,
        _n: ::std::os::raw::c_uint,
        _l: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_print(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_add(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _z: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_sub(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _z: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_pmul(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _z: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_pdiv(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _z: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_mul(
        _x: *mut liquid_float_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut liquid_float_complex,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_div(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _z: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_det(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> liquid_float_complex;
}
extern "C" {
    pub fn matrixcf_trans(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_hermitian(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_mul_transpose(
        _x: *mut liquid_float_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxT: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_transpose_mul(
        _x: *mut liquid_float_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xTx: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_mul_hermitian(
        _x: *mut liquid_float_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxH: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_hermitian_mul(
        _x: *mut liquid_float_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xHx: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_aug(
        _x: *mut liquid_float_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut liquid_float_complex,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_inv(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_eye(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_ones(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_zeros(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_gjelim(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_pivot(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _i: ::std::os::raw::c_uint,
        _j: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_swaprows(
        _x: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _r1: ::std::os::raw::c_uint,
        _r2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_linsolve(
        _A: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _b: *mut liquid_float_complex,
        _x: *mut liquid_float_complex,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_cgsolve(
        _A: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _b: *mut liquid_float_complex,
        _x: *mut liquid_float_complex,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_ludecomp_crout(
        _x: *mut liquid_float_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut liquid_float_complex,
        _u: *mut liquid_float_complex,
        _p: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_ludecomp_doolittle(
        _x: *mut liquid_float_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut liquid_float_complex,
        _u: *mut liquid_float_complex,
        _p: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_gramschmidt(
        _A: *mut liquid_float_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _v: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_qrdecomp_gramschmidt(
        _a: *mut liquid_float_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _q: *mut liquid_float_complex,
        _r: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixcf_chol(
        _a: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _l: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_print(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_add(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _z: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_sub(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _z: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_pmul(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _z: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_pdiv(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _z: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_mul(
        _x: *mut liquid_double_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut liquid_double_complex,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut liquid_double_complex,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_div(
        _x: *mut liquid_double_complex,
        _y: *mut liquid_double_complex,
        _z: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_det(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> liquid_double_complex;
}
extern "C" {
    pub fn matrixc_trans(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_hermitian(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_mul_transpose(
        _x: *mut liquid_double_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxT: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_transpose_mul(
        _x: *mut liquid_double_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xTx: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_mul_hermitian(
        _x: *mut liquid_double_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xxH: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_hermitian_mul(
        _x: *mut liquid_double_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _xHx: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_aug(
        _x: *mut liquid_double_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _y: *mut liquid_double_complex,
        _ry: ::std::os::raw::c_uint,
        _cy: ::std::os::raw::c_uint,
        _z: *mut liquid_double_complex,
        _rz: ::std::os::raw::c_uint,
        _cz: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_inv(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_eye(
        _x: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_ones(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_zeros(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_gjelim(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_pivot(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _i: ::std::os::raw::c_uint,
        _j: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_swaprows(
        _x: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _r1: ::std::os::raw::c_uint,
        _r2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_linsolve(
        _A: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _b: *mut liquid_double_complex,
        _x: *mut liquid_double_complex,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_cgsolve(
        _A: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _b: *mut liquid_double_complex,
        _x: *mut liquid_double_complex,
        _opts: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_ludecomp_crout(
        _x: *mut liquid_double_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut liquid_double_complex,
        _u: *mut liquid_double_complex,
        _p: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_ludecomp_doolittle(
        _x: *mut liquid_double_complex,
        _rx: ::std::os::raw::c_uint,
        _cx: ::std::os::raw::c_uint,
        _l: *mut liquid_double_complex,
        _u: *mut liquid_double_complex,
        _p: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_gramschmidt(
        _A: *mut liquid_double_complex,
        _r: ::std::os::raw::c_uint,
        _c: ::std::os::raw::c_uint,
        _v: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_qrdecomp_gramschmidt(
        _a: *mut liquid_double_complex,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _q: *mut liquid_double_complex,
        _r: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn matrixc_chol(
        _a: *mut liquid_double_complex,
        _n: ::std::os::raw::c_uint,
        _l: *mut liquid_double_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smatrixb_s {
    _unused: [u8; 0],
}
pub type smatrixb = *mut smatrixb_s;
extern "C" {
    pub fn smatrixb_create(_m: ::std::os::raw::c_uint, _n: ::std::os::raw::c_uint) -> smatrixb;
}
extern "C" {
    pub fn smatrixb_create_array(
        _x: *mut ::std::os::raw::c_uchar,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> smatrixb;
}
extern "C" {
    pub fn smatrixb_destroy(_q: smatrixb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_print(_q: smatrixb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_print_expanded(_q: smatrixb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_size(
        _q: smatrixb,
        _m: *mut ::std::os::raw::c_uint,
        _n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_clear(_q: smatrixb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_reset(_q: smatrixb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_isset(
        _q: smatrixb,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_insert(
        _q: smatrixb,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _v: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_delete(
        _q: smatrixb,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_set(
        _q: smatrixb,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _v: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_get(
        _q: smatrixb,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn smatrixb_eye(_q: smatrixb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_mul(_x: smatrixb, _y: smatrixb, _z: smatrixb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_vmul(
        _q: smatrixb,
        _x: *mut ::std::os::raw::c_uchar,
        _y: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smatrixf_s {
    _unused: [u8; 0],
}
pub type smatrixf = *mut smatrixf_s;
extern "C" {
    pub fn smatrixf_create(_m: ::std::os::raw::c_uint, _n: ::std::os::raw::c_uint) -> smatrixf;
}
extern "C" {
    pub fn smatrixf_create_array(
        _x: *mut f32,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> smatrixf;
}
extern "C" {
    pub fn smatrixf_destroy(_q: smatrixf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_print(_q: smatrixf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_print_expanded(_q: smatrixf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_size(
        _q: smatrixf,
        _m: *mut ::std::os::raw::c_uint,
        _n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_clear(_q: smatrixf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_reset(_q: smatrixf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_isset(
        _q: smatrixf,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_insert(
        _q: smatrixf,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _v: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_delete(
        _q: smatrixf,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_set(
        _q: smatrixf,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _v: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_get(
        _q: smatrixf,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn smatrixf_eye(_q: smatrixf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_mul(_x: smatrixf, _y: smatrixf, _z: smatrixf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixf_vmul(_q: smatrixf, _x: *mut f32, _y: *mut f32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smatrixi_s {
    _unused: [u8; 0],
}
pub type smatrixi = *mut smatrixi_s;
extern "C" {
    pub fn smatrixi_create(_m: ::std::os::raw::c_uint, _n: ::std::os::raw::c_uint) -> smatrixi;
}
extern "C" {
    pub fn smatrixi_create_array(
        _x: *mut ::std::os::raw::c_short,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> smatrixi;
}
extern "C" {
    pub fn smatrixi_destroy(_q: smatrixi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_print(_q: smatrixi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_print_expanded(_q: smatrixi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_size(
        _q: smatrixi,
        _m: *mut ::std::os::raw::c_uint,
        _n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_clear(_q: smatrixi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_reset(_q: smatrixi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_isset(
        _q: smatrixi,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_insert(
        _q: smatrixi,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _v: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_delete(
        _q: smatrixi,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_set(
        _q: smatrixi,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
        _v: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_get(
        _q: smatrixi,
        _m: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn smatrixi_eye(_q: smatrixi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_mul(_x: smatrixi, _y: smatrixi, _z: smatrixi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixi_vmul(
        _q: smatrixi,
        _x: *mut ::std::os::raw::c_short,
        _y: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_mulf(
        _A: smatrixb,
        _x: *mut f32,
        _mx: ::std::os::raw::c_uint,
        _nx: ::std::os::raw::c_uint,
        _y: *mut f32,
        _my: ::std::os::raw::c_uint,
        _ny: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smatrixb_vmulf(_q: smatrixb, _x: *mut f32, _y: *mut f32) -> ::std::os::raw::c_int;
}
pub const modulation_scheme_LIQUID_MODEM_UNKNOWN: modulation_scheme = 0;
pub const modulation_scheme_LIQUID_MODEM_PSK2: modulation_scheme = 1;
pub const modulation_scheme_LIQUID_MODEM_PSK4: modulation_scheme = 2;
pub const modulation_scheme_LIQUID_MODEM_PSK8: modulation_scheme = 3;
pub const modulation_scheme_LIQUID_MODEM_PSK16: modulation_scheme = 4;
pub const modulation_scheme_LIQUID_MODEM_PSK32: modulation_scheme = 5;
pub const modulation_scheme_LIQUID_MODEM_PSK64: modulation_scheme = 6;
pub const modulation_scheme_LIQUID_MODEM_PSK128: modulation_scheme = 7;
pub const modulation_scheme_LIQUID_MODEM_PSK256: modulation_scheme = 8;
pub const modulation_scheme_LIQUID_MODEM_DPSK2: modulation_scheme = 9;
pub const modulation_scheme_LIQUID_MODEM_DPSK4: modulation_scheme = 10;
pub const modulation_scheme_LIQUID_MODEM_DPSK8: modulation_scheme = 11;
pub const modulation_scheme_LIQUID_MODEM_DPSK16: modulation_scheme = 12;
pub const modulation_scheme_LIQUID_MODEM_DPSK32: modulation_scheme = 13;
pub const modulation_scheme_LIQUID_MODEM_DPSK64: modulation_scheme = 14;
pub const modulation_scheme_LIQUID_MODEM_DPSK128: modulation_scheme = 15;
pub const modulation_scheme_LIQUID_MODEM_DPSK256: modulation_scheme = 16;
pub const modulation_scheme_LIQUID_MODEM_ASK2: modulation_scheme = 17;
pub const modulation_scheme_LIQUID_MODEM_ASK4: modulation_scheme = 18;
pub const modulation_scheme_LIQUID_MODEM_ASK8: modulation_scheme = 19;
pub const modulation_scheme_LIQUID_MODEM_ASK16: modulation_scheme = 20;
pub const modulation_scheme_LIQUID_MODEM_ASK32: modulation_scheme = 21;
pub const modulation_scheme_LIQUID_MODEM_ASK64: modulation_scheme = 22;
pub const modulation_scheme_LIQUID_MODEM_ASK128: modulation_scheme = 23;
pub const modulation_scheme_LIQUID_MODEM_ASK256: modulation_scheme = 24;
pub const modulation_scheme_LIQUID_MODEM_QAM4: modulation_scheme = 25;
pub const modulation_scheme_LIQUID_MODEM_QAM8: modulation_scheme = 26;
pub const modulation_scheme_LIQUID_MODEM_QAM16: modulation_scheme = 27;
pub const modulation_scheme_LIQUID_MODEM_QAM32: modulation_scheme = 28;
pub const modulation_scheme_LIQUID_MODEM_QAM64: modulation_scheme = 29;
pub const modulation_scheme_LIQUID_MODEM_QAM128: modulation_scheme = 30;
pub const modulation_scheme_LIQUID_MODEM_QAM256: modulation_scheme = 31;
pub const modulation_scheme_LIQUID_MODEM_APSK4: modulation_scheme = 32;
pub const modulation_scheme_LIQUID_MODEM_APSK8: modulation_scheme = 33;
pub const modulation_scheme_LIQUID_MODEM_APSK16: modulation_scheme = 34;
pub const modulation_scheme_LIQUID_MODEM_APSK32: modulation_scheme = 35;
pub const modulation_scheme_LIQUID_MODEM_APSK64: modulation_scheme = 36;
pub const modulation_scheme_LIQUID_MODEM_APSK128: modulation_scheme = 37;
pub const modulation_scheme_LIQUID_MODEM_APSK256: modulation_scheme = 38;
pub const modulation_scheme_LIQUID_MODEM_BPSK: modulation_scheme = 39;
pub const modulation_scheme_LIQUID_MODEM_QPSK: modulation_scheme = 40;
pub const modulation_scheme_LIQUID_MODEM_OOK: modulation_scheme = 41;
pub const modulation_scheme_LIQUID_MODEM_SQAM32: modulation_scheme = 42;
pub const modulation_scheme_LIQUID_MODEM_SQAM128: modulation_scheme = 43;
pub const modulation_scheme_LIQUID_MODEM_V29: modulation_scheme = 44;
pub const modulation_scheme_LIQUID_MODEM_ARB16OPT: modulation_scheme = 45;
pub const modulation_scheme_LIQUID_MODEM_ARB32OPT: modulation_scheme = 46;
pub const modulation_scheme_LIQUID_MODEM_ARB64OPT: modulation_scheme = 47;
pub const modulation_scheme_LIQUID_MODEM_ARB128OPT: modulation_scheme = 48;
pub const modulation_scheme_LIQUID_MODEM_ARB256OPT: modulation_scheme = 49;
pub const modulation_scheme_LIQUID_MODEM_ARB64VT: modulation_scheme = 50;
pub const modulation_scheme_LIQUID_MODEM_PI4DQPSK: modulation_scheme = 51;
pub const modulation_scheme_LIQUID_MODEM_ARB: modulation_scheme = 52;
pub type modulation_scheme = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modulation_type_s {
    pub name: *const ::std::os::raw::c_char,
    pub fullname: *const ::std::os::raw::c_char,
    pub scheme: modulation_scheme,
    pub bps: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_modulation_type_s() {
    assert_eq!(
        ::std::mem::size_of::<modulation_type_s>(),
        24usize,
        concat!("Size of: ", stringify!(modulation_type_s))
    );
    assert_eq!(
        ::std::mem::align_of::<modulation_type_s>(),
        8usize,
        concat!("Alignment of ", stringify!(modulation_type_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<modulation_type_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(modulation_type_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<modulation_type_s>())).fullname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(modulation_type_s),
            "::",
            stringify!(fullname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<modulation_type_s>())).scheme as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(modulation_type_s),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<modulation_type_s>())).bps as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(modulation_type_s),
            "::",
            stringify!(bps)
        )
    );
}
impl Default for modulation_type_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static modulation_types: [modulation_type_s; 53usize];
}
extern "C" {
    pub fn liquid_print_modulation_schemes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_getopt_str2mod(_str: *const ::std::os::raw::c_char) -> modulation_scheme;
}
extern "C" {
    pub fn liquid_modem_is_psk(_ms: modulation_scheme) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_modem_is_dpsk(_ms: modulation_scheme) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_modem_is_ask(_ms: modulation_scheme) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_modem_is_qam(_ms: modulation_scheme) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_modem_is_apsk(_ms: modulation_scheme) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn count_bit_errors(
        _s1: ::std::os::raw::c_uint,
        _s2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn count_bit_errors_array(
        _msg0: *mut ::std::os::raw::c_uchar,
        _msg1: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gray_encode(symbol_in: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gray_decode(symbol_in: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_pack_soft_bits(
        _soft_bits: *mut ::std::os::raw::c_uchar,
        _bps: ::std::os::raw::c_uint,
        _sym_out: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_unpack_soft_bits(
        _sym_in: ::std::os::raw::c_uint,
        _bps: ::std::os::raw::c_uint,
        _soft_bits: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modemcf_s {
    _unused: [u8; 0],
}
pub type modemcf = *mut modemcf_s;
pub type modem = *mut modemcf_s;
extern "C" {
    pub fn modemcf_create(_scheme: modulation_scheme) -> modemcf;
}
extern "C" {
    pub fn modemcf_create_arbitrary(
        _table: *mut liquid_float_complex,
        _M: ::std::os::raw::c_uint,
    ) -> modemcf;
}
extern "C" {
    pub fn modemcf_recreate(_q: modemcf, _scheme: modulation_scheme) -> modemcf;
}
extern "C" {
    pub fn modemcf_copy(_q: modemcf) -> modemcf;
}
extern "C" {
    pub fn modemcf_destroy(_q: modemcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modemcf_print(_q: modemcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modemcf_reset(_q: modemcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modemcf_gen_rand_sym(_q: modemcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn modemcf_get_bps(_q: modemcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn modemcf_get_scheme(_q: modemcf) -> modulation_scheme;
}
extern "C" {
    pub fn modemcf_modulate(
        _q: modemcf,
        _s: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modemcf_demodulate(
        _q: modemcf,
        _x: liquid_float_complex,
        _s: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modemcf_demodulate_soft(
        _q: modemcf,
        _x: liquid_float_complex,
        _s: *mut ::std::os::raw::c_uint,
        _soft_bits: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modemcf_get_demodulator_sample(
        _q: modemcf,
        _x_hat: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modemcf_get_demodulator_phase_error(_q: modemcf) -> f32;
}
extern "C" {
    pub fn modemcf_get_demodulator_evm(_q: modemcf) -> f32;
}
extern "C" {
    pub fn modem_create(_scheme: modulation_scheme) -> modem;
}
extern "C" {
    pub fn modem_create_arbitrary(
        _table: *mut liquid_float_complex,
        _M: ::std::os::raw::c_uint,
    ) -> modem;
}
extern "C" {
    pub fn modem_recreate(_q: modem, _scheme: modulation_scheme) -> modem;
}
extern "C" {
    pub fn modem_copy(_q: modem) -> modem;
}
extern "C" {
    pub fn modem_destroy(_q: modem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_print(_q: modem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_reset(_q: modem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_gen_rand_sym(_q: modem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn modem_get_bps(_q: modem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn modem_get_scheme(_q: modem) -> modulation_scheme;
}
extern "C" {
    pub fn modem_modulate(
        _q: modem,
        _s: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_demodulate(
        _q: modem,
        _x: liquid_float_complex,
        _s: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_demodulate_soft(
        _q: modem,
        _x: liquid_float_complex,
        _s: *mut ::std::os::raw::c_uint,
        _soft_bits: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_get_demodulator_sample(
        _q: modem,
        _x_hat: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modem_get_demodulator_phase_error(_q: modem) -> f32;
}
extern "C" {
    pub fn modem_get_demodulator_evm(_q: modem) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmskmod_s {
    _unused: [u8; 0],
}
pub type gmskmod = *mut gmskmod_s;
extern "C" {
    pub fn gmskmod_create(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _BT: f32,
    ) -> gmskmod;
}
extern "C" {
    pub fn gmskmod_copy(_q: gmskmod) -> gmskmod;
}
extern "C" {
    pub fn gmskmod_destroy(_q: gmskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskmod_print(_q: gmskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskmod_reset(_q: gmskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskmod_modulate(
        _q: gmskmod,
        _sym: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmskdem_s {
    _unused: [u8; 0],
}
pub type gmskdem = *mut gmskdem_s;
extern "C" {
    pub fn gmskdem_create(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _BT: f32,
    ) -> gmskdem;
}
extern "C" {
    pub fn gmskdem_copy(_q: gmskdem) -> gmskdem;
}
extern "C" {
    pub fn gmskdem_destroy(_q: gmskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskdem_print(_q: gmskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskdem_reset(_q: gmskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskdem_set_eq_bw(_q: gmskdem, _bw: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmskdem_demodulate(
        _q: gmskdem,
        _y: *mut liquid_float_complex,
        _sym: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const liquid_cpfsk_filter_LIQUID_CPFSK_SQUARE: liquid_cpfsk_filter = 0;
pub const liquid_cpfsk_filter_LIQUID_CPFSK_RCOS_FULL: liquid_cpfsk_filter = 1;
pub const liquid_cpfsk_filter_LIQUID_CPFSK_RCOS_PARTIAL: liquid_cpfsk_filter = 2;
pub const liquid_cpfsk_filter_LIQUID_CPFSK_GMSK: liquid_cpfsk_filter = 3;
pub type liquid_cpfsk_filter = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpfskmod_s {
    _unused: [u8; 0],
}
pub type cpfskmod = *mut cpfskmod_s;
extern "C" {
    pub fn cpfskmod_create(
        _bps: ::std::os::raw::c_uint,
        _h: f32,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _type: ::std::os::raw::c_int,
    ) -> cpfskmod;
}
extern "C" {
    pub fn cpfskmod_create_msk(_k: ::std::os::raw::c_uint) -> cpfskmod;
}
extern "C" {
    pub fn cpfskmod_create_gmsk(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _BT: f32,
    ) -> cpfskmod;
}
extern "C" {
    pub fn cpfskmod_copy(_q: cpfskmod) -> cpfskmod;
}
extern "C" {
    pub fn cpfskmod_destroy(_q: cpfskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskmod_print(_q: cpfskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskmod_reset(_q: cpfskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskmod_get_bits_per_symbol(_q: cpfskmod) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpfskmod_get_modulation_index(_q: cpfskmod) -> f32;
}
extern "C" {
    pub fn cpfskmod_get_samples_per_symbol(_q: cpfskmod) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpfskmod_get_delay(_q: cpfskmod) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpfskmod_get_beta(_q: cpfskmod) -> f32;
}
extern "C" {
    pub fn cpfskmod_get_type(_q: cpfskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskmod_modulate(
        _q: cpfskmod,
        _s: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpfskdem_s {
    _unused: [u8; 0],
}
pub type cpfskdem = *mut cpfskdem_s;
extern "C" {
    pub fn cpfskdem_create(
        _bps: ::std::os::raw::c_uint,
        _h: f32,
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _type: ::std::os::raw::c_int,
    ) -> cpfskdem;
}
extern "C" {
    pub fn cpfskdem_create_msk(_k: ::std::os::raw::c_uint) -> cpfskdem;
}
extern "C" {
    pub fn cpfskdem_create_gmsk(
        _k: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _BT: f32,
    ) -> cpfskdem;
}
extern "C" {
    pub fn cpfskdem_copy(_q: cpfskdem) -> cpfskdem;
}
extern "C" {
    pub fn cpfskdem_destroy(_q: cpfskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskdem_print(_q: cpfskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskdem_reset(_q: cpfskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskdem_get_bits_per_symbol(_q: cpfskdem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpfskdem_get_modulation_index(_q: cpfskdem) -> f32;
}
extern "C" {
    pub fn cpfskdem_get_samples_per_symbol(_q: cpfskdem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpfskdem_get_delay(_q: cpfskdem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpfskdem_get_beta(_q: cpfskdem) -> f32;
}
extern "C" {
    pub fn cpfskdem_get_type(_q: cpfskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpfskdem_demodulate(
        _q: cpfskdem,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fskmod_s {
    _unused: [u8; 0],
}
pub type fskmod = *mut fskmod_s;
extern "C" {
    pub fn fskmod_create(
        _m: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _bandwidth: f32,
    ) -> fskmod;
}
extern "C" {
    pub fn fskmod_copy(_q: fskmod) -> fskmod;
}
extern "C" {
    pub fn fskmod_destroy(_q: fskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskmod_print(_q: fskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskmod_reset(_q: fskmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskmod_modulate(
        _q: fskmod,
        _s: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fskdem_s {
    _unused: [u8; 0],
}
pub type fskdem = *mut fskdem_s;
extern "C" {
    pub fn fskdem_create(
        _m: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _bandwidth: f32,
    ) -> fskdem;
}
extern "C" {
    pub fn fskdem_copy(_q: fskdem) -> fskdem;
}
extern "C" {
    pub fn fskdem_destroy(_q: fskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskdem_print(_q: fskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskdem_reset(_q: fskdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fskdem_demodulate(_q: fskdem, _y: *mut liquid_float_complex) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fskdem_get_frequency_error(_q: fskdem) -> f32;
}
extern "C" {
    pub fn fskdem_get_symbol_energy(
        _q: fskdem,
        _s: ::std::os::raw::c_uint,
        _range: ::std::os::raw::c_uint,
    ) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct freqmod_s {
    _unused: [u8; 0],
}
pub type freqmod = *mut freqmod_s;
extern "C" {
    pub fn freqmod_create(_kf: f32) -> freqmod;
}
extern "C" {
    pub fn freqmod_destroy(_q: freqmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqmod_print(_q: freqmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqmod_reset(_q: freqmod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqmod_modulate(
        _q: freqmod,
        _m: f32,
        _s: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqmod_modulate_block(
        _q: freqmod,
        _m: *mut f32,
        _n: ::std::os::raw::c_uint,
        _s: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct freqdem_s {
    _unused: [u8; 0],
}
pub type freqdem = *mut freqdem_s;
extern "C" {
    pub fn freqdem_create(_kf: f32) -> freqdem;
}
extern "C" {
    pub fn freqdem_destroy(_q: freqdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqdem_print(_q: freqdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqdem_reset(_q: freqdem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqdem_demodulate(
        _q: freqdem,
        _r: liquid_float_complex,
        _m: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freqdem_demodulate_block(
        _q: freqdem,
        _r: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _m: *mut f32,
    ) -> ::std::os::raw::c_int;
}
pub const liquid_ampmodem_type_LIQUID_AMPMODEM_DSB: liquid_ampmodem_type = 0;
pub const liquid_ampmodem_type_LIQUID_AMPMODEM_USB: liquid_ampmodem_type = 1;
pub const liquid_ampmodem_type_LIQUID_AMPMODEM_LSB: liquid_ampmodem_type = 2;
pub type liquid_ampmodem_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ampmodem_s {
    _unused: [u8; 0],
}
pub type ampmodem = *mut ampmodem_s;
extern "C" {
    pub fn ampmodem_create(
        _mod_index: f32,
        _type: liquid_ampmodem_type,
        _suppressed_carrier: ::std::os::raw::c_int,
    ) -> ampmodem;
}
extern "C" {
    pub fn ampmodem_destroy(_q: ampmodem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ampmodem_print(_q: ampmodem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ampmodem_reset(_q: ampmodem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ampmodem_get_delay_mod(_q: ampmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ampmodem_get_delay_demod(_q: ampmodem) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ampmodem_modulate(
        _q: ampmodem,
        _x: f32,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ampmodem_modulate_block(
        _q: ampmodem,
        _m: *mut f32,
        _n: ::std::os::raw::c_uint,
        _s: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ampmodem_demodulate(
        _q: ampmodem,
        _y: liquid_float_complex,
        _x: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ampmodem_demodulate_block(
        _q: ampmodem,
        _r: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _m: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firpfbch_crcf_s {
    _unused: [u8; 0],
}
pub type firpfbch_crcf = *mut firpfbch_crcf_s;
extern "C" {
    pub fn firpfbch_crcf_create(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _p: ::std::os::raw::c_uint,
        _h: *mut f32,
    ) -> firpfbch_crcf;
}
extern "C" {
    pub fn firpfbch_crcf_create_kaiser(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _As: f32,
    ) -> firpfbch_crcf;
}
extern "C" {
    pub fn firpfbch_crcf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _ftype: ::std::os::raw::c_int,
    ) -> firpfbch_crcf;
}
extern "C" {
    pub fn firpfbch_crcf_destroy(_q: firpfbch_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_crcf_reset(_q: firpfbch_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_crcf_print(_q: firpfbch_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_crcf_synthesizer_execute(
        _q: firpfbch_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_crcf_analyzer_execute(
        _q: firpfbch_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firpfbch_cccf_s {
    _unused: [u8; 0],
}
pub type firpfbch_cccf = *mut firpfbch_cccf_s;
extern "C" {
    pub fn firpfbch_cccf_create(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _p: ::std::os::raw::c_uint,
        _h: *mut liquid_float_complex,
    ) -> firpfbch_cccf;
}
extern "C" {
    pub fn firpfbch_cccf_create_kaiser(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _As: f32,
    ) -> firpfbch_cccf;
}
extern "C" {
    pub fn firpfbch_cccf_create_rnyquist(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _beta: f32,
        _ftype: ::std::os::raw::c_int,
    ) -> firpfbch_cccf;
}
extern "C" {
    pub fn firpfbch_cccf_destroy(_q: firpfbch_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_cccf_reset(_q: firpfbch_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_cccf_print(_q: firpfbch_cccf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_cccf_synthesizer_execute(
        _q: firpfbch_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch_cccf_analyzer_execute(
        _q: firpfbch_cccf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firpfbch2_crcf_s {
    _unused: [u8; 0],
}
pub type firpfbch2_crcf = *mut firpfbch2_crcf_s;
extern "C" {
    pub fn firpfbch2_crcf_create(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _h: *mut f32,
    ) -> firpfbch2_crcf;
}
extern "C" {
    pub fn firpfbch2_crcf_create_kaiser(
        _type: ::std::os::raw::c_int,
        _M: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _As: f32,
    ) -> firpfbch2_crcf;
}
extern "C" {
    pub fn firpfbch2_crcf_copy(_q: firpfbch2_crcf) -> firpfbch2_crcf;
}
extern "C" {
    pub fn firpfbch2_crcf_destroy(_q: firpfbch2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch2_crcf_reset(_q: firpfbch2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch2_crcf_print(_q: firpfbch2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch2_crcf_get_type(_q: firpfbch2_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbch2_crcf_get_M(_q: firpfbch2_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firpfbch2_crcf_get_m(_q: firpfbch2_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firpfbch2_crcf_execute(
        _q: firpfbch2_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct firpfbchr_crcf_s {
    _unused: [u8; 0],
}
pub type firpfbchr_crcf = *mut firpfbchr_crcf_s;
extern "C" {
    pub fn firpfbchr_crcf_create(
        _chans: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _h: *mut f32,
    ) -> firpfbchr_crcf;
}
extern "C" {
    pub fn firpfbchr_crcf_create_kaiser(
        _chans: ::std::os::raw::c_uint,
        _decim: ::std::os::raw::c_uint,
        _m: ::std::os::raw::c_uint,
        _as: f32,
    ) -> firpfbchr_crcf;
}
extern "C" {
    pub fn firpfbchr_crcf_destroy(_q: firpfbchr_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbchr_crcf_reset(_q: firpfbchr_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbchr_crcf_print(_q: firpfbchr_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbchr_crcf_get_M(_q: firpfbchr_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firpfbchr_crcf_get_num_channels(_q: firpfbchr_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firpfbchr_crcf_get_P(_q: firpfbchr_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firpfbchr_crcf_get_decim_rate(_q: firpfbchr_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firpfbchr_crcf_get_m(_q: firpfbchr_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn firpfbchr_crcf_push(
        _q: firpfbchr_crcf,
        _x: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn firpfbchr_crcf_execute(
        _q: firpfbchr_crcf,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframe_init_default_sctype(
        _M: ::std::os::raw::c_uint,
        _p: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframe_init_sctype_range(
        _M: ::std::os::raw::c_uint,
        _f0: f32,
        _f1: f32,
        _p: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframe_validate_sctype(
        _p: *mut ::std::os::raw::c_uchar,
        _M: ::std::os::raw::c_uint,
        _M_null: *mut ::std::os::raw::c_uint,
        _M_pilot: *mut ::std::os::raw::c_uint,
        _M_data: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframe_print_sctype(
        _p: *mut ::std::os::raw::c_uchar,
        _M: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ofdmframegen_s {
    _unused: [u8; 0],
}
pub type ofdmframegen = *mut ofdmframegen_s;
extern "C" {
    pub fn ofdmframegen_create(
        _M: ::std::os::raw::c_uint,
        _cp_len: ::std::os::raw::c_uint,
        _taper_len: ::std::os::raw::c_uint,
        _p: *mut ::std::os::raw::c_uchar,
    ) -> ofdmframegen;
}
extern "C" {
    pub fn ofdmframegen_destroy(_q: ofdmframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframegen_print(_q: ofdmframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframegen_reset(_q: ofdmframegen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframegen_write_S0a(
        _q: ofdmframegen,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframegen_write_S0b(
        _q: ofdmframegen,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframegen_write_S1(
        _q: ofdmframegen,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframegen_writesymbol(
        _q: ofdmframegen,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframegen_writetail(
        _q: ofdmframegen,
        _x: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
pub type ofdmframesync_callback = ::std::option::Option<
    unsafe extern "C" fn(
        _y: *mut liquid_float_complex,
        _p: *mut ::std::os::raw::c_uchar,
        _M: ::std::os::raw::c_uint,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ofdmframesync_s {
    _unused: [u8; 0],
}
pub type ofdmframesync = *mut ofdmframesync_s;
extern "C" {
    pub fn ofdmframesync_create(
        _M: ::std::os::raw::c_uint,
        _cp_len: ::std::os::raw::c_uint,
        _taper_len: ::std::os::raw::c_uint,
        _p: *mut ::std::os::raw::c_uchar,
        _callback: ofdmframesync_callback,
        _userdata: *mut ::std::os::raw::c_void,
    ) -> ofdmframesync;
}
extern "C" {
    pub fn ofdmframesync_destroy(_q: ofdmframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_print(_q: ofdmframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_reset(_q: ofdmframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_is_frame_open(_q: ofdmframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_execute(
        _q: ofdmframesync,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_get_rssi(_q: ofdmframesync) -> f32;
}
extern "C" {
    pub fn ofdmframesync_get_cfo(_q: ofdmframesync) -> f32;
}
extern "C" {
    pub fn ofdmframesync_set_cfo(_q: ofdmframesync, _cfo: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_debug_enable(_q: ofdmframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_debug_disable(_q: ofdmframesync) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofdmframesync_debug_print(
        _q: ofdmframesync,
        _filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const liquid_ncotype_LIQUID_NCO: liquid_ncotype = 0;
pub const liquid_ncotype_LIQUID_VCO: liquid_ncotype = 1;
pub const liquid_ncotype_LIQUID_VCO_INTERP: liquid_ncotype = 1;
pub const liquid_ncotype_LIQUID_VCO_DIRECT: liquid_ncotype = 2;
pub type liquid_ncotype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nco_crcf_s {
    _unused: [u8; 0],
}
pub type nco_crcf = *mut nco_crcf_s;
extern "C" {
    pub fn nco_crcf_create(_type: liquid_ncotype) -> nco_crcf;
}
extern "C" {
    pub fn nco_crcf_copy(_q: nco_crcf) -> nco_crcf;
}
extern "C" {
    pub fn nco_crcf_destroy(_q: nco_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_print(_q: nco_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_reset(_q: nco_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_get_frequency(_q: nco_crcf) -> f32;
}
extern "C" {
    pub fn nco_crcf_set_frequency(_q: nco_crcf, _dtheta: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_adjust_frequency(_q: nco_crcf, _step: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_get_phase(_q: nco_crcf) -> f32;
}
extern "C" {
    pub fn nco_crcf_set_phase(_q: nco_crcf, _phi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_adjust_phase(_q: nco_crcf, _dphi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_get_vcodirect_frequency(
        _q: nco_crcf,
        _n: *mut ::std::os::raw::c_int,
        _m: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn nco_crcf_set_vcodirect_frequency(
        _q: nco_crcf,
        _n: ::std::os::raw::c_int,
        _m: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn nco_crcf_step(_q: nco_crcf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_sin(_q: nco_crcf) -> f32;
}
extern "C" {
    pub fn nco_crcf_cos(_q: nco_crcf) -> f32;
}
extern "C" {
    pub fn nco_crcf_sincos(_q: nco_crcf, _s: *mut f32, _c: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_cexpf(_q: nco_crcf, _y: *mut liquid_float_complex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_pll_set_bandwidth(_q: nco_crcf, _bw: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_pll_step(_q: nco_crcf, _dphi: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_mix_up(
        _q: nco_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_mix_down(
        _q: nco_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_mix_block_up(
        _q: nco_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nco_crcf_mix_block_down(
        _q: nco_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_unwrap_phase(_theta: *mut f32, _n: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn liquid_unwrap_phase2(_theta: *mut f32, _n: ::std::os::raw::c_uint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct synth_crcf_s {
    _unused: [u8; 0],
}
pub type synth_crcf = *mut synth_crcf_s;
extern "C" {
    pub fn synth_crcf_create(
        _table: *const liquid_float_complex,
        _length: ::std::os::raw::c_uint,
    ) -> synth_crcf;
}
extern "C" {
    pub fn synth_crcf_destroy(_q: synth_crcf);
}
extern "C" {
    pub fn synth_crcf_reset(_q: synth_crcf);
}
extern "C" {
    pub fn synth_crcf_get_frequency(_q: synth_crcf) -> f32;
}
extern "C" {
    pub fn synth_crcf_set_frequency(_q: synth_crcf, _f: f32);
}
extern "C" {
    pub fn synth_crcf_adjust_frequency(_q: synth_crcf, _df: f32);
}
extern "C" {
    pub fn synth_crcf_get_phase(_q: synth_crcf) -> f32;
}
extern "C" {
    pub fn synth_crcf_set_phase(_q: synth_crcf, _phi: f32);
}
extern "C" {
    pub fn synth_crcf_adjust_phase(_q: synth_crcf, _dphi: f32);
}
extern "C" {
    pub fn synth_crcf_get_length(_q: synth_crcf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn synth_crcf_get_current(_q: synth_crcf) -> liquid_float_complex;
}
extern "C" {
    pub fn synth_crcf_get_half_previous(_q: synth_crcf) -> liquid_float_complex;
}
extern "C" {
    pub fn synth_crcf_get_half_next(_q: synth_crcf) -> liquid_float_complex;
}
extern "C" {
    pub fn synth_crcf_step(_q: synth_crcf);
}
extern "C" {
    pub fn synth_crcf_pll_set_bandwidth(_q: synth_crcf, _bandwidth: f32);
}
extern "C" {
    pub fn synth_crcf_pll_step(_q: synth_crcf, _dphi: f32);
}
extern "C" {
    pub fn synth_crcf_mix_up(
        _q: synth_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn synth_crcf_mix_down(
        _q: synth_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn synth_crcf_mix_block_up(
        _q: synth_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _N: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn synth_crcf_mix_block_down(
        _q: synth_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _N: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn synth_crcf_spread(
        _q: synth_crcf,
        _x: liquid_float_complex,
        _y: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn synth_crcf_despread(
        _q: synth_crcf,
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn synth_crcf_despread_triple(
        _q: synth_crcf,
        _x: *mut liquid_float_complex,
        _early: *mut liquid_float_complex,
        _punctual: *mut liquid_float_complex,
        _late: *mut liquid_float_complex,
    );
}
pub type utility_function = ::std::option::Option<
    unsafe extern "C" fn(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> f32,
>;
pub type liquid_utility_1d = ::std::option::Option<
    unsafe extern "C" fn(_v: f32, _userdata: *mut ::std::os::raw::c_void) -> f32,
>;
extern "C" {
    pub fn liquid_rosenbrock(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn liquid_invgauss(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn liquid_multimodal(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn liquid_spiral(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut f32,
        _n: ::std::os::raw::c_uint,
    ) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gradsearch_s {
    _unused: [u8; 0],
}
pub type gradsearch = *mut gradsearch_s;
extern "C" {
    pub fn gradsearch_create(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut f32,
        _num_parameters: ::std::os::raw::c_uint,
        _utility: utility_function,
        _direction: ::std::os::raw::c_int,
    ) -> gradsearch;
}
extern "C" {
    pub fn gradsearch_destroy(_q: gradsearch);
}
extern "C" {
    pub fn gradsearch_print(_q: gradsearch);
}
extern "C" {
    pub fn gradsearch_step(_q: gradsearch) -> f32;
}
extern "C" {
    pub fn gradsearch_execute(
        _q: gradsearch,
        _max_iterations: ::std::os::raw::c_uint,
        _target_utility: f32,
    ) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qs1dsearch_s {
    _unused: [u8; 0],
}
pub type qs1dsearch = *mut qs1dsearch_s;
extern "C" {
    pub fn qs1dsearch_create(
        _u: liquid_utility_1d,
        _userdata: *mut ::std::os::raw::c_void,
        _direction: ::std::os::raw::c_int,
    ) -> qs1dsearch;
}
extern "C" {
    pub fn qs1dsearch_destroy(_q: qs1dsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_copy(_q: qs1dsearch) -> qs1dsearch;
}
extern "C" {
    pub fn qs1dsearch_print(_q: qs1dsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_reset(_q: qs1dsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_init(_q: qs1dsearch, _v0: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_init_direction(
        _q: qs1dsearch,
        _v_init: f32,
        _step: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_init_bounds(_q: qs1dsearch, _vn: f32, _vp: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_step(_q: qs1dsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_execute(_q: qs1dsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qs1dsearch_get_num_steps(_q: qs1dsearch) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qs1dsearch_get_opt_v(_q: qs1dsearch) -> f32;
}
extern "C" {
    pub fn qs1dsearch_get_opt_u(_q: qs1dsearch) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qnsearch_s {
    _unused: [u8; 0],
}
pub type qnsearch = *mut qnsearch_s;
extern "C" {
    pub fn qnsearch_create(
        _userdata: *mut ::std::os::raw::c_void,
        _v: *mut f32,
        _num_parameters: ::std::os::raw::c_uint,
        _u: utility_function,
        _direction: ::std::os::raw::c_int,
    ) -> qnsearch;
}
extern "C" {
    pub fn qnsearch_destroy(_g: qnsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qnsearch_print(_g: qnsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qnsearch_reset(_g: qnsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qnsearch_step(_g: qnsearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qnsearch_execute(
        _g: qnsearch,
        _max_iterations: ::std::os::raw::c_uint,
        _target_utility: f32,
    ) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chromosome_s {
    _unused: [u8; 0],
}
pub type chromosome = *mut chromosome_s;
extern "C" {
    pub fn chromosome_create(
        _bits_per_trait: *mut ::std::os::raw::c_uint,
        _num_traits: ::std::os::raw::c_uint,
    ) -> chromosome;
}
extern "C" {
    pub fn chromosome_create_basic(
        _num_traits: ::std::os::raw::c_uint,
        _bits_per_trait: ::std::os::raw::c_uint,
    ) -> chromosome;
}
extern "C" {
    pub fn chromosome_create_clone(_parent: chromosome) -> chromosome;
}
extern "C" {
    pub fn chromosome_copy(_parent: chromosome, _child: chromosome) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_destroy(_c: chromosome) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_get_num_traits(_c: chromosome) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chromosome_print(_c: chromosome) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_printf(_c: chromosome) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_reset(_c: chromosome) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_init(
        _c: chromosome,
        _v: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_initf(_c: chromosome, _v: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_mutate(
        _c: chromosome,
        _index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_crossover(
        _p1: chromosome,
        _p2: chromosome,
        _c: chromosome,
        _threshold: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_init_random(_c: chromosome) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chromosome_value(
        _c: chromosome,
        _index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chromosome_valuef(_c: chromosome, _index: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gasearch_s {
    _unused: [u8; 0],
}
pub type gasearch = *mut gasearch_s;
pub type gasearch_utility = ::std::option::Option<
    unsafe extern "C" fn(_userdata: *mut ::std::os::raw::c_void, _c: chromosome) -> f32,
>;
extern "C" {
    pub fn gasearch_create(
        _u: gasearch_utility,
        _userdata: *mut ::std::os::raw::c_void,
        _parent: chromosome,
        _minmax: ::std::os::raw::c_int,
    ) -> gasearch;
}
extern "C" {
    pub fn gasearch_create_advanced(
        _utility: gasearch_utility,
        _userdata: *mut ::std::os::raw::c_void,
        _parent: chromosome,
        _minmax: ::std::os::raw::c_int,
        _population_size: ::std::os::raw::c_uint,
        _mutation_rate: f32,
    ) -> gasearch;
}
extern "C" {
    pub fn gasearch_destroy(_q: gasearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gasearch_print(_q: gasearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gasearch_set_mutation_rate(_q: gasearch, _mutation_rate: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gasearch_set_population_size(
        _q: gasearch,
        _population_size: ::std::os::raw::c_uint,
        _selection_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gasearch_run(
        _q: gasearch,
        _max_iterations: ::std::os::raw::c_uint,
        _target_utility: f32,
    ) -> f32;
}
extern "C" {
    pub fn gasearch_evolve(_q: gasearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gasearch_getopt(
        _q: gasearch,
        _c: chromosome,
        _utility_opt: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compress_mulaw(_x: f32, _mu: f32) -> f32;
}
extern "C" {
    pub fn expand_mulaw(_x: f32, _mu: f32) -> f32;
}
extern "C" {
    pub fn compress_cf_mulaw(
        _x: liquid_float_complex,
        _mu: f32,
        _y: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn expand_cf_mulaw(
        _y: liquid_float_complex,
        _mu: f32,
        _x: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quantize_adc(_x: f32, _num_bits: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn quantize_dac(_s: ::std::os::raw::c_uint, _num_bits: ::std::os::raw::c_uint) -> f32;
}
pub const liquid_compander_type_LIQUID_COMPANDER_NONE: liquid_compander_type = 0;
pub const liquid_compander_type_LIQUID_COMPANDER_LINEAR: liquid_compander_type = 1;
pub const liquid_compander_type_LIQUID_COMPANDER_MULAW: liquid_compander_type = 2;
pub const liquid_compander_type_LIQUID_COMPANDER_ALAW: liquid_compander_type = 3;
pub type liquid_compander_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quantizerf_s {
    _unused: [u8; 0],
}
pub type quantizerf = *mut quantizerf_s;
extern "C" {
    pub fn quantizerf_create(
        _ctype: liquid_compander_type,
        _range: f32,
        _num_bits: ::std::os::raw::c_uint,
    ) -> quantizerf;
}
extern "C" {
    pub fn quantizerf_destroy(_q: quantizerf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quantizerf_print(_q: quantizerf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quantizerf_execute_adc(
        _q: quantizerf,
        _x: f32,
        _s: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quantizerf_execute_dac(
        _q: quantizerf,
        _s: ::std::os::raw::c_uint,
        _x: *mut f32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quantizercf_s {
    _unused: [u8; 0],
}
pub type quantizercf = *mut quantizercf_s;
extern "C" {
    pub fn quantizercf_create(
        _ctype: liquid_compander_type,
        _range: f32,
        _num_bits: ::std::os::raw::c_uint,
    ) -> quantizercf;
}
extern "C" {
    pub fn quantizercf_destroy(_q: quantizercf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quantizercf_print(_q: quantizercf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quantizercf_execute_adc(
        _q: quantizercf,
        _x: liquid_float_complex,
        _s: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quantizercf_execute_dac(
        _q: quantizercf,
        _s: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn randf() -> f32;
}
extern "C" {
    pub fn randf_pdf(_x: f32) -> f32;
}
extern "C" {
    pub fn randf_cdf(_x: f32) -> f32;
}
extern "C" {
    pub fn randuf(_a: f32, _b: f32) -> f32;
}
extern "C" {
    pub fn randuf_pdf(_x: f32, _a: f32, _b: f32) -> f32;
}
extern "C" {
    pub fn randuf_cdf(_x: f32, _a: f32, _b: f32) -> f32;
}
extern "C" {
    pub fn randnf() -> f32;
}
extern "C" {
    pub fn awgn(_x: *mut f32, _nstd: f32);
}
extern "C" {
    pub fn crandnf(_y: *mut liquid_float_complex);
}
extern "C" {
    pub fn cawgn(_x: *mut liquid_float_complex, _nstd: f32);
}
extern "C" {
    pub fn randnf_pdf(_x: f32, _eta: f32, _sig: f32) -> f32;
}
extern "C" {
    pub fn randnf_cdf(_x: f32, _eta: f32, _sig: f32) -> f32;
}
extern "C" {
    pub fn randexpf(_lambda: f32) -> f32;
}
extern "C" {
    pub fn randexpf_pdf(_x: f32, _lambda: f32) -> f32;
}
extern "C" {
    pub fn randexpf_cdf(_x: f32, _lambda: f32) -> f32;
}
extern "C" {
    pub fn randweibf(_alpha: f32, _beta: f32, _gamma: f32) -> f32;
}
extern "C" {
    pub fn randweibf_pdf(_x: f32, _a: f32, _b: f32, _g: f32) -> f32;
}
extern "C" {
    pub fn randweibf_cdf(_x: f32, _a: f32, _b: f32, _g: f32) -> f32;
}
extern "C" {
    pub fn randgammaf(_alpha: f32, _beta: f32) -> f32;
}
extern "C" {
    pub fn randgammaf_pdf(_x: f32, _alpha: f32, _beta: f32) -> f32;
}
extern "C" {
    pub fn randgammaf_cdf(_x: f32, _alpha: f32, _beta: f32) -> f32;
}
extern "C" {
    pub fn randnakmf(_m: f32, _omega: f32) -> f32;
}
extern "C" {
    pub fn randnakmf_pdf(_x: f32, _m: f32, _omega: f32) -> f32;
}
extern "C" {
    pub fn randnakmf_cdf(_x: f32, _m: f32, _omega: f32) -> f32;
}
extern "C" {
    pub fn randricekf(_K: f32, _omega: f32) -> f32;
}
extern "C" {
    pub fn randricekf_cdf(_x: f32, _K: f32, _omega: f32) -> f32;
}
extern "C" {
    pub fn randricekf_pdf(_x: f32, _K: f32, _omega: f32) -> f32;
}
extern "C" {
    pub fn scramble_data(_x: *mut ::std::os::raw::c_uchar, _len: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unscramble_data(_x: *mut ::std::os::raw::c_uchar, _len: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unscramble_data_soft(_x: *mut ::std::os::raw::c_uchar, _len: ::std::os::raw::c_uint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bsequence_s {
    _unused: [u8; 0],
}
pub type bsequence = *mut bsequence_s;
extern "C" {
    pub fn bsequence_create(num_bits: ::std::os::raw::c_uint) -> bsequence;
}
extern "C" {
    pub fn bsequence_destroy(_bs: bsequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_reset(_bs: bsequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_init(
        _bs: bsequence,
        _v: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_print(_bs: bsequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_push(_bs: bsequence, _bit: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_circshift(_bs: bsequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_correlate(_bs1: bsequence, _bs2: bsequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_add(
        _bs1: bsequence,
        _bs2: bsequence,
        _bs3: bsequence,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_mul(
        _bs1: bsequence,
        _bs2: bsequence,
        _bs3: bsequence,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_accumulate(_bs: bsequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn bsequence_get_length(_bs: bsequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn bsequence_index(_bs: bsequence, _i: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn bsequence_create_ccodes(_a: bsequence, _b: bsequence) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msequence_s {
    _unused: [u8; 0],
}
pub type msequence = *mut msequence_s;
extern "C" {
    pub fn msequence_create(
        _m: ::std::os::raw::c_uint,
        _g: ::std::os::raw::c_uint,
        _a: ::std::os::raw::c_uint,
    ) -> msequence;
}
extern "C" {
    pub fn msequence_copy(q_orig: msequence) -> msequence;
}
extern "C" {
    pub fn msequence_create_genpoly(_g: ::std::os::raw::c_uint) -> msequence;
}
extern "C" {
    pub fn msequence_create_default(_m: ::std::os::raw::c_uint) -> msequence;
}
extern "C" {
    pub fn msequence_destroy(_m: msequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msequence_print(_m: msequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msequence_advance(_ms: msequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msequence_generate_symbol(
        _ms: msequence,
        _bps: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msequence_reset(_ms: msequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsequence_init_msequence(_bs: bsequence, _ms: msequence) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msequence_get_genpoly_length(_ms: msequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msequence_get_length(_ms: msequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msequence_get_genpoly(_ms: msequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msequence_get_state(_ms: msequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msequence_set_state(_ms: msequence, _a: ::std::os::raw::c_uint)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msequence_measure_period(_ms: msequence) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn msequence_genpoly_period(_g: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_malloc_copy(
        _orig: *mut ::std::os::raw::c_void,
        _num: ::std::os::raw::c_uint,
        _size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn liquid_pack_array(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
        _sym_in: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_unpack_array(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _k: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
        _sym_out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_pack_bytes(
        _sym_in: *mut ::std::os::raw::c_uchar,
        _sym_in_len: ::std::os::raw::c_uint,
        _sym_out: *mut ::std::os::raw::c_uchar,
        _sym_out_len: ::std::os::raw::c_uint,
        _num_written: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_unpack_bytes(
        _sym_in: *mut ::std::os::raw::c_uchar,
        _sym_in_len: ::std::os::raw::c_uint,
        _sym_out: *mut ::std::os::raw::c_uchar,
        _sym_out_len: ::std::os::raw::c_uint,
        _num_written: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_repack_bytes(
        _sym_in: *mut ::std::os::raw::c_uchar,
        _sym_in_bps: ::std::os::raw::c_uint,
        _sym_in_len: ::std::os::raw::c_uint,
        _sym_out: *mut ::std::os::raw::c_uchar,
        _sym_out_bps: ::std::os::raw::c_uint,
        _sym_out_len: ::std::os::raw::c_uint,
        _num_written: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_lbshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_rbshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_lbcircshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_rbcircshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_lshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_rshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_lcircshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_rcircshift(
        _src: *mut ::std::os::raw::c_uchar,
        _n: ::std::os::raw::c_uint,
        _b: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_count_ones(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_count_ones_mod2(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_bdotprod(
        _x: ::std::os::raw::c_uint,
        _y: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_count_leading_zeros(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_msb_index(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_print_bitstring(
        _x: ::std::os::raw::c_uint,
        _n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_reverse_byte(_x: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn liquid_reverse_uint16(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_reverse_uint24(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_reverse_uint32(_x: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn liquid_get_scale(
        _val: f32,
        _unit: *mut ::std::os::raw::c_char,
        _scale: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn liquid_vectorf_init(_c: f32, _x: *mut f32, _n: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn liquid_vectorf_add(_x: *mut f32, _y: *mut f32, _n: ::std::os::raw::c_uint, _z: *mut f32);
}
extern "C" {
    pub fn liquid_vectorf_addscalar(
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _c: f32,
        _y: *mut f32,
    );
}
extern "C" {
    pub fn liquid_vectorf_mul(_x: *mut f32, _y: *mut f32, _n: ::std::os::raw::c_uint, _z: *mut f32);
}
extern "C" {
    pub fn liquid_vectorf_mulscalar(
        _x: *mut f32,
        _n: ::std::os::raw::c_uint,
        _c: f32,
        _y: *mut f32,
    );
}
extern "C" {
    pub fn liquid_vectorf_cexpj(_theta: *mut f32, _n: ::std::os::raw::c_uint, _x: *mut f32);
}
extern "C" {
    pub fn liquid_vectorf_carg(_x: *mut f32, _n: ::std::os::raw::c_uint, _theta: *mut f32);
}
extern "C" {
    pub fn liquid_vectorf_abs(_x: *mut f32, _n: ::std::os::raw::c_uint, _y: *mut f32);
}
extern "C" {
    pub fn liquid_vectorf_sumsq(_x: *mut f32, _n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_vectorf_norm(_x: *mut f32, _n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_vectorf_pnorm(_x: *mut f32, _n: ::std::os::raw::c_uint, _p: f32) -> f32;
}
extern "C" {
    pub fn liquid_vectorf_normalize(_x: *mut f32, _n: ::std::os::raw::c_uint, _y: *mut f32);
}
extern "C" {
    pub fn liquid_vectorcf_init(
        _c: liquid_float_complex,
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn liquid_vectorcf_add(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _z: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn liquid_vectorcf_addscalar(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _c: liquid_float_complex,
        _y: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn liquid_vectorcf_mul(
        _x: *mut liquid_float_complex,
        _y: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _z: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn liquid_vectorcf_mulscalar(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _c: liquid_float_complex,
        _y: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn liquid_vectorcf_cexpj(
        _theta: *mut f32,
        _n: ::std::os::raw::c_uint,
        _x: *mut liquid_float_complex,
    );
}
extern "C" {
    pub fn liquid_vectorcf_carg(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _theta: *mut f32,
    );
}
extern "C" {
    pub fn liquid_vectorcf_abs(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut f32,
    );
}
extern "C" {
    pub fn liquid_vectorcf_sumsq(_x: *mut liquid_float_complex, _n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_vectorcf_norm(_x: *mut liquid_float_complex, _n: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn liquid_vectorcf_pnorm(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _p: f32,
    ) -> f32;
}
extern "C" {
    pub fn liquid_vectorcf_normalize(
        _x: *mut liquid_float_complex,
        _n: ::std::os::raw::c_uint,
        _y: *mut liquid_float_complex,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
